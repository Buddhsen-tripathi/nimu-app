================
CODE SNIPPETS
================
### Quickstart Cypress Setup with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Use `create-next-app` with the `with-cypress` example to bootstrap a new Next.js project with Cypress already configured. This is the fastest way to get started.

```bash
npx create-next-app@latest --example with-cypress with-cypress-app
```

--------------------------------

### Bootstrap the Example Application with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md

Use npx, Yarn, or pnpm to initialize a new Next.js project from the `cms-tina` example template. This command sets up the complete project structure and necessary files to get started.

```npx
npx create-next-app --example cms-tina cms-tina-app
```

```yarn
yarn create next-app --example cms-tina cms-tina-app
```

```pnpm
pnpm create next-app --example cms-tina cms-tina-app
```

--------------------------------

### Install Dependencies and Start the Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md

After setting up the project, run `npm install` to download all the required dependencies from the `package.json` file. Use `npm start` to launch the development server, which typically provides live-reloading and other development features.

```bash
npm install
npm start
```

--------------------------------

### Quickstart with create-next-app and Vitest

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx

Use `create-next-app` with the `with-vitest` example to quickly bootstrap a new Next.js project pre-configured with Vitest. This command creates a new directory named 'with-vitest-app' with the complete setup.

```bash
npx create-next-app@latest --example with-vitest with-vitest-app
```

--------------------------------

### Install and Run the Next.js Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-formspree/README.md

These shell commands first install the necessary project dependencies using npm, and then start the Next.js development server. The application will be available locally at localhost:3000.

```shell
# Install dependencies
npm install

# Run next locally at localhost:3000
npm run dev
```

--------------------------------

### Initialize Next.js App Interactively with `create-next-app` CLI

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This command initiates the `create-next-app` CLI tool in interactive mode, guiding the user through the setup process. It prompts for project name, TypeScript, ESLint, Tailwind CSS, `src/` directory usage, App Router, Turbopack, and import alias preferences. This allows for a customized project setup based on user input.

```bash
npx create-next-app@latest
```

--------------------------------

### Create and Run Next.js App (Quick Start)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet demonstrates how to quickly set up and run a new Next.js application using `create-next-app`. It includes commands for various package managers (pnpm, npm, yarn, bun) to create the project, navigate into its directory, and start the development server locally. The `--yes` flag skips interactive prompts, using default settings.

```bash
pnpm create next-app@latest my-app --yes
cd my-app
pnpm dev
```

```bash
npx create-next-app@latest my-app --yes
cd my-app
npm run dev
```

```bash
yarn create next-app@latest my-app --yes
cd my-app
yarn dev
```

```bash
bun create next-app@latest my-app --yes
cd my-app
bun dev
```

--------------------------------

### Bootstrap the Example Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to quickly set up a new Next.js project based on the `with-userbase` example. This command clones the example repository and installs the necessary dependencies.

```bash
npx create-next-app --example with-userbase next-userbase-app
```

```bash
yarn create next-app --example with-userbase next-userbase-app
```

```bash
pnpm create next-app --example with-userbase next-userbase-app
```

--------------------------------

### Bootstrap the Next.js api.video Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `with-apivideo` example. This command scaffolds the application structure and necessary files to get started.

```bash
npx create-next-app --example with-apivideo with-apivideo-app
```

```bash
yarn create next-app --example with-apivideo with-apivideo-app
```

```bash
pnpm create next-app --example with-apivideo with-apivideo-app
```

--------------------------------

### Install Dependencies and Run Next.js Dev Server

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

These commands first install the project dependencies and then start the Next.js development server. The application will be accessible locally, typically at http://localhost:3000.

```bash
npm install && npm run dev
```

```bash
yarn install && yarn dev
```

```bash
pnpm install && pnpm dev
```

--------------------------------

### Create a Next.js App with the Turso Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md

Bootstrap a new Next.js application using the official `with-turso` example. These commands create a new project directory with all the necessary configuration to get started with Turso integration.

```bash
npx create-next-app --example with-turso with-turso-app
```

```bash
yarn create next-app --example with-turso with-turso-app
```

```bash
pnpm create next-app --example with-turso with-turso-app
```

--------------------------------

### Run the Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md

Install the project's dependencies and start the development server using either npm or Yarn. The blog will then be available on `http://localhost:3000`.

```bash
npm install
npm run dev

# or

yarn install
yarn dev
```

--------------------------------

### Bootstrap Next.js Clerk Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md

Initialize a new Next.js project using the `with-clerk` example template. These commands demonstrate how to use `create-next-app` with npx, Yarn, and pnpm to get started.

```bash
npx create-next-app --example with-clerk with-clerk-app
```

```bash
yarn create next-app --example with-clerk with-clerk-app
```

```bash
pnpm create next-app --example with-clerk with-clerk-app
```

--------------------------------

### Run the Next.js and Tigris App Locally

Source: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md

This sequence of shell commands demonstrates how to set up and run the Next.js with Tigris example application on a local machine. It covers installing the Tigris CLI on macOS, cloning the repository, installing dependencies, and starting the development servers for both Tigris and Next.js.

```shell
# 1. Install Tigris CLI (macOS)
brew install tigrisdata/tigris/tigris-cli

# 2. Clone this repo on your computer
git clone https://github.com/tigrisdata/tigris-vercel-starter

# 3. Install dependencies
cd tigris-vercel-starter
npm install

# 4. Start Tigris local development environment
tigris dev start

# 5. Run the Next.js server
npm run dev
```

--------------------------------

### Install OpenTelemetry Dependencies

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx

Install the required packages to get started with OpenTelemetry in your Next.js application using npm. This includes `@vercel/otel` for quick setup, along with OpenTelemetry's SDK logs, API logs, and instrumentation packages.

```bash
npm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation
```

--------------------------------

### Initialize Environment File for Sanity Setup

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

This command copies the example environment file `.env.local.example` to a new `.env.local` file. This is the first step in configuring the necessary environment variables for the Sanity.io integration in your Next.js project.

```bash
cp -i .env.local.example .env.local
```

--------------------------------

### Create a Next.js App with Playwright via Quickstart

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Bootstrap a new Next.js project that includes a pre-configured Playwright setup by using the official `with-playwright` example. This command creates a new directory named `with-playwright-app` with all necessary files and configurations.

```bash
npx create-next-app@latest --example with-playwright with-playwright-app
```

--------------------------------

### Bootstrap a Next.js App with Turbopack using npx, Yarn, or pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md

These commands use `create-next-app` to initialize a new Next.js project from the `with-turbopack` example. Choose the command corresponding to your preferred package manager (npm/npx, Yarn, or pnpm) to create the application.

```bash
npx create-next-app --example with-turbopack with-turbopack-app

yarn create next-app --example with-turbopack with-turbopack-app

pnpm create next-app --example with-turbopack with-turbopack-app
```

--------------------------------

### Bootstrap the Example Application with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md

Use npx, Yarn, or pnpm to initialize a new project using the `cms-cosmic` example. This command scaffolds the application with all the necessary files and dependencies.

```bash
npx create-next-app --example cms-cosmic cms-cosmic-app
```

```bash
yarn create next-app --example cms-cosmic cms-cosmic-app
```

```bash
pnpm create next-app --example cms-cosmic cms-cosmic-app
```

--------------------------------

### Install Project Dependencies

Source: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md

Installs project dependencies using npm, Yarn, or pnpm. This step is crucial for setting up the project after cloning or creating it. It does not take any input and prepares the project for further configuration and execution.

```bash
npm install
```

```bash
yarn
```

```bash
pnpm install
```

--------------------------------

### Run the Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/ts/README-template.md

These commands start the Next.js development server. You can use the command corresponding to your preferred package manager (npm, Yarn, pnpm, or Bun). The server will typically run on http://localhost:3000.

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

--------------------------------

### Create Next.js App with EdgeDB Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md

Use create-next-app to bootstrap the project with the EdgeDB example. This command sets up the basic project structure and installs necessary dependencies.

```bash
npx create-next-app --example with-edgedb with-edgedb-app
```

```bash
yarn create next-app --example with-edgedb with-edgedb-app
```

```bash
pnpm create next-app --example with-edgedb with-edgedb-app
```

--------------------------------

### Bootstrap Next.js App with Firebase Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md

Initialize a new Next.js project using the `with-firebase` example. These commands demonstrate how to use `create-next-app` with npm, Yarn, and pnpm to get started quickly.

```bash
npx create-next-app --example with-firebase with-firebase-app
```

```bash
yarn create next-app --example with-firebase with-firebase-app
```

```bash
pnpm create next-app --example with-firebase with-firebase-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md

Use `create-next-app` with npm, Yarn, or pnpm to initialize a new Next.js project based on the `with-react-md-typescript` example. Each command creates a new directory with the complete project setup.

```bash
npx create-next-app --example with-react-md-typescript with-react-md-typescript-app
```

```bash
yarn create next-app --example with-react-md-typescript with-react-md-typescript-app
```

```bash
pnpm create next-app --example with-react-md-typescript with-react-md-typescript-app
```

--------------------------------

### Bootstrap the Next.js Overmind Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md

Use `create-next-app` with npm, Yarn, or pnpm to initialize a new Next.js project from the `with-overmind` example. These commands will create a new directory named `with-overmind-app` containing the project setup.

```bash
npx create-next-app --example with-overmind with-overmind-app
```

```bash
yarn create next-app --example with-overmind with-overmind-app
```

```bash
pnpm create next-app --example with-overmind with-overmind-app
```

--------------------------------

### Bootstrap the Next.js Algolia Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md

Use `create-next-app` to set up the example project locally. These commands bootstrap the application using npx, Yarn, pnpm, or Bun, creating a new directory with the project files.

```bash
npx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

```bash
yarn create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

```bash
pnpm create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

```bash
bunx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

--------------------------------

### Bootstrap the Next.js Project with an Example

Source: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md

Use the `create-next-app` command to initialize a new Next.js application based on the `blog-with-comment` example. This command sets up the project structure in a new directory named `blog-with-comment-app`.

```bash
npx create-next-app --example blog-with-comment blog-with-comment-app
```

--------------------------------

### Bootstrap a Next.js Blog Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md

Use the `create-next-app` command-line tool to initialize a new project based on the Next.js blog example. You can use npx, Yarn, or pnpm to execute the command, which will create a new directory named 'my-blog' with the project files.

```Bash
npx create-next-app --example blog my-blog
```

```Bash
yarn create next-app --example blog my-blog
```

```Bash
pnpm create next-app --example blog my-blog
```

--------------------------------

### Bootstrap the Next.js SEO Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md

Use the `create-next-app` command with your preferred package manager to set up the example project. These commands bootstrap a new Next.js application in a folder named `next-seo-app`, pre-configured with the `next-seo` library.

```bash
npx create-next-app --example with-next-seo next-seo-app
```

```bash
yarn create next-app --example with-next-seo next-seo-app
```

```bash
pnpm create next-app --example with-next-seo next-seo-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md

Initialize a new Next.js project based on the `with-graphql-gateway` example using your preferred package manager. These commands will create a new directory with the example's code and dependencies.

```bash
npx create-next-app --example with-graphql-gateway with-graphql-gateway-app
```

```bash
yarn create next-app --example with-graphql-gateway with-graphql-gateway-app
```

```bash
pnpm create next-app --example with-graphql-gateway with-graphql-gateway-app
```

--------------------------------

### Create Next.js app with MongoDB example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md

Uses create-next-app to bootstrap a Next.js project with the MongoDB example.  This command initializes a new project with necessary dependencies and configurations for MongoDB integration. Requires npm, Yarn, or pnpm to be installed.

```bash
npx create-next-app --example with-mongodb with-mongodb-app
```

```bash
yarn create next-app --example with-mongodb with-mongodb-app
```

```bash
pnpm create next-app --example with-mongodb with-mongodb-app
```

--------------------------------

### Bootstrap the Next.js `graphql-react` Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project pre-configured with the `graphql-react` example. These commands will create a new directory named `with-graphql-react-app` containing the example project.

```bash
npx create-next-app --example with-graphql-react with-graphql-react-app
```

```bash
yarn create next-app --example with-graphql-react with-graphql-react-app
```

```bash
pnpm create next-app --example with-graphql-react with-graphql-react-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new project from the `cms-builder-io` example. This command sets up the basic file structure and dependencies for the blog application.

```bash
npx create-next-app --example cms-builder-io cms-builder-io-app
```

```bash
yarn create next-app --example cms-builder-io cms-builder-io-app
```

```bash
pnpm create next-app --example cms-builder-io cms-builder-io-app
```

--------------------------------

### Run the Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md

Install project dependencies and start the local development server using either npm or Yarn. Once running, the blog will be available for preview at http://localhost:3000.

```bash
npm install
npm run dev
```

```bash
yarn install
yarn dev
```

--------------------------------

### Bootstrap the Next.js Blog Starter App

Source: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the blog starter example. This command will create a new directory named `blog-starter-app` with the project files.

```bash
npx create-next-app --example blog-starter blog-starter-app
```

```bash
yarn create next-app --example blog-starter blog-starter-app
```

```bash
pnpm create next-app --example blog-starter blog-starter-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new Next.js project from the `with-react-toolbox` example. This command creates a new directory with the example code and all necessary dependencies.

```bash
npx create-next-app --example with-react-toolbox with-react-toolbox-app
```

```bash
yarn create next-app --example with-react-toolbox with-react-toolbox-app
```

```bash
pnpm create next-app --example with-react-toolbox with-react-toolbox-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new project based on the `cms-datocms` example. This command downloads the template and initializes a new Next.js application in the `cms-datocms-app` directory.

```bash
npx create-next-app --example cms-datocms cms-datocms-app
```

```bash
yarn create next-app --example cms-datocms cms-datocms-app
```

```bash
pnpm create next-app --example cms-datocms cms-datocms-app
```

--------------------------------

### Start the Application Server for Benchmarking

Source: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md

Before running any benchmark tests, start the Next.js application server using this command. This prepares the application to handle requests from the benchmarking tool, which requires `ab` (Apache Bench) to be installed.

```bash
npm run start
```

--------------------------------

### Bootstrap the Apollo Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md

Create a new Next.js application pre-configured with Apollo Server and Client using `create-next-app`. These commands demonstrate how to initialize the project using npx, Yarn, or pnpm, by referencing the `api-routes-apollo-server-and-client` example.

```bash
npx create-next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

```bash
yarn create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

```bash
pnpm create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

--------------------------------

### Bootstrap the Temporal + Next.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the example project. This command clones the `with-temporal` example and sets up a new Next.js application directory.

```bash
npx create-next-app --example with-temporal next-temporal-app
```

```bash
yarn create next-app --example with-temporal next-temporal-app
```

```bash
pnpm create next-app --example with-temporal next-temporal-app
```

--------------------------------

### Bootstrap the Next.js Ghost CMS Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new project from the `cms-ghost` example template. This command sets up the basic file structure and dependencies for the blog application.

```bash
npx create-next-app --example cms-ghost cms-ghost-app
```

```bash
yarn create next-app --example cms-ghost cms-ghost-app
```

```bash
pnpm create next-app --example cms-ghost cms-ghost-app
```

--------------------------------

### Bootstrap a Next.js App with the Umbraco Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md

Use `create-next-app` to initialize a new Next.js project based on the `cms-umbraco` example. These commands demonstrate how to achieve this using npx, Yarn, or pnpm.

```bash
npx create-next-app --example cms-umbraco umbraco-app
```

```bash
yarn create next-app --example cms-umbraco umbraco-app
```

```bash
pnpm create next-app --example cms-umbraco umbraco-app
```

--------------------------------

### Bootstrap the Next.js Cloudinary Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md

Use `create-next-app` to set up the example project. These commands bootstrap the application from the `with-cloudinary` example template, creating a new directory named `with-cloudinary-app`. The commands are provided for npx, Yarn, and pnpm package managers.

```bash
npx create-next-app --example with-cloudinary with-cloudinary-app
```

```bash
yarn create next-app --example with-cloudinary with-cloudinary-app
```

```bash
pnpm create next-app --example with-cloudinary with-cloudinary-app
```

--------------------------------

### Install dependencies and run Next.js dev server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md

Installs the project dependencies and starts the Next.js development server. This allows you to test and debug your application locally.

```bash
npm install
npm run dev
```

```bash
yarn install
yarn dev
```

```bash
pnpm install
pnpm dev
```

--------------------------------

### Create Next.js App with MQTT.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md

Uses create-next-app to bootstrap a new Next.js project with the with-mqtt-js example. This command sets up the basic project structure and dependencies for MQTT integration.

```bash
npx create-next-app --example with-mqtt-js with-mqtt-js-app
```

```bash
yarn create next-app --example with-mqtt-js with-mqtt-js-app
```

```bash
pnpm create next-app --example with-mqtt-js with-mqtt-js-app
```

--------------------------------

### Manually Install Core Next.js Packages

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet provides commands to manually install the essential Next.js, React, and React DOM packages required for a Next.js application. It covers installation using pnpm, npm, yarn, and bun package managers, suitable for a manual project setup rather than using `create-next-app`. These packages form the foundation of any Next.js project.

```bash
pnpm i next@latest react@latest react-dom@latest
```

```bash
npm i next@latest react@latest react-dom@latest
```

```bash
yarn add next@latest react@latest react-dom@latest
```

```bash
bun add next@latest react@latest react-dom@latest
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md

These commands bootstrap the `react-remove-properties` example application using `create-next-app`. You can use your preferred package manager (npm, Yarn, or pnpm) to execute the setup.

```bash
npx create-next-app --example react-remove-properties react-remove-properties-app
```

```bash
yarn create next-app --example react-remove-properties react-remove-properties-app
```

```bash
pnpm create next-app --example react-remove-properties react-remove-properties-app
```

--------------------------------

### Create Next.js App with Ionic Example (pnpm)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md

This command uses pnpm to create a new Next.js application with the Ionic example. It requires pnpm to be installed. The resulting application will be named 'with-ionic-app'.

```bash
pnpm create next-app --example with-ionic with-ionic-app
```

--------------------------------

### Create Next.js App with Ionic Example (npm)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md

This command uses npm to create a new Next.js application with the Ionic example. It requires npm to be installed. The resulting application will be named 'with-ionic-app'.

```bash
npx create-next-app --example with-ionic with-ionic-app
```

--------------------------------

### Run the Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md

Start the development server for both the Next.js application and the Inngest dev server. The Next.js app will be accessible at http://localhost:3000, while the Inngest dev server will be at http://localhost:8288.

```bash
npm run dev
```

```bash
yarn dev
```

```bash
pnpm dev
```

```bash
bun dev
```

--------------------------------

### Bootstrap the Next.js Agility CMS Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md

Initialize a new Next.js project using the `cms-agilitycms` example template. These commands use npx, Yarn, or pnpm to create a new application directory with the necessary boilerplate.

```bash
npx create-next-app --example cms-agilitycms cms-agilitycms-app
```

```bash
yarn create next-app --example cms-agilitycms cms-agilitycms-app
```

```bash
pnpm create next-app --example cms-agilitycms cms-agilitycms-app
```

--------------------------------

### Create a Next.js App with npx, Yarn, or pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md

Bootstrap a new Next.js application using the 'hello-world' example. These commands utilize different package managers (npm via npx, Yarn, and pnpm) to initialize a new project directory named 'hello-world-app'.

```bash
npx create-next-app --example hello-world hello-world-app
```

```bash
yarn create next-app --example hello-world hello-world-app
```

```bash
pnpm create next-app --example hello-world hello-world-app
```

--------------------------------

### Run the Storybook Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md

Execute these commands to start the Storybook development server. This allows you to view and interact with your UI components in an isolated environment provided by Storybook.

```bash
npm run storybook
```

```bash
yarn storybook
```

```bash
pnpm storybook
```

--------------------------------

### Create Next.js App with Ionic Example (Yarn)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md

This command uses Yarn to create a new Next.js application with the Ionic example. It requires Yarn to be installed. The resulting application will be named 'with-ionic-app'.

```bash
yarn create next-app --example with-ionic with-ionic-app
```

--------------------------------

### Install Project via GitHub and NPM/Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md

Clone the starter project repository from GitHub, navigate into the directory, and install the necessary dependencies using either npm or yarn. This is the first step for a manual setup.

```bash
git clone https://github.com/ButterCMS/nextjs-starter-buttercms.git
cd nextjs-starter-buttercms
npm install # or yarn install
```

--------------------------------

### Create Next.js App with MySQL Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Uses `create-next-app` to bootstrap a new Next.js project with the `with-mysql` example. This sets up the basic project structure and dependencies.

```bash
npx create-next-app --example with-mysql nextjs-mysql
```

```bash
yarn create next-app --example with-mysql nextjs-mysql
```

```bash
pnpm create next-app --example with-mysql nextjs-mysql
```

--------------------------------

### Setup Ably API Key Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md

Example of how to create a `.env` file in the root of the demo repository and set the `ABLY_API_KEY` and `API_ROOT` environment variables.

```bash
ABLY_API_KEY=your-ably-api-key:goes-here
API_ROOT=http://localhost:3000
```

--------------------------------

### Bootstrap the Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md

Initialize a new Next.js application using the `cms-dotcms` example template. These commands use `create-next-app` with npx, Yarn, and pnpm to set up the project structure and dependencies.

```bash
npx create-next-app --example cms-dotcms cms-dotcms-app
```

```bash
yarn create next-app --example cms-dotcms cms-dotcms-app
```

```bash
pnpm create next-app --example cms-dotcms cms-dotcms-app
```

--------------------------------

### Build and Run the Production App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md

After setting up the project, use these commands to build the application for production and start the server. Equivalent commands are shown for npm, Yarn, and pnpm.

```bash
npm run build
npm run start
# or
yarn build
yarn start
# or
pnpm build
pnpm start
```

--------------------------------

### Bootstrap the Example Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap the `cms-makeswift` example project into a new directory.

```bash
npx create-next-app --example cms-makeswift cms-makeswift-app

yarn create next-app --example cms-makeswift cms-makeswift-app

pnpm create next-app --example cms-makeswift cms-makeswift-app
```

--------------------------------

### Bootstrap the Next.js Prefetching Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new project from the 'with-prefetching' example. This command sets up a sample Next.js application demonstrating different page prefetching strategies.

```bash
npx create-next-app --example with-prefetching with-prefetching-app
```

```bash
yarn create next-app --example with-prefetching with-prefetching-app
```

```bash
pnpm create next-app --example with-prefetching with-prefetching-app
```

--------------------------------

### Create Next.js app with MobX example using npm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md

Uses npm to bootstrap a new Next.js application using the with-mobx example. This command initializes a new project with the necessary dependencies and configurations for MobX.

```bash
npx create-next-app --example with-mobx with-mobx-app
```

--------------------------------

### Start the Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md

Run the project in development mode to preview it locally. The application will be accessible in your browser, typically at localhost:3000. Use the command for your chosen package manager.

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

--------------------------------

### Bootstrap the WebAssembly Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project pre-configured with the WebAssembly example.

```bash
npx create-next-app --example with-webassembly with-webassembly-app
```

```bash
yarn create next-app --example with-webassembly with-webassembly-app
```

```bash
pnpm create next-app --example with-webassembly with-webassembly-app
```

--------------------------------

### Bootstrap the Next.js Neo4j Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md

Use npx, Yarn, or pnpm to create a new Next.js application based on the 'with-neo4j' example. This command will set up a new project directory with the example code.

```bash
npx create-next-app --example with-neo4j with-neo4j-app
```

```bash
yarn create next-app --example with-neo4j with-neo4j-app
```

```bash
pnpm create next-app --example with-neo4j with-neo4j-app
```

--------------------------------

### Bootstrap the Next.js Sitefinity App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md

Use `create-next-app` to initialize a new project based on the `cms-sitefinity` example. This command can be run with npx, Yarn, or pnpm and will scaffold a new application in the `cms-sitefinity-app` directory.

```bash
npx create-next-app --example cms-sitefinity cms-sitefinity-app
```

```bash
yarn create next-app --example cms-sitefinity cms-sitefinity-app
```

```bash
pnpm create next-app --example cms-sitefinity cms-sitefinity-app
```

--------------------------------

### Bootstrap the Example Application

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `cms-umbraco-heartcore` example.

```bash
npx create-next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

```bash
yarn create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

```bash
pnpm create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

--------------------------------

### Quickstart a Next.js App with Jest

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

Use `create-next-app` with the `with-jest` example to quickly scaffold a new Next.js project that comes pre-configured with Jest for testing.

```bash
npx create-next-app@latest --example with-jest with-jest-app
```

--------------------------------

### Bootstrap Next.js Redis Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md

Use npx, Yarn, or pnpm to initialize a new Next.js application from the `cache-handler-redis` example template. These commands set up the project structure and initial dependencies required to run the example.

```bash
npx create-next-app --example cache-handler-redis cache-handler-redis-app
```

```bash
yarn create next-app --example cache-handler-redis cache-handler-redis-app
```

```bash
pnpm create next-app --example cache-handler-redis cache-handler-redis-app
```

--------------------------------

### Bootstrap the Apollo Auth Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md

Use npx, Yarn, or pnpm to initialize a new Next.js project from the `api-routes-apollo-server-and-client-auth` example. These commands will create a new directory with the example project ready to run.

```bash
npx create-next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

```bash
yarn create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

```bash
pnpm create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

--------------------------------

### Use Regex in Next.js Middleware Matcher to Exclude Paths

Source: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx

The `matcher` config in Next.js Middleware supports full regular expressions. This example demonstrates using a negative lookahead `((?!...))` to apply middleware to all paths except for those starting with `/api`, `/_next/static`, or `/favicon.ico`.

```typescript
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|favicon.ico).*)',
  ],
}
```

--------------------------------

### Configure Jest to Use a Setup File

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

Configure Jest to run a setup file before each test by adding the `setupFilesAfterEnv` option to your Jest configuration. This is used to import custom matchers or other global test setup. Examples are provided for both TypeScript (`jest.config.ts`) and JavaScript (`jest.config.js`).

```typescript
setupFilesAfterEnv: ['<rootDir>/jest.setup.ts']
```

```javascript
setupFilesAfterEnv: ['<rootDir>/jest.setup.js']
```

--------------------------------

### Bootstrap the Next.js Nhost Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md

Use `create-next-app` to initialize a new Next.js project based on the `with-nhost-auth-realtime-graphql` example. Choose the command that corresponds to your preferred package manager: npm (via npx), Yarn, or pnpm.

```bash
npx create-next-app --example with-nhost-auth-realtime-graphql nhost-app
```

```bash
yarn create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

```bash
pnpm create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

--------------------------------

### Install Partytown Dependencies

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx

After enabling the `nextScriptWorkers` flag, run your development server. Next.js will detect the configuration and provide instructions to install the required Partytown package to complete the setup.

```bash
npm run dev
```

--------------------------------

### Bootstrap the Next.js with Rematch Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project that is pre-configured with the Rematch example. This command will create a new directory named 'with-rematch-app' containing the example project.

```bash
npx create-next-app --example with-rematch with-rematch-app
```

```bash
yarn create next-app --example with-rematch with-rematch-app
```

```bash
pnpm create next-app --example with-rematch with-rematch-app
```

--------------------------------

### Bootstrap the Next.js 'with-polyfills' Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project based on the 'with-polyfills' example. This provides a starting point for applications requiring custom polyfills.

```bash
npx create-next-app --example with-polyfills with-polyfills-app
```

```bash
yarn create next-app --example with-polyfills with-polyfills-app
```

```bash
pnpm create next-app --example with-polyfills with-polyfills-app
```

--------------------------------

### Bootstrap the Next.js Realm-Web Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md

Use npx, Yarn, or pnpm to create a new Next.js project based on the 'with-realm-web' example. This command initializes a new application directory with the necessary files and dependencies.

```bash
npx create-next-app --example with-realm-web with-realm-web-app
```

```bash
yarn create next-app --example with-realm-web with-realm-web-app
```

```bash
pnpm create next-app --example with-realm-web with-realm-web-app
```

--------------------------------

### Bootstrap the Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md

These commands use `create-next-app` to set up the 'with-framer-motion' example project in a new directory. You can use your preferred package manager: npm, Yarn, or pnpm.

```bash
npx create-next-app --example with-framer-motion with-framer-motion-app
```

```bash
yarn create next-app --example with-framer-motion with-framer-motion-app
```

```bash
pnpm create next-app --example with-framer-motion with-framer-motion-app
```

--------------------------------

### Install Project Dependencies

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md

Install the required project dependencies listed in the `package.json` file. Use either `npm install` or `yarn install` depending on your preferred package manager.

```bash
npm install
```

```bash
yarn install
```

--------------------------------

### Next.js Docs File Structure: Ordered Learning Path

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

This `txt` example demonstrates file-system routing for the Next.js routing section, where files are prefixed with two-digit numbers (e.g., `01-`) to explicitly sort them in a pedagogical order, guiding developers through concepts sequentially.

```txt
01-routing
├── 01-defining-routes.mdx
├── 02-pages.mdx
├── 03-layouts-and-templates.mdx
└── ...
```

--------------------------------

### Run a Next.js Project with Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md

This sequence of shell commands first installs the project's dependencies using `yarn install` and then starts the Next.js development server on `localhost:3000` with `yarn dev`.

```shell
yarn install
yarn dev
```

--------------------------------

### Run the 'blog' Zone Application

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md

In a new terminal, start the 'blog' zone application by navigating into its directory, installing dependencies, and running the development server. This app serves the /blog/* paths and will be available at http://localhost:4000/blog.

```bash
cd blog
npm install && npm run dev
```

```bash
cd blog
yarn && yarn dev
```

```bash
cd blog
pnpm install && pnpm dev
```

--------------------------------

### Bootstrap the Next.js Drupal Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the example project locally. This command sets up a new directory with the necessary configuration to run the Next.js application with Drupal as a CMS.

```bash
npx create-next-app --example cms-drupal cms-drupal-app
```

```bash
yarn create next-app --example cms-drupal cms-drupal-app
```

```bash
pnpm create next-app --example cms-drupal cms-drupal-app
```

--------------------------------

### Example .env file content

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

Example content showing how to store database URL in .env file.

```bash
DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=PRISMA_POSTGRES_API_KEY"
```

--------------------------------

### Bootstrap the Next.js with Redis Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project based on the `with-redis` example. This command will set up a new project directory named 'roadmap' with the example code.

```bash
npx create-next-app --example with-redis roadmap
```

```bash
yarn create next-app --example with-redis roadmap
```

```bash
pnpm create next-app --example with-redis roadmap
```

--------------------------------

### Bootstrap the Next.js Sanity Blog Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

Initializes the Next.js and Sanity blog starter project using `create-next-app`. The commands demonstrate how to create the project using npx, Yarn, or pnpm, which are the common package managers for Node.js.

```bash
npx create-next-app --example cms-sanity next-sanity-blog
```

```bash
yarn create next-app --example cms-sanity next-sanity-blog
```

```bash
pnpm create next-app --example cms-sanity next-sanity-blog
```

--------------------------------

### Run the Main 'home' Application

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md

To start the main 'home' application, navigate into its directory, install dependencies, and run the development server. This app will be available at http://localhost:3000 and will handle routing to other zones.

```bash
cd home
npm install && npm run dev
```

```bash
cd home
yarn && yarn dev
```

```bash
cd home
pnpm install && pnpm dev
```

--------------------------------

### Bootstrap the Next.js Kontent.ai Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new project based on the `cms-kontent-ai` example. This command scaffolds a complete Next.js application pre-configured to work with Kontent.ai.

```bash
npx create-next-app --example cms-kontent-ai cms-kontent-app
```

```bash
yarn create next-app --example cms-kontent-ai cms-kontent-app
```

```bash
pnpm create next-app --example cms-kontent-ai cms-kontent-app
```

--------------------------------

### Install Dependencies and Run Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md

These shell commands install the necessary project dependencies and start the Next.js development server with Turbopack enabled. Commands are provided for npm, Yarn, and pnpm package managers.

```sh
npm install
npm run dev
```

```sh
yarn
yarn dev
```

```sh
pnpm install
pnpm dev
```

--------------------------------

### Configure `package.json` Scripts for Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This JSON snippet illustrates how to add standard development and build scripts to your Next.js project's `package.json` file. These scripts define commands for starting the development server with Turbopack, building the application for production, starting the production server, and running ESLint for code quality checks. These are crucial for managing the Next.js application lifecycle.

```json
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "eslint",
    "lint:fix": "eslint --fix"
  }
}
```

--------------------------------

### Start Redis Server with Docker Compose

Source: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md

Run the local Redis Stack server in detached mode using Docker Compose. This command reads the `compose.yaml` file in the project to start the Redis service required for the application's cache handling during development.

```bash
docker compose up -d
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to quickly bootstrap the Next.js with Tigris example application. This command will create a new directory with the project files ready for development.

```bash
npx create-next-app --example with-tigris tigris-next-app
```

```bash
yarn create next-app --example with-tigris tigris-next-app
```

```bash
pnpm create next-app --example with-tigris tigris-next-app
```

--------------------------------

### Bootstrap a Next.js Project with the urql Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md

Use `create-next-app` to initialize a new Next.js application based on the `with-urql` example. The following commands demonstrate how to achieve this using npx (npm), Yarn, and pnpm.

```bash
npx create-next-app --example with-urql with-urql-app
```

```bash
yarn create next-app --example with-urql with-urql-app
```

```bash
pnpm create next-app --example with-urql with-urql-app
```

--------------------------------

### Create Next.js app with MobX example using pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md

Uses pnpm to bootstrap a new Next.js application using the with-mobx example. This command initializes a new project with the necessary dependencies and configurations for MobX.

```bash
pnpm create next-app --example with-mobx with-mobx-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md

These commands demonstrate how to create a new project based on the `cms-takeshape` example using `create-next-app`. You can use your preferred package manager: npm (via npx), Yarn, or pnpm.

```bash
npx create-next-app --example cms-takeshape cms-takeshape-app
```

```bash
yarn create next-app --example cms-takeshape cms-takeshape-app
```

```bash
pnpm create next-app --example cms-takeshape cms-takeshape-app
```

--------------------------------

### Create a basic GET handler with Next.js Route Handlers

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx

This example demonstrates how to create a basic asynchronous GET request handler using Next.js Route Handlers. It returns a JSON response with a 'Hello World' message using the Web Response API.

```typescript
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

```javascript
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

--------------------------------

### Bootstrap the Sitemap Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md

Use npx, Yarn, or pnpm to create a new Next.js application based on the 'with-sitemap' example. This command initializes a new project in the 'with-sitemap-app' directory.

```bash
npx create-next-app --example with-sitemap with-sitemap-app
```

```bash
yarn create next-app --example with-sitemap with-sitemap-app
```

```bash
pnpm create next-app --example with-sitemap with-sitemap-app
```

--------------------------------

### Bootstrap the Next.js Inngest Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md

Use `create-next-app` with various package managers (npm, Yarn, pnpm, or Bun) to bootstrap the example project. This command creates a new directory named 'inngest-app' with the example code.

```bash
npx create-next-app --example inngest inngest-app
```

```bash
yarn create next-app --example inngest inngest-app
```

```bash
pnpm create next-app --example inngest inngest-app
```

```bash
bunx create-next-app --example inngest inngest-app
```

--------------------------------

### Bootstrap the Next.js with Kea Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with the Kea state management library. The following commands show how to create the example app using npx, Yarn, or pnpm.

```bash
npx create-next-app --example with-kea with-kea-app
```

```bash
yarn create next-app --example with-kea with-kea-app
```

```bash
pnpm create next-app --example with-kea with-kea-app
```

--------------------------------

### Bootstrap a Next.js GitHub Pages Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js application from the `github-pages` example template.

```bash
npx create-next-app --example github-pages github-pages-app
```

```bash
yarn create next-app --example github-pages github-pages-app
```

```bash
pnpm create next-app --example github-pages github-pages-app
```

--------------------------------

### Bootstrap the Multi-Zone Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap the multi-zone example project. This command clones the example repository and sets up the project structure for a multi-zone application.

```bash
npx create-next-app --example with-zones with-zones-app
```

```bash
yarn create next-app --example with-zones with-zones-app
```

```bash
pnpm create next-app --example with-zones with-zones-app
```

--------------------------------

### Bootstrap the Quill.js Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the example project. Each command initializes a new Next.js application pre-configured with the `with-quill-js` example.

```bash
npx create-next-app --example with-quill-js with-quill-js-app
```

```bash
yarn create next-app --example with-quill-js with-quill-js-app
```

```bash
pnpm create next-app --example with-quill-js with-quill-js-app
```

--------------------------------

### Run Next.js Development Server with npm or yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md

These commands install project dependencies and start the Next.js development server. You can use either npm or yarn as your package manager. The application will be accessible at http://localhost:3000.

```bash
npm install
npm run dev
```

```bash
yarn
yarn dev
```

--------------------------------

### Bootstrap the Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md

These commands use `create-next-app` to set up the 'image-component' example project in a new directory named 'image-app'. The same functionality is shown for three different package managers: npm (via npx), Yarn, and pnpm.

```bash
npx create-next-app --example image-component image-app
```

```bash
yarn create next-app --example image-component image-app
```

```bash
pnpm create next-app --example image-component image-app
```

--------------------------------

### Bootstrap the Webiny CMS Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap the example project. This command creates a new directory with the project files pre-configured for the Webiny CMS integration.

```bash
npx create-next-app --example cms-webiny cms-webiny-app
```

```bash
yarn create next-app --example cms-webiny cms-webiny-app
```

```bash
pnpm create next-app --example cms-webiny cms-webiny-app
```

--------------------------------

### Create a Basic GET Route Handler in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

Define a public HTTP endpoint by creating a `route.ts` or `route.js` file. Export a function named after the HTTP method, such as `GET`, to handle incoming requests to that path. This example creates an endpoint at `/api`.

```typescript
export function GET(request: Request) {}
```

```javascript
export function GET(request) {}
```

--------------------------------

### Bootstrap the Page Transitions Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md

Use `create-next-app` to set up a new Next.js project pre-configured with the `next-page-transitions` example. Commands are provided for npm, Yarn, and pnpm, allowing you to choose your preferred package manager.

```bash
npx create-next-app --example with-next-page-transitions with-next-page-transitions-app
```

```bash
yarn create next-app --example with-next-page-transitions with-next-page-transitions-app
```

```bash
pnpm create next-app --example with-next-page-transitions with-next-page-transitions-app
```

--------------------------------

### Bootstrap the Web Worker Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md

Use npx, Yarn, or pnpm to initialize a new Next.js application from the 'with-web-worker' example template. These commands create a new directory with the example project ready to run.

```bash
npx create-next-app --example with-web-worker with-web-worker-app
```

```bash
yarn create next-app --example with-web-worker with-web-worker-app
```

```bash
pnpm create next-app --example with-web-worker with-web-worker-app
```

--------------------------------

### GET /sitemap/v1/taxonomy

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

Retrieves a list of URLs for taxonomy terms, such as categories or tags. The specific taxonomy can be influenced by user inputs.

```APIDOC
## GET /sitemap/v1/taxonomy

### Description
Fetches a list of URLs for taxonomy terms (e.g., categories, tags).

### Method
GET

### Endpoint
`/sitemap/v1/taxonomy`

### Parameters
This endpoint may accept query parameters based on the `wsra_get_user_inputs()` function to specify the taxonomy type (e.g., 'tag' or 'category'), but they are not explicitly defined in the route.

### Response
#### Success Response (200)
Returns an array of taxonomy objects.
- **Array<object>**: A list of taxonomy terms.
  - **url** (string) - The relative URL of the taxonomy term archive page.

#### Response Example
```json
[
  {
    "url": "/category/news/"
  },
  {
    "url": "/tag/featured/"
  }
]
```
```

--------------------------------

### Run Local Development Server with Storybook

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/next-devtools/README.md

This command starts the Storybook server, enabling isolated development and visualization of the Dev Overlay's UI components. The server is typically accessible at http://localhost:6006.

```bash
pnpm storybook
```

--------------------------------

### Run Sanity Setup Script with npm, yarn, or pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

These commands execute the `setup` script defined in `package.json` to configure the project with Sanity.io. This interactive script will prompt for project and dataset details to automatically populate your `.env.local` file.

```bash
npm run setup
```

```bash
yarn setup
```

```bash
pnpm run setup
```

--------------------------------

### Get IP Address in Middleware with `@vercel/functions`

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

The `ip` property on `NextRequest` has been removed. This example demonstrates how to get the client's IP address in middleware for Vercel-hosted projects using the `ipAddress` function from the `@vercel/functions` package.

```typescript
import { ipAddress } from '@vercel/functions'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const ip = ipAddress(request)

  // ...
}
```

--------------------------------

### Bootstrap the React-GA4 Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md

Use `create-next-app` to initialize a new Next.js project based on the `with-react-ga4` example. You can use your preferred package manager (npm, Yarn, or pnpm) to run the command. This will create a new project in a directory named `with-react-ga-app`.

```bash
npx create-next-app --example with-react-ga4 with-react-ga-app
```

```bash
yarn create next-app --example with-react-ga4 with-react-ga-app
```

```bash
pnpm create next-app --example with-react-ga4 with-react-ga-app
```

--------------------------------

### Create a Next.js App from a Public GitHub Example

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx

This command utilizes `npx create-next-app` to create a new project from any public GitHub repository. The `--example` flag accepts the full URL of the repository. Replace the example URL and `[your-project-name]` with your desired project name.

```bash
npx create-next-app@latest --example "https://github.com/.../" [your-project-name]
```

--------------------------------

### Create a Next.js App from an Official Example

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx

This command uses `npx create-next-app` with the `--example` flag to initialize a new project based on an official Next.js example. You need to replace `[example-name]` with the name of a valid example and `[your-project-name]` with the desired name for your new project directory.

```bash
npx create-next-app@latest --example [example-name] [your-project-name]
```

--------------------------------

### Bootstrap Next.js HLS.js Example with CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md

Use npx, Yarn, or pnpm to create a new Next.js application pre-configured with the HLS.js example. This command downloads the template and sets up a new project directory.

```bash
npx create-next-app --example with-hls-js with-hls-js-app
```

```bash
yarn create next-app --example with-hls-js with-hls-js-app
```

```bash
pnpm create next-app --example with-hls-js with-hls-js-app
```

--------------------------------

### GET /items

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx

Route Handlers allow the creation of custom request handlers for a given route using the Web Request and Response APIs. They are defined in a `route.js` or `route.ts` file inside the `app` directory. This example shows a GET handler for an `/items` route.

```APIDOC
## GET /items

### Description
Creates a custom request handler for the `/items` route. Route Handlers are defined by exporting functions named after HTTP methods (`GET`, `POST`, `PUT`, etc.) from a `route.js|ts` file. This example demonstrates fetching data from an external source and returning it as a JSON response. The `dynamic = 'force-static'` option opts this GET request into caching.

### Method
GET

### Endpoint
/items

### Parameters
This endpoint does not have specific parameters defined in the example. However, Route Handlers can access path parameters from dynamic segments (e.g., `app/items/[id]/route.ts`) and query parameters from the `request` object.

### Request Example
```typescript
// Example of the route handler implementation in app/items/route.ts
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

### Response
#### Success Response (200)
- **data** (object) - An object containing the data fetched from the external API.

#### Response Example
```json
{
  "data": {
    "key": "value"
  }
}
```

### Notes
- The following HTTP methods are supported: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, and `OPTIONS`.
- By default, Route Handlers are not cached. You must opt-in to cache `GET` methods. Other methods are never cached.
```

--------------------------------

### GET /api/hello

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx

This endpoint serves as a basic example of a Next.js API route. It returns a static JSON message and demonstrates the fundamental structure of an API route handler.

```APIDOC
## GET /api/hello

### Description
This endpoint demonstrates a basic API route in Next.js. Any file created inside the `pages/api` directory, such as `pages/api/hello.js`, is automatically mapped to an `/api/*` endpoint. These routes are server-side only and do not increase the client-side bundle size.

### Method
GET

*Note: You can handle different HTTP methods like POST, PUT, DELETE, etc., by checking the `req.method` property inside the handler function.*

### Endpoint
/api/hello

### Parameters
The handler function for an API route receives two main arguments:

- **req** (NextApiRequest) - An instance of `http.IncomingMessage` with added helpers for parsing the incoming request.
- **res** (NextApiResponse) - An instance of `http.ServerResponse` with added helpers for sending the response.

#### Query Parameters
- **any** (string) - Optional - Any query parameters sent with the request are accessible via the `req.query` object.

### Response
#### Success Response (200)
- **message** (string) - A static greeting message from the API.

### Response Example
{
  "message": "Hello from Next.js!"
}
```

--------------------------------

### Bootstrap Next.js Sitemap Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md

These commands demonstrate how to create a new Next.js project pre-configured with the `next-sitemap` example. Use the command corresponding to your preferred package manager (npm, Yarn, or pnpm) to bootstrap the application.

```bash
npx create-next-app --example with-next-sitemap with-next-sitemap-app
```

```bash
yarn create next-app --example with-next-sitemap with-next-sitemap-app
```

```bash
pnpm create next-app --example with-next-sitemap with-next-sitemap-app
```

--------------------------------

### Bootstrap the Yarn Workspaces Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md

Use `create-next-app` to initialize a new project based on the 'with-yarn-workspaces' example. These commands demonstrate how to create the project using npx, Yarn, or pnpm, which sets up the monorepo structure automatically.

```bash
npx create-next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

```bash
yarn create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

```bash
pnpm create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

--------------------------------

### GET /sitemap/v1/author

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

Retrieves a list of author archive page URLs. The callback function `wsra_generate_author_api` is responsible for generating this list.

```APIDOC
## GET /sitemap/v1/author

### Description
Fetches a list of URLs for author archive pages.

### Method
GET

### Endpoint
`/sitemap/v1/author`

### Parameters
None.

### Response
#### Success Response (200)
Returns an array of author objects.
- **Array<object>**: A list of authors.
  - **url** (string) - The relative URL of the author's archive page.

#### Response Example
```json
[
  {
    "url": "/author/admin/"
  },
  {
    "url": "/author/jane-doe/"
  }
]
```
```

--------------------------------

### Illustrate absolute imports usage in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This example demonstrates the benefit of using absolute imports by comparing a relative import path with an aliased absolute import. It highlights how absolute imports lead to cleaner and more maintainable code.

```jsx
// Before
import { Button } from '../../../components/button'

// After
import { Button } from '@/components/button'
```

--------------------------------

### Bootstrap the OpenTelemetry Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md

These commands use npx, Yarn, or pnpm to initialize a new Next.js project based on the `with-opentelemetry` example. Each command creates a new directory named `with-opentelemetry-app` containing the pre-configured project.

```bash
npx create-next-app --example with-opentelemetry with-opentelemetry-app
```

```bash
yarn create next-app --example with-opentelemetry with-opentelemetry-app
```

```bash
pnpm create next-app --example with-opentelemetry with-opentelemetry-app
```

--------------------------------

### Run the Local Development Environment

Source: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md

Execute these commands in four separate shell sessions to run the complete local development stack. These commands start the Temporal Server via Docker, the Next.js development server, the Temporal worker build process in watch mode, and the Temporal worker itself.

```bash
# In the Temporal Server docker directory:
docker compose up
```

```bash
# In the next-temporal-app/ directory:
npm run dev
```

```bash
# In the next-temporal-app/ directory:
npm run build-worker.watch
```

```bash
# In the next-temporal-app/ directory:
npm run start-worker
```

--------------------------------

### Bootstrap the Next.js Prepr Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md

Use `create-next-app` with npm, Yarn, or pnpm to bootstrap a new Next.js project based on the `cms-prepr` example. This command creates a new directory named `cms-prepr-app` with all the necessary project files.

```bash
npx create-next-app --example cms-prepr cms-prepr-app
```

```bash
yarn create next-app --example cms-prepr cms-prepr-app
```

```bash
pnpm create next-app --example cms-prepr cms-prepr-app
```

--------------------------------

### Bootstrap a Next.js App with Stitches

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md

These commands use `create-next-app` to bootstrap a new Next.js project pre-configured with the Stitches CSS-in-JS library. You can use npx, Yarn, or pnpm to execute the setup.

```bash
npx create-next-app --example with-stitches with-stitches-app
```

```bash
yarn create next-app --example with-stitches with-stitches-app
```

```bash
pnpm create next-app --example with-stitches with-stitches-app
```

--------------------------------

### GET /sitemap/v1/totalpages

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

Retrieves a count of various content types, including published posts per post type, categories, tags, and users.

```APIDOC
## GET /sitemap/v1/totalpages

### Description
Provides a total count of various content types, including post types, categories, tags, and users.

### Method
GET

### Endpoint
`/sitemap/v1/totalpages`

### Parameters
None.

### Response
#### Success Response (200)
Returns an object with content types as keys and their counts as values.
- **category** (integer) - The total number of categories.
- **tag** (integer) - The total number of tags.
- **user** (integer) - The total number of users.
- **[post_type]** (integer) - One or more keys corresponding to public post types (e.g., 'post', 'page') with the count of published entries.

#### Response Example
```json
{
  "category": 15,
  "tag": 42,
  "user": 5,
  "post": 250,
  "page": 20
}
```
```

--------------------------------

### GET /sitemap/v1/posts

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

Retrieves a list of published post URLs and their last modification dates. This is used to generate the post entries for a sitemap.

```APIDOC
## GET /sitemap/v1/posts

### Description
Fetches a list of published post URLs and their last modified dates.

### Method
GET

### Endpoint
`/sitemap/v1/posts`

### Parameters
This endpoint may accept query parameters based on the `wsra_get_user_inputs()` function to filter posts, but they are not explicitly defined in the route.

### Response
#### Success Response (200)
Returns an array of post objects.
- **Array<object>**: A list of posts.
  - **url** (string) - The relative URL of the post.
  - **post_modified_date** (string) - The last modification date of the post.

#### Response Example
```json
[
  {
    "url": "/2023/10/26/my-first-post/",
    "post_modified_date": "2023-10-26 10:00:00"
  },
  {
    "url": "/2023/10/27/my-second-post/",
    "post_modified_date": "2023-10-27 11:30:00"
  }
]
```
```

--------------------------------

### Run the Application in Development Mode

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md

Install project dependencies and start the Next.js development server along with the TinaCMS development environment. The application will become accessible at http://localhost:3000, with the TinaCMS editor available at http://localhost:3000/admin.

```npm
npm install
npm run tina-dev
```

```yarn
yarn install
yarn tina-dev
```

--------------------------------

### Bootstrap the Next.js Enterspeed Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new project based on the `cms-enterspeed` example. This command scaffolds a complete Next.js application pre-configured to work with Enterspeed.

```bash
npx create-next-app --example cms-enterspeed enterspeed-app
```

```bash
yarn create next-app --example cms-enterspeed enterspeed-app
```

```bash
pnpm create next-app -- --example cms-enterspeed enterspeed-app
```

--------------------------------

### Create Next.js App with Prisma Postgres example

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command creates a new Next.js application using the prisma-postgres example.  It uses create-next-app. Different package managers can be used.

```bash
npx create-next-app@latest --example prisma-postgres my-prisma-postgres-app
```

```bash
yarn create next-app --example prisma-postgres my-prisma-postgres-app
```

```bash
pnpm create-next-app --example prisma-postgres my-prisma-postgres-app
```

```bash
bunx create-next-app --example prisma-postgres my-prisma-postgres-app
```

--------------------------------

### Create Next.js App with Mocha Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md

Creates a new Next.js application using the with-mocha example. This command bootstraps the project with the necessary files and configurations for running Mocha tests.  The example is fetched from the specified GitHub repository.

```bash
npx create-next-app --example with-mocha with-mocha-app
```

```bash
yarn create next-app --example with-mocha with-mocha-app
```

```bash
pnpm create next-app --example with-mocha with-mocha-app
```

--------------------------------

### Create Next.js app with MobX example using Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md

Uses Yarn to bootstrap a new Next.js application using the with-mobx example. This command initializes a new project with the necessary dependencies and configurations for MobX.

```bash
yarn create next-app --example with-mobx with-mobx-app
```

--------------------------------

### Run Cypress to Initialize Configuration

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Execute the `cypress:open` script to launch the Cypress application for the first time. This process will guide you through setting up E2E and/or Component Testing and will automatically generate a `cypress.config.js` file and a `cypress` directory.

```bash
npm run cypress:open
```

--------------------------------

### Create a Next.js App with Interactive Prompts

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx

Running `create-next-app` without any arguments triggers an interactive prompt that guides you through project setup. You will be asked for the project name and to configure options such as TypeScript, a linter, Tailwind CSS, and the App Router.

```bash
npx create-next-app@latest
```

```text
What is your project named?  my-app
Would you like to use TypeScript?  No / Yes
Which linter would you like to use?  ESLint / Biome / None
Would you like to use Tailwind CSS?  No / Yes
Would you like your code inside a `src/` directory?  No / Yes
Would you like to use App Router? (recommended)  No / Yes
Would you like to use Turbopack? (recommended)  No / Yes
Would you like to customize the import alias (`@/*` by default)?  No / Yes
```

--------------------------------

### Create Next.js App with Electron Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md

Bootstrap a Next.js application with the with-electron example using create-next-app. This command sets up the basic project structure for integrating Next.js with Electron.

```bash
npx create-next-app --example with-electron with-electron-app
```

```bash
yarn create next-app --example with-electron with-electron-app
```

```bash
pnpm create next-app --example with-electron with-electron-app
```

--------------------------------

### Bootstrap the tsParticles Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md

Use `create-next-app` with npm, Yarn, or pnpm to initialize a new Next.js project based on the `with-particles` example. These commands create a new application directory containing the pre-configured project.

```bash
npx create-next-app --example with-particles with-particles-app
```

```bash
yarn create next-app --example with-particles with-particles-app
```

```bash
pnpm create next-app -- --example with-particles with-particles-app
```

--------------------------------

### Install Project Dependencies

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md

After creating the project, navigate into the project directory and run one of these commands to install the required dependencies using your preferred package manager.

```bash
yarn install
# or
npm install
# or
pnpm install
```

--------------------------------

### Initialize Jest Configuration

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

Generate a basic Jest configuration file (`jest.config.ts` or `jest.config.js`) by running the initialization command for your package manager. This command interactively guides you through a series of prompts to create a tailored setup for your project.

```bash
npm init jest@latest
```

```bash
yarn create jest@latest
```

```bash
pnpm create jest@latest
```

--------------------------------

### Create a Next.js App with the Supabase Template

Source: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md

Initializes a new Next.js application from the `with-supabase` example template. This can be done using npx, yarn, or pnpm, depending on your preferred package manager. The command creates a new directory named 'with-supabase-app' for the project.

```bash
npx create-next-app --example with-supabase with-supabase-app
```

```bash
yarn create next-app --example with-supabase with-supabase-app
```

```bash
pnpm create next-app --example with-supabase with-supabase-app
```

--------------------------------

### Configure Agility CMS Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md

This example shows the structure of the `.env.local` file with the necessary variables to connect to Agility CMS. The GUID, API keys, and security key must be replaced with the actual values from your Agility CMS instance.

```bash
AGILITY_CMS_GUID=...
AGILITY_CMS_API_FETCH_KEY=...
AGILITY_CMS_API_PREVIEW_KEY=...
AGILITY_CMS_SECURITY_KEY=...
```

--------------------------------

### Bootstrap the Next.js Storyblok App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md

Use `create-next-app` with your preferred package manager (npm via npx, Yarn, or pnpm) to bootstrap the example project into a new directory.

```bash
npx create-next-app --example cms-storyblok cms-storyblok-app
```

```bash
yarn create next-app --example cms-storyblok cms-storyblok-app
```

```bash
pnpm create next-app --example cms-storyblok cms-storyblok-app
```

--------------------------------

### Read Request Headers in a Next.js Server Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/headers.mdx

This example demonstrates how to import and use the `headers` function in a Next.js async Server Component. The function is awaited to get a read-only `Headers` object, from which specific header values like 'user-agent' can be retrieved using the `get()` method.

```tsx
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}
```

```jsx
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}
```

--------------------------------

### Create Next.js app with Radix UI example

Source: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md

These commands use create-next-app to bootstrap a new Next.js project with the Radix UI example. The commands are provided for npm, Yarn, and pnpm.

```bash
npx create-next-app --example radix-ui radix-ui-app
```

```bash
yarn create next-app --example radix-ui radix-ui-app
```

```bash
pnpm create next-app --example radix-ui radix-ui-app
```

--------------------------------

### Bootstrap Next.js with rbx & Bulma Pro

Source: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md

Use `create-next-app` to initialize a new Next.js project from the `with-rbx-bulma-pro` example. These commands set up a complete application ready for development, using your preferred package manager.

```bash
npx create-next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

```bash
yarn create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

```bash
pnpm create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

--------------------------------

### Use Tailwind CSS Classes in a Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-v3-css.mdx

After installation and configuration, you can use Tailwind's utility classes directly in your application's components via the `className` prop. This example shows how to apply text styling to an `h1` element in a page component, compatible with both TypeScript and JavaScript.

```tsx
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

```jsx
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

--------------------------------

### Bootstrap Next.js with Video.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md

Use `create-next-app` to initialize a new Next.js project based on the 'with-videojs' example. The command can be run using npx, Yarn, or pnpm to set up the application skeleton.

```bash
npx create-next-app --example with-videojs with-videojs-app
```

```bash
yarn create next-app --example with-videojs with-videojs-app
```

```bash
pnpm create next-app --example with-videojs with-videojs-app
```

--------------------------------

### Bootstrap Next.js with Plausible Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md

Use `create-next-app` with npx, Yarn, or pnpm to set up a new Next.js project based on the `with-plausible` example. This will create a new directory named `with-plausible-app` with the example project.

```bash
npx create-next-app --example with-plausible with-plausible-app
```

```bash
yarn create next-app --example with-plausible with-plausible-app
```

```bash
pnpm create next-app --example with-plausible with-plausible-app
```

--------------------------------

### Create a New Next.js Project Interactively

Source: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md

Run `create-next-app` to start an interactive setup process. The CLI will prompt you for project details like the project name and configuration choices such as using TypeScript. You can use your preferred package manager like npx, yarn, pnpm, or bun.

```bash
npx create-next-app@latest
```

```bash
yarn create next-app
```

```bash
pnpm create next-app
```

```bash
bunx create-next-app
```

--------------------------------

### Set Up OpenTelemetry Instrumentation in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx

This example demonstrates how to set up instrumentation with OpenTelemetry. By creating an `instrumentation.ts` or `.js` file in the project root and exporting a `register` function, you can call `registerOTel` from `@vercel/otel` to initialize telemetry for your Next.js application. This function runs once when the server starts.

```typescript
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

```javascript
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

--------------------------------

### Set Up Umbraco Project using .NET CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md

A sequence of .NET CLI commands to set up the Umbraco CMS backend. This includes installing the Umbraco templates, creating a new Umbraco project, adding the sample data package, and running the application.

```bash
# If you haven't already, install the Umbraco .NET CLI templates
dotnet new install Umbraco.Templates::13.*

# Create the Umbraco project
dotnet new umbraco

# Install the sample data NuGet package
dotnet add package Umbraco.Sample.Headless.Blog

# Start Umbraco
dotnet run
```

--------------------------------

### Run Next.js in Development Mode

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md

After installing dependencies and configuring environment variables, run these commands to start the Next.js development server. This allows you to view the project locally and see the content fetched from your ButterCMS account.

```bash
npm install
npm run dev
```

--------------------------------

### Configure Apollo GraphQL extension for VS Code in Next.js

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

Configures the Apollo GraphQL extension in VS Code to provide auto-completion for GraphQL queries in a Next.js project. Requires the Apollo GraphQL extension to be installed.

```javascript
module.exports = {
  client: {
    service: {
      name: "WordPress",
      localSchemaFile: "./src/gql/schema.gql",
    },
  },
};
```

--------------------------------

### Bootstrap Next.js HTTP2 Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the 'with-http2' example project. These commands create a new directory containing the pre-configured Next.js application.

```bash
npx create-next-app --example with-http2 with-http2-app
```

```bash
yarn create next-app --example with-http2 with-http2-app
```

```bash
pnpm create next-app --example with-http2 with-http2-app
```

--------------------------------

### Generate Configuration and Run a Build with `next-build-test`

Source: https://github.com/vercel/next.js/blob/canary/crates/next-build-test/README.md

This shell script demonstrates how to get started with `next-build-test`. The first command generates a required `project_options.json` file by pointing to an existing Next.js project. The second command executes the build process using the newly created configuration.

```sh
cargo run -- generate /path/to/project > project_options.json
cargo run -- run
```

--------------------------------

### Bootstrap the Next.js with react-bootstrap Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md

Use create-next-app to initialize a new Next.js project based on the 'with-react-bootstrap' example. The commands demonstrate how to achieve this using npx, Yarn, or pnpm, which will create a new directory for the application.

```bash
npx create-next-app --example with-react-bootstrap with-react-bootstrap-app
```

```bash
yarn create next-app --example with-react-bootstrap with-react-bootstrap-app
```

```bash
pnpm create next-app --example with-react-bootstrap with-react-bootstrap-app
```

--------------------------------

### Create a Statically Generated Route Handler in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This example shows how to create a Route Handler that generates a static file during the build process in `export` mode. By setting `export const dynamic = 'force-static'`, the `GET` handler is executed at build time, and its response is saved as a static file. This is only supported for `GET` requests in static export mode.

```javascript
export const dynamic = 'force-static'

export function GET() {
  return new Response('Hello World', { status: 200 })
}
```

--------------------------------

### Display Image from Next.js Public Folder

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This example demonstrates how to display an image stored in the `public` folder within a Next.js page component. It imports the `Image` component from `next/image` and references the image source using a root-relative path (e.g., `/profile.png`).

```tsx
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

```jsx
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

--------------------------------

### Bootstrap a Next.js App with the XState Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md

Use `create-next-app` with the `--example with-xstate` flag to initialize a new Next.js project pre-configured with XState. Commands are provided for npm, Yarn, and pnpm.

```bash
npx create-next-app --example with-xstate with-xstate-app
```

```bash
yarn create next-app --example with-xstate with-xstate-app
```

```bash
pnpm create next-app --example with-xstate with-xstate-app
```

--------------------------------

### Bootstrap the Next.js App with the Azure Cosmos DB Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap the example project. This command creates a new directory with a pre-configured Next.js application integrated with Azure Cosmos DB.

```bash
npx create-next-app --example with-azure-cosmos with-azure-cosmos-app
```

```bash
yarn create next-app --example with-azure-cosmos with-azure-cosmos-app
```

```bash
pnpm create next-app --example with-azure-cosmos with-azure-cosmos-app
```

--------------------------------

### Create Next.js App with MDX Remote Example

Source: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md

These commands bootstrap a Next.js application using the mdx-remote example.  They use npx, yarn, pnpm, or bun to create the application, specifying the mdx-remote example and the project name.

```bash
npx create-next-app --example mdx-remote mdx-remote-app
```

```bash
yarn create next-app --example mdx-remote mdx-remote-app
```

```bash
pnpm create next-app --example mdx-remote mdx-remote-app
```

```bash
bunx create-next-app --example mdx-remote mdx-remote-app
```

--------------------------------

### Create Next.js app with filbert-js example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md

Uses create-next-app to bootstrap a Next.js project with the filbert-js example. Demonstrates the command using npm, Yarn, and pnpm. It creates a new Next.js application with the specified example.

```bash
npx create-next-app --example with-filbert with-filbert-app
```

```bash
yarn create next-app --example with-filbert with-filbert-app
```

```bash
pnpm create next-app --example with-filbert with-filbert-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md

Use create-next-app with npx, Yarn, or pnpm to set up a new Next.js project pre-configured with the cxs styling library. These commands will create a new directory named 'with-cxs-app' containing the example.

```bash
npx create-next-app --example with-cxs with-cxs-app
```

```bash
yarn create next-app --example with-cxs with-cxs-app
```

```bash
pnpm create next-app --example with-cxs with-cxs-app
```

--------------------------------

### Bootstrap a Next.js App with the Axiom Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project from the `with-axiom` example. This command will create a new directory named `with-axiom-app` containing the pre-configured project.

```bash
npx create-next-app --example with-axiom with-axiom-app
```

```bash
yarn create next-app --example with-axiom with-axiom-app
```

```bash
pnpm create next-app --example with-axiom with-axiom-app
```

--------------------------------

### Create Next.js App with Mux Video Example (Bun)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md

Uses Bun to create a new Next.js application using the with-mux-video example.  This command bootstraps the project with the necessary files and dependencies for Mux Video integration.

```bash
bunx create-next-app --example with-mux-video with-mux-video-app
```

--------------------------------

### Bootstrap the i18n Rosetta Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new project based on the `with-i18n-rosetta` example.

```bash
npx create-next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

```bash
yarn create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

```bash
pnpm create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

--------------------------------

### Bootstrap a Next.js App with Rebass

Source: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with the Rebass UI library. The following commands demonstrate how to achieve this using npx, Yarn, and pnpm.

```bash
npx create-next-app --example with-rebass with-rebass-app
```

```bash
yarn create next-app --example with-rebass with-rebass-app
```

```bash
pnpm create next-app --example with-rebass with-rebass-app
```

--------------------------------

### Bootstrap a Next.js App with Reflexjs

Source: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md

Use `create-next-app` to initialize a new Next.js project that includes the Reflexjs example. The commands create a new directory named `with-reflexjs-app` containing the bootstrapped application.

```bash
npx create-next-app --example with-reflexjs with-reflexjs-app
```

```bash
yarn create next-app --example with-reflexjs with-reflexjs-app
```

```bash
pnpm create next-app --example with-reflexjs with-reflexjs-app
```

--------------------------------

### Bootstrap Next.js Auth0 Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md

Use create-next-app with your preferred package manager (npm, Yarn, or pnpm) to bootstrap a new Next.js project pre-configured with the Auth0 authentication example.

```bash
npx create-next-app --example auth0 auth0-app
```

```bash
yarn create next-app --example auth0 auth0-app
```

```bash
pnpm create next-app --example auth0 auth0-app
```

--------------------------------

### Use Tailwind Utility Classes in a Pages Router Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx

After setup, you can use Tailwind's utility classes directly in your components' `className` prop. This example shows how to style an index page in the Pages Router.

```typescript
export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
    </main>
  )
}
```

```javascript
export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
    </main>
  )
}
```

--------------------------------

### Initialize Playwright Manually

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Manually initialize Playwright in an existing project using your preferred package manager (npm, yarn, or pnpm). This command initiates an interactive setup process that guides you through configuring Playwright and creates a `playwright.config.ts` file.

```bash
npm init playwright
# or
yarn create playwright
# or
pnpm create playwright
```

--------------------------------

### Add TypeScript and JavaScript code switcher in MDX

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

Shows the MDX syntax for including TypeScript and JavaScript code blocks with a `switcher` prop, allowing users to toggle between language versions of a code example.

```mdx
```tsx filename="app/page.tsx" switcher

```

```jsx filename="app/page.js" switcher

```
```

--------------------------------

### Create Local Environment File for Auth0 Configuration

Source: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md

Copy the example environment file `.env.local.example` to a new file named `.env.local`. This file will store your Auth0 credentials and other sensitive application settings, and is ignored by Git by default.

```bash
cp .env.local.example .env.local
```

--------------------------------

### Configure Environment Variables for Cosmic

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md

Create a local environment file by copying the provided example. Then, populate the `.env.local` file with your specific Cosmic API keys and a preview secret to enable data fetching and preview mode.

```bash
cp .env.local.example .env.local
```

```bash
COSMIC_BUCKET_SLUG=...
COSMIC_READ_KEY=...
COSMIC_PREVIEW_SECRET=...
```

--------------------------------

### Update Next.js and Run Dev Server with Turbopack

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx

This sequence of commands updates your Next.js project to the latest version and then starts the development server using Turbopack, a new bundler designed to improve local performance. Ensure you have npm installed and your project directory is accessible.

```bash
npm install next@latest
npm run dev --turbopack
```

--------------------------------

### Use Tailwind Utility Classes in an App Router Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx

After setup, you can use Tailwind's utility classes directly within your components' `className` prop to style them. This example demonstrates styling a page in the App Router.

```typescript
export default function Page() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
    </main>
  )
}
```

```javascript
export default function Page() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
    </main>
  )
}
```

--------------------------------

### Run Next.js Development Environment with Docker Compose

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md

These commands create a Docker network, build the development environment using the compose.dev.yaml file, and then start the development environment. This allows local development without requiring Node.js or TypeScript to be installed locally.

```bash
# Create a network, which allows containers to communicate
# with each other, by using their container name as a hostname
docker network create my_network

# Build dev
docker compose -f compose.dev.yaml build

# Up dev
docker compose -f compose.dev.yaml up
```

--------------------------------

### Bootstrap the Custom Server Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to quickly set up a new project based on the custom server example. This command clones the example repository and initializes a new application directory.

```bash
npx create-next-app --example custom-server custom-server-app
```

```bash
yarn create next-app --example custom-server custom-server-app
```

```bash
pnpm create next-app --example custom-server custom-server-app
```

--------------------------------

### Run the Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

These commands start the Next.js development server using various package managers (npm, yarn, pnpm, or bun). After running the command, the application will be accessible at `http://localhost:3000`.

```bash
# Using npm
npm run dev
```

```bash
# Using yarn
yarn dev
```

```bash
# Using pnpm
pnpm run dev
```

```bash
# Using bun
bun run dev
```

--------------------------------

### Implement Next.js Link component in a Page (TypeScript)

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

A basic example showing how to import and use the `<Link>` component in a Next.js App Router page. This code can be copied and pasted directly into a `page.tsx` file.

```tsx
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}
```

--------------------------------

### Install project dependencies using package manager

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command installs the necessary dependencies for the Next.js application. It assumes a package.json file is present. Different package managers can be used.

```bash
npm install
```

```bash
yarn install
```

```bash
pnpm install
```

```bash
bun install
```

--------------------------------

### Run the Source Mapping Test Application

Source: https://github.com/vercel/next.js/blob/canary/test/development/app-dir/source-mapping/README.md

This command starts the Next.js development server for the source mapping test application. Running this command is the initial step required to manually test how Server Components and Server Actions map to their source code in the browser's developer tools.

```bash
pnpm next dev test/development/app-dir/source-mapping
```

--------------------------------

### Initiate Data Streaming in a Next.js Server Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx

This example shows a Next.js Server Component that starts a data fetching operation but does not `await` the result. It passes the resulting promise as a prop to a Client Component, which, when wrapped in `<Suspense>`, enables UI streaming.

```typescript
import Posts from '@/app/ui/posts'
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

```javascript
import Posts from '@/app/ui/posts'
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

--------------------------------

### Bootstrap a Next.js GraphQL Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project pre-configured with a GraphQL API example. This command clones the 'api-routes-graphql' example into a new directory named 'api-routes-graphql-app'.

```bash
npx create-next-app --example api-routes-graphql api-routes-graphql-app
```

```bash
yarn create next-app --example api-routes-graphql api-routes-graphql-app
```

```bash
pnpm create next-app --example api-routes-graphql api-routes-graphql-app
```

--------------------------------

### Bootstrap the Next.js WordPress Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

These commands demonstrate how to create a new Next.js project using the `cms-wordpress` example. You can use npx, Yarn, pnpm, or Bun to initialize the application in a new directory named `cms-wordpress-app`.

```bash
npx create-next-app --example cms-wordpress cms-wordpress-app
```

```bash
yarn create next-app --example cms-wordpress cms-wordpress-app
```

```bash
pnpm create next-app --example cms-wordpress cms-wordpress-app
```

```bash
bunx create-next-app --example cms-wordpress cms-wordpress-app
```

--------------------------------

### Create Next.js App with Facebook Pixel Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md

These commands use create-next-app to bootstrap a new Next.js project with the Facebook Pixel example.  They utilize npm, Yarn, and pnpm package managers respectively.  The example is fetched from a remote repository.

```bash
npx create-next-app --example with-facebook-pixel with-facebook-pixel-app
```

```bash
yarn create next-app --example with-facebook-pixel with-facebook-pixel-app
```

```bash
pnpm create next-app --example with-facebook-pixel with-facebook-pixel-app
```

--------------------------------

### Next.js Docs File Structure: Alphabetical Sorting

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

This `txt` example illustrates file-system routing in Next.js documentation, showing how files for the functions API reference are sorted alphabetically within the `04-functions` directory to facilitate easy lookup of specific functions.

```txt
04-functions
├── after.mdx
├── cacheLife.mdx
├── cacheTag.mdx
└── ...
```

--------------------------------

### Create Next.js App with Couchbase Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md

Uses create-next-app to bootstrap a Next.js project with the Couchbase example. This sets up the basic project structure and dependencies needed to integrate with Couchbase.

```bash
npx create-next-app --example with-couchbase with-couchbase-app
```

```bash
yarn create next-app --example with-couchbase with-couchbase-app
```

```bash
pnpm create next-app --example with-couchbase with-couchbase-app
```

--------------------------------

### Electron Next.js build commands (CLI)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md

These commands are used to build, develop, and check the types of the Electron and Next.js application. They cover building the renderer and electron layers, starting a development version, and creating a production build. The commands are typically executed via npm or yarn scripts.

```bash
"build-renderer": build and transpile Next.js layer
```

```bash
"build-electron": transpile electron layer
```

```bash
"build": build both layers
```

```bash
"dev": start dev version
```

```bash
"dist": create production electron build
```

```bash
"type-check": check TypeScript in project
```

--------------------------------

### Create Next.js app with Fela example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md

Uses create-next-app to bootstrap a Next.js application with the Fela styling example. This command sets up a new project with the necessary configurations and dependencies for Fela.

```bash
npx create-next-app --example with-fela with-fela-app
```

```bash
yarn create next-app --example with-fela with-fela-app
```

```bash
pnpm create next-app --example with-fela with-fela-app
```

--------------------------------

### Bootstrap the Shallow Routing Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project pre-configured with the shallow routing example.

```bash
npx create-next-app --example with-shallow-routing with-shallow-routing-app
```

```bash
yarn create next-app --example with-shallow-routing with-shallow-routing-app
```

```bash
pnpm create next-app --example with-shallow-routing with-shallow-routing-app
```

--------------------------------

### Bootstrap the Next.js Plasmic Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `cms-plasmic` example.

```bash
npx create-next-app --example cms-plasmic cms-plasmic-app
```

```bash
yarn create next-app --example cms-plasmic cms-plasmic-app
```

```bash
pnpm create next-app --example cms-plasmic cms-plasmic-app
```

--------------------------------

### Define Constants in WordPress wp-config.php

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This PHP snippet adds required constants to the `wp-config.php` file for a headless WordPress setup. These constants include a shared secret key, the frontend URL for context, and configuration for WPGraphQL JWT Authentication to enable secure communication.

```php
define('HEADLESS_SECRET', 'INSERT_RANDOM_SECRET_KEY');
define('HEADLESS_URL', 'INSERT_LOCAL_DEVELOPMENT_URL'); // http://localhost:3000 for local development
define('GRAPHQL_JWT_AUTH_SECRET_KEY', 'INSERT_RANDOM_SECRET_KEY');
define('GRAPHQL_JWT_AUTH_CORS_ENABLE', true);
```

--------------------------------

### Example Output of Next.js Server with Debugger Attached

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx

This shows the terminal output when the Next.js development server successfully starts with the `--inspect` flag. The output confirms that the debugger is listening on a specific WebSocket port (e.g., 9229) and that the application server is ready.

```bash
Debugger listening on ws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95
For help, see: https://nodejs.org/en/docs/inspector
ready - started server on 0.0.0.0:3000, url: http://localhost:3000
```

--------------------------------

### Install the Experimental NFT Plugin

Source: https://github.com/vercel/next.js/blob/canary/turbopack/packages/turbo-tracing-next-plugin/README.md

Install the `@vercel/experimental-nft-next-plugin` as a development dependency using your preferred package manager: Yarn, npm, or pnpm.

```bash
yarn add -D `@vercel/experimental-nft-next-plugin`
```

```bash
npm install -D `@vercel/experimental-nft-next-plugin`
```

```bash
pnpm install -D `@vercel/experimental-nft-next-plugin`
```

--------------------------------

### Bootstrap a Next.js App with next-translate

Source: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md

Use `create-next-app` with various package managers (npx, Yarn, pnpm) to initialize a new Next.js project pre-configured with the `next-translate` example. This command downloads the template and sets up a local development environment.

```bash
npx create-next-app --example with-next-translate with-next-translate-app
```

```bash
yarn create next-app --example with-next-translate with-next-translate-app
```

```bash
pnpm create next-app --example with-next-translate with-next-translate-app
```

--------------------------------

### Run the Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md

Start the Next.js development server to run the application locally. The site will typically be available at http://localhost:3000. Use `npm run dev` or `yarn dev` based on your package manager.

```bash
npm run dev
```

```bash
yarn dev
```

--------------------------------

### Promote PlanetScale Branch to Production

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Promotes a specific branch of your PlanetScale database (e.g., `main`) to the production branch.  This makes the changes in that branch live.

```shell
pscale branch promote <DATABASE_NAME> <BRANCH_NAME>
```

--------------------------------

### Create a Next.js App with vanilla-extract

Source: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md

Use `create-next-app` to bootstrap the `with-vanilla-extract` example project. This can be done with npm, Yarn, or pnpm, and will create a new project folder named `with-vanilla-extract-app`.

```bash
npx create-next-app --example with-vanilla-extract with-vanilla-extract-app
```

```bash
yarn create next-app --example with-vanilla-extract with-vanilla-extract-app
```

```bash
pnpm create next-app --example with-vanilla-extract with-vanilla-extract-app
```

--------------------------------

### Bootstrap Next.js with Three.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md

Initialize a new Next.js project using the 'with-three-js' example template. These commands use `create-next-app` with different package managers (npm/npx, Yarn, and pnpm) to set up the project structure and dependencies automatically.

```bash
npx create-next-app --example with-three-js with-three-js-app
```

```bash
yarn create next-app --example with-three-js with-three-js-app
```

```bash
pnpm create next-app --example with-three-js with-three-js-app
```

--------------------------------

### Bootstrap Next.js with Oxlint Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-oxlint/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project pre-configured with Oxlint. This command clones the `with-oxlint` example from the Next.js repository.

```bash
npx create-next-app --example with-oxlint with-oxlint-app
```

```bash
yarn create next-app --example with-oxlint with-oxlint-app
```

```bash
pnpm create next-app --example with-oxlint with-oxlint-app
```

--------------------------------

### Bootstrap a Next.js App with React Native Web

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new Next.js project based on the `with-react-native-web` example. This command sets up a complete working application ready for development.

```bash
npx create-next-app --example with-react-native-web with-react-native-web-app
```

```bash
yarn create next-app --example with-react-native-web with-react-native-web-app
```

```bash
pnpm create next-app --example with-react-native-web with-react-native-web-app
```

--------------------------------

### Bootstrap Next.js Auth Example with Package Managers

Source: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md

Initialize a new Next.js project pre-configured with NextAuth.js for authentication. These commands use `create-next-app` with different package managers (npm via npx, Yarn, pnpm, and Bun) to scaffold the 'auth' example into a new directory named 'auth-app'.

```bash
npx create-next-app --example auth auth-app
```

```bash
yarn create next-app --example auth auth-app
```

```bash
pnpm create next-app --example auth auth-app
```

```bash
bunx create-next-app --example auth auth-app
```

--------------------------------

### Create Next.js App with Mux Video Example (pnpm)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md

Uses pnpm to create a new Next.js application using the with-mux-video example.  This command bootstraps the project with the necessary files and dependencies for Mux Video integration.

```bash
pnpm create next-app --example with-mux-video with-mux-video-app
```

--------------------------------

### Initialize Prismic Repository using Slice Machine

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md

This command initiates the Prismic setup process. It will prompt you to log in or create a Prismic account, then create a new Prismic repository with pre-configured 'Author' and 'Post' content models and link it to your application.

```sh
npx @slicemachine/init
```

--------------------------------

### Install the 'sharp' Package via Command Line

Source: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx

Install the `sharp` library, a required dependency for Next.js Image Optimization, using various package managers like npm, yarn, pnpm, or bun. A specific command for installing the wasm variant is also provided as a troubleshooting step if the standard installation fails.

```bash
npm i sharp
```

```bash
yarn add sharp
```

```bash
pnpm add sharp
```

```bash
bun add sharp
```

```bash
npm install --cpu=wasm32 sharp
```

--------------------------------

### Bootstrap the Service Worker Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project based on the service worker example. A new directory named `with-service-worker-app` will be created with the example code.

```bash
npx create-next-app --example with-service-worker with-service-worker-app
```

```bash
yarn create next-app --example with-service-worker with-service-worker-app
```

```bash
pnpm create next-app --example with-service-worker with-service-worker-app
```

--------------------------------

### Create Next.js App with Mux Video Example (npx)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md

Uses npx to create a new Next.js application using the with-mux-video example.  This command bootstraps the project with the necessary files and dependencies for Mux Video integration.

```bash
npx create-next-app --example with-mux-video with-mux-video-app
```

--------------------------------

### Install Project Dependencies with pnpm

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md

Run `pnpm install` in the project's root directory. This command downloads and installs all the necessary dependencies defined in the project's configuration files.

```bash
pnpm install
```

--------------------------------

### Bootstrap a Next.js App with the Basic CSS Example

Source: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project based on the 'basic-css' example. This sets up a sample application ready for development and deployment.

```bash
npx create-next-app --example basic-css basic-css-app
```

```bash
yarn create next-app --example basic-css basic-css-app
```

```bash
pnpm create next-app --example basic-css basic-css-app
```

--------------------------------

### Initialize a New Stencil Project from a Starter

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md

To start a new project, clone the Stencil component starter repository into a new directory. After navigating into the directory, the original git remote is removed to prepare the project for its own version control history.

```bash
git clone https://github.com/ionic-team/stencil-component-starter.git my-component
cd my-component
git remote rm origin
```

--------------------------------

### Configure `pagesDir` for `no-html-link-for-pages` ESLint Rule

Source: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx

In a monorepo or custom project setup, you may need to explicitly define the path to your `pages` directory in your ESLint configuration. This JSON example demonstrates how to set a custom path for the `@next/next/no-html-link-for-pages` rule.

```json
{
  "rules": {
    "@next/next/no-html-link-for-pages": ["error", "packages/my-app/pages/"]
  }
}
```

--------------------------------

### Bootstrap the Next.js Magic Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up the 'with-magic' example project in a new directory.

```bash
npx create-next-app --example with-magic with-magic-app
```

```bash
yarn create next-app --example with-magic with-magic-app
```

```bash
pnpm create next-app --example with-magic with-magic-app
```

--------------------------------

### Bootstrap the Next.js Contentful Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md

Use `create-next-app` to initialize a new project based on the `cms-contentful` example. These commands demonstrate how to achieve this using npx, Yarn, and pnpm, which will create a new directory named `cms-contentful-app` with the project files.

```bash
npx create-next-app --example cms-contentful cms-contentful-app
```

```bash
yarn create next-app --example cms-contentful cms-contentful-app
```

```bash
pnpm create next-app --example cms-contentful cms-contentful-app
```

--------------------------------

### Bootstrap the Next.js with MSW Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md

Use `create-next-app` to set up a new Next.js project based on the `with-msw` example. This command scaffolds a complete application pre-configured with Mock Service Worker. Commands are available for npx, Yarn, and pnpm.

```bash
npx create-next-app --example with-msw with-msw-app
```

```bash
yarn create next-app --example with-msw with-msw-app
```

```bash
pnpm create next-app --example with-msw with-msw-app
```

--------------------------------

### Get Current URL Pathname with usePathname in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx

This example demonstrates the basic usage of the `usePathname` hook within a Next.js Client Component. The hook is imported from `next/navigation` and returns a string representing the current URL's pathname, which is then displayed in a paragraph.

```typescript
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}
```

```javascript
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}
```

--------------------------------

### Install the 'server-only' Package

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx

Use one of the following commands to install the `server-only` package with your preferred package manager. Although installing it is optional as Next.js handles the import internally, it can satisfy linting rules regarding extraneous dependencies.

```bash
npm install server-only
```

```bash
yarn add server-only
```

```bash
pnpm add server-only
```

```bash
bun add server-only
```

--------------------------------

### Get All Cookies in a Next.js Server Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx

This example shows how to retrieve all available cookies within a Next.js Server Component. It uses the `(await cookies()).getAll()` method to return an array of all cookies, which can then be iterated over to access their names and values.

```typescript
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

```javascript
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

--------------------------------

### Bootstrap the Example Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the `api-routes-apollo-server` example project into a new directory.

```bash
npx create-next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

```bash
yarn create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

```bash
pnpm create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

--------------------------------

### Create a Route Handler with the Factory Pattern in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This example demonstrates a common community pattern where a factory function (`createHandler`) from a third-party library is used to generate a shared handler for multiple HTTP methods like GET and POST. This allows for centralized logic and library-specific configuration.

```typescript
import { createHandler } from 'third-party-library'

const handler = createHandler({
  /* library-specific options */
})

export const GET = handler
// or
export { handler as POST }
```

--------------------------------

### Bootstrap a Next.js App with Portals Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md

Use the `create-next-app` command to quickly set up a new Next.js project from the 'with-portals' example. Select the appropriate command for your package manager of choice: npx, Yarn, or pnpm.

```bash
npx create-next-app --example with-portals with-portals-app
```

```bash
yarn create next-app --example with-portals with-portals-app
```

```bash
pnpm create next-app --example with-portals with-portals-app
```

--------------------------------

### Create PlanetScale Database

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Creates a new database in your PlanetScale account using the PlanetScale CLI.  Replace `<DATABASE_NAME>` with the desired name for your new database.

```shell
pscale database create <DATABASE_NAME>
```

--------------------------------

### Create Next.js App with Knex Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md

Uses create-next-app to bootstrap a new Next.js project with the Knex example. It utilizes npm, Yarn, or pnpm package managers. No specific dependencies are required beyond those included in create-next-app.

```bash
npx create-next-app --example with-knex with-knex-app
```

```bash
yarn create next-app --example with-knex with-knex-app
```

```bash
pnpm create next-app --example with-knex with-knex-app
```

--------------------------------

### Bootstrap a Next.js App with ESLint using create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md

These commands demonstrate how to initialize a new Next.js application from the `with-eslint` example template. It provides equivalent commands for npm (via npx), Yarn, and pnpm, each creating a new project named `with-eslint-app`.

```bash
npx create-next-app --example with-eslint with-eslint-app
```

```bash
yarn create next-app --example with-eslint with-eslint-app
```

```bash
pnpm create next-app --example with-eslint with-eslint-app
```

--------------------------------

### Bootstrap a Next.js App with Yoga Design System

Source: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md

These commands use `create-next-app` to initialize a new Next.js project from the `with-yoga` example. Commands are provided for npm, Yarn, and pnpm, creating a new application in a directory named `with-yoga-app`.

```bash
npx create-next-app --example with-yoga with-yoga-app
```

```bash
yarn create next-app --example with-yoga with-yoga-app
```

```bash
pnpm create next-app --example with-yoga with-yoga-app
```

--------------------------------

### Bootstrap the Next.js Segment Analytics Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project pre-configured with the Segment Analytics example. This command will create a new directory named `with-segment-analytics-app` containing the example project.

```bash
npx create-next-app --example with-segment-analytics with-segment-analytics-app
```

```bash
yarn create next-app --example with-segment-analytics with-segment-analytics-app
```

```bash
pnpm create next-app --example with-segment-analytics with-segment-analytics-app
```

--------------------------------

### Bootstrap Next.js App with Strict CSP Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new project based on the `with-strict-csp` example. This command clones the example repository and initializes a new Next.js application in the `with-strict-csp-app` directory.

```bash
npx create-next-app --example with-strict-csp with-strict-csp-app
```

```bash
yarn create next-app --example with-strict-csp with-strict-csp-app
```

```bash
pnpm create next-app --example with-strict-csp with-strict-csp-app
```

--------------------------------

### Use a URL Import in a React Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/urlImports.mdx

This example demonstrates importing an external library (canvas-confetti from Skypack) directly from a URL and using it within a React component's `useEffect` hook. This allows for using third-party libraries without installing them via a package manager.

```javascript
import confetti from 'https://cdn.skypack.dev/canvas-confetti'
import { useEffect } from 'react'

export default () => {
  useEffect(() => {
    confetti()
  })
  return <p>Hello</p>
}
```

--------------------------------

### Bootstrap the Next.js Joi Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md

Use `create-next-app` to set up the example project locally. These commands will create a new directory named `with-joi-app` containing the application code. You can use your preferred package manager: npm, Yarn, or pnpm.

```bash
npx create-next-app --example with-joi with-joi-app
```

```bash
yarn create next-app --example with-joi with-joi-app
```

```bash
pnpm create next-app --example with-joi with-joi-app
```

--------------------------------

### Bootstrap Next.js with styled-components Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md

Use `create-next-app` with npm, Yarn, or pnpm to initialize a new Next.js project pre-configured with the `with-styled-components` example. This command downloads the template and sets up the necessary project structure.

```bash
npx create-next-app --example with-styled-components with-styled-components-app
```

```bash
yarn create next-app --example with-styled-components with-styled-components-app
```

```bash
pnpm create next-app --example with-styled-components with-styled-components-app
```

--------------------------------

### Listen for Router Events in a Next.js Client Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx

This example demonstrates how to create a client component that listens for page navigation events. It uses the `usePathname` and `useSearchParams` hooks to get the current URL and triggers a `useEffect` hook whenever the path or search parameters change.

```jsx
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}
```

--------------------------------

### Bootstrap Next.js Dynamic Import Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md

Demonstrates how to create a new Next.js application from the 'with-dynamic-import' example using various package managers. These commands will set up a new project in a directory named 'with-dynamic-import-app'.

```bash
npx create-next-app --example with-dynamic-import with-dynamic-import-app
```

```bash
yarn create next-app --example with-dynamic-import with-dynamic-import-app
```

```bash
pnpm create next-app --example with-dynamic-import with-dynamic-import-app
```

--------------------------------

### Run Contentful Setup Script with npx

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md

This command uses `npx` and `cross-env` to execute the project's setup script via `npm run setup`. It sets the `CONTENTFUL_SPACE_ID` and `CONTENTFUL_MANAGEMENT_TOKEN` environment variables inline, which are necessary for the script to authenticate with Contentful and create the required content model automatically.

```bash
npx cross-env CONTENTFUL_SPACE_ID=YOUR_SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN=XXX npm run setup
```

--------------------------------

### Create Next.js app with Electron TypeScript example (CLI)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md

These commands use `create-next-app` to bootstrap a Next.js project with an Electron and TypeScript example.  It utilizes npm, yarn, and pnpm package managers. No dependencies are required besides Node.js and a package manager.

```bash
npx create-next-app --example with-electron-typescript with-electron-typescript-app
```

```bash
yarn create next-app --example with-electron-typescript with-electron-typescript-app
```

```bash
pnpm create next-app --example with-electron-typescript with-electron-typescript-app
```

--------------------------------

### Set NEXT_SHARP_PATH Environment Variable in Bash

Source: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx

If `sharp` is installed but Next.js cannot resolve its path, you can manually specify its location by setting the `NEXT_SHARP_PATH` environment variable. This is an alternative fix for cases where automatic detection fails. Replace the example path with the actual path to the `sharp` module in your environment.

```bash
export NEXT_SHARP_PATH=/tmp/node_modules/sharp
```

--------------------------------

### Create Next.js app with remove-console example using npx

Source: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md

Uses npx to create a new Next.js application based on the remove-console example. This command bootstraps a project with the specified configuration, demonstrating how to implement console log removal.

```bash
npx create-next-app --example remove-console remove-console-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md

These commands use `create-next-app` with different package managers (npm via npx, Yarn, and pnpm) to create a new Next.js project based on the `active-class-name` example.

```bash
npx create-next-app --example active-class-name active-class-name-app
```

```bash
yarn create next-app --example active-class-name active-class-name-app
```

```bash
pnpm create next-app --example active-class-name active-class-name-app
```

--------------------------------

### Define Component Styles with Template Literals in TSX

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/next-devtools/README.md

This example demonstrates defining component-specific styles using a template literal in a TSX file. The styles are exported as a constant, which can then be imported and injected into the DOM elsewhere, ensuring style encapsulation and organization.

```tsx
export function Component() {
  return (
    <div className="some-unique-class-name">
      <h1>Hello, Next.js!</h1>
    </div>
  )
}

export const COMPONENT_NAME_STYLES = `
  .some-unique-class-name {
    background-color: red;
  }
`
```

--------------------------------

### Create Next.js app with remove-console example using pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md

Uses pnpm to create a new Next.js application based on the remove-console example. This command bootstraps a project with the specified configuration, demonstrating how to implement console log removal.

```bash
pnpm create next-app --example remove-console remove-console-app
```

--------------------------------

### Bootstrap the Next.js Route-as-Modal Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md

Use your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js application based on the 'with-route-as-modal' example. These commands create a new project directory with the example code ready to run.

```bash
npx create-next-app --example with-route-as-modal with-route-as-modal-app
```

```bash
yarn create next-app --example with-route-as-modal with-route-as-modal-app
```

```bash
pnpm create next-app --example with-route-as-modal with-route-as-modal-app
```

--------------------------------

### Add Type Safety to `generateStaticParams` in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx

This TypeScript example shows how to add strong typing to the `params` object received from a parent's `generateStaticParams`. By using the `Awaited` utility type with a custom `LayoutProps` helper, you can get type completion and safety for parent segment parameters.

```ts
export async function generateStaticParams({
  params: { category },
}: {
  params: Awaited<LayoutProps<'/products/[category]'>['params']>
}) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}
```

--------------------------------

### Bootstrap the Next.js CORS API Example

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md

Use `create-next-app` with NPX, Yarn, or PNPM to initialize a new Next.js project pre-configured with the API routes CORS example. These commands will download the template and set up a new application directory.

```bash
npx create-next-app --example api-routes-cors api-routes-cors-app
```

```bash
yarn create next-app --example api-routes-cors api-routes-cors-app
```

```bash
pnpm create next-app --example api-routes-cors api-routes-cors-app
```

--------------------------------

### Example .env.local Configuration for Sanity

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

This snippet shows an example of a completed `.env.local` file. It contains the public Sanity project ID and dataset, along with the secret API read token used for authenticated requests during live previews.

```bash
NEXT_PUBLIC_SANITY_PROJECT_ID="r0z1eifg"
NEXT_PUBLIC_SANITY_DATASET="blog-vercel"
SANITY_API_READ_TOKEN="sk..."
```

--------------------------------

### Bootstrap a Next.js Markdoc Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md

This snippet demonstrates how to initialize a new Next.js project based on the Markdoc example using different package managers. These commands utilize `create-next-app` to scaffold the project structure in a new directory named `markdoc-app`.

```bash
npx create-next-app --example markdoc markdoc-app
```

```bash
yarn create next-app --example markdoc markdoc-app
```

```bash
pnpm create next-app --example markdoc markdoc-app
```

--------------------------------

### Bootstrap the Example Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md

Scaffold the 'with-passport-and-next-connect' example application using create-next-app. You can use your preferred package manager (npx, Yarn, or pnpm) to initialize the project in a new directory.

```bash
npx create-next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

```bash
yarn create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

```bash
pnpm create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

--------------------------------

### Bootstrap a Next.js Forms Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md

Use the `create-next-app` command with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the `next-forms` example project. This command creates a new directory named `next-forms-app` with the example code.

```bash
npx create-next-app --example next-forms next-forms-app
```

```bash
yarn create next-app --example next-forms next-forms-app
```

```bash
pnpm create next-app --example next-forms next-forms-app
```

--------------------------------

### Bootstrap the Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md

These commands use `create-next-app` with different package managers (npx, Yarn, pnpm) to bootstrap the `api-routes-middleware` example project.

```bash
npx create-next-app --example api-routes-middleware api-routes-middleware-app
```

```bash
yarn create next-app --example api-routes-middleware api-routes-middleware-app
```

```bash
pnpm create next-app --example api-routes-middleware api-routes-middleware-app
```

--------------------------------

### Bootstrap a Next.js App with the Passport.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md

Create a new Next.js application pre-configured with the Passport.js authentication example using npx, Yarn, or pnpm. This command downloads the example from the Next.js repository and sets up a new project directory with all required dependencies.

```bash
npx create-next-app --example with-passport with-passport-app

yarn create next-app --example with-passport with-passport-app

pnpm create next-app --example with-passport with-passport-app
```

--------------------------------

### Install the Builder.io CLI Globally

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md

Install the Builder.io command-line interface (CLI) globally using npm. This tool is necessary for programmatically creating and managing your Builder.io spaces from the terminal.

```bash
npm install @builder.io/cli -g
```

--------------------------------

### Create Next.js app with Ably example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md

These commands use create-next-app to bootstrap a Next.js application with the Ably example. Choose either npm, Yarn, or pnpm to execute the command.

```bash
npx create-next-app --example with-ably with-ably-app
```

```bash
yarn create next-app --example with-ably with-ably-app
```

```bash
pnpm create next-app --example with-ably with-ably-app
```

--------------------------------

### Handle Promise-based Params in Next.js Route Handlers

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

Illustrates the change in handling `params` within Next.js Route Handlers. The "After" example shows that `segmentData.params` is now a promise that must be awaited to access its values, such as the `slug`. This change applies to functions like `GET`.

```tsx
// Before
type Params = { slug: string }

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = segmentData.params
  const slug = params.slug
}

// After
type Params = Promise<{ slug: string }>

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = await segmentData.params
  const slug = params.slug
}
```

```javascript
// Before
export async function GET(request, segmentData) {
  const params = segmentData.params
  const slug = params.slug
}

// After
export async function GET(request, segmentData) {
  const params = await segmentData.params
  const slug = params.slug
}
```

--------------------------------

### Start the Prismic Slice Machine

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md

Run this command to start the Slice Machine, a local development tool for modeling your content structures. The Slice Machine UI will become available at http://localhost:9999.

```sh
npm run slicemachine
```

--------------------------------

### Example Page Component for App Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

A basic React component example located in `app/page.js`. This `Page` component renders a heading and a link, and is used in subsequent test examples for the App Router.

```jsx
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `with-babel-macros` example. This command downloads the template and sets up a new application directory.

```bash
npx create-next-app --example with-babel-macros with-babel-macros-app
```

```bash
yarn create next-app --example with-babel-macros with-babel-macros-app
```

```bash
pnpm create next-app --example with-babel-macros with-babel-macros-app
```

--------------------------------

### Bootstrap a Next.js Sitecore XM Cloud Project

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md

Use `create-next-app` with npx, Yarn, or pnpm to bootstrap the example project. This command sets up a new Next.js application pre-configured to work with Sitecore XM Cloud.

```bash
npx create-next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

```bash
yarn create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

```bash
pnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

--------------------------------

### Bootstrap the Firebase Cloud Messaging Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `with-firebase-cloud-messaging` example. This command creates a new application directory with all the necessary boilerplate.

```bash
npx create-next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

```bash
yarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

```bash
pnpm create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

--------------------------------

### Seed the Database

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Runs the seed script to populate your database with initial data (Product and Category data).  This assumes a seed script is configured in `package.json`.

```bash
npm run seed
```

```bash
yarn seed
```

```bash
pnpm seed
```

--------------------------------

### Configure Template Paths in tailwind.config.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-v3-css.mdx

Configure your template paths in the `tailwind.config.js` file to ensure Tailwind CSS scans your project's component, page, and app files for utility classes. This setup works for projects using either the App Router, Pages Router, or both.

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

--------------------------------

### Bootstrap the Next.js Unsplash Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new Next.js project based on the `with-unsplash` example. This command downloads the template and sets up the basic project structure for you.

```bash
npx create-next-app --example with-unsplash with-unsplash-app
```

```bash
yarn create next-app --example with-unsplash with-unsplash-app
```

```bash
pnpm create next-app --example with-unsplash with-unsplash-app
```

--------------------------------

### Bootstrap a Next.js WindiCSS App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to initialize a new Next.js project based on the official WindiCSS example. This command downloads the template and sets up the basic project structure.

```bash
npx create-next-app --example with-windicss with-windicss-app
```

```bash
yarn create next-app --example with-windicss with-windicss-app
```

```bash
pnpm create next-app --example with-windicss with-windicss-app
```

--------------------------------

### Bootstrap a Next.js TypeScript/GraphQL Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md

These shell commands use `create-next-app` to bootstrap a new Next.js project based on the `with-typescript-graphql` example. You can use your preferred package manager (npm via npx, Yarn, or pnpm) to create the application.

```bash
npx create-next-app --example with-typescript-graphql with-typescript-graphql-app
```

```bash
yarn create next-app --example with-typescript-graphql with-typescript-graphql-app
```

```bash
pnpm create next-app --example with-typescript-graphql with-typescript-graphql-app
```

--------------------------------

### Bootstrap the Application with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `cms-graphcms` example.

```bash
npx create-next-app --example cms-graphcms cms-graphcms-app
```

```bash
yarn create next-app --example cms-graphcms cms-graphcms-app
```

```bash
pnpm create next-app --example cms-graphcms cms-graphcms-app
```

--------------------------------

### Bootstrap Next.js with Playwright Example using npx, Yarn, or pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md

Use the `create-next-app` command-line tool to quickly set up a new Next.js application based on the `with-playwright` example. This example comes pre-configured for end-to-end testing with Playwright. You can use npx, Yarn, or pnpm as your package manager.

```bash
npx create-next-app --example with-playwright with-playwright-app
```

```bash
yarn create next-app --example with-playwright with-playwright-app
```

```bash
pnpm create next-app --example with-playwright with-playwright-app
```

--------------------------------

### Bootstrap the GraphQL Hooks Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md

Create a new Next.js application using the `with-graphql-hooks` example template. You can use npx, Yarn, or pnpm to run the `create-next-app` command, which will set up the project in a new directory named `with-graphql-hooks-app`.

```bash
npx create-next-app --example with-graphql-hooks with-graphql-hooks-app
```

```bash
yarn create next-app --example with-graphql-hooks with-graphql-hooks-app
```

```bash
pnpm create next-app --example with-graphql-hooks with-graphql-hooks-app
```

--------------------------------

### Bootstrap a Next.js App with the reactstrap Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project pre-configured with reactstrap. The command will set up a new application in a directory named `with-reactstrap-app`.

```bash
npx create-next-app --example with-reactstrap with-reactstrap-app
```

```bash
yarn create next-app --example with-reactstrap with-reactstrap-app
```

```bash
pnpm create next-app --example with-reactstrap with-reactstrap-app
```

--------------------------------

### Manage Cookies in Next.js Middleware

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx

This example shows how to interact with cookies in Next.js middleware. It uses the `cookies` API on `NextRequest` to get, check for, and delete incoming cookies, and the `cookies` API on `NextResponse` to set cookies for the outgoing response. The code is provided in both TypeScript and JavaScript.

```typescript
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.

  return response
}
```

```javascript
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.

  return response
}
```

--------------------------------

### Create Next.js app with remove-console example using Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md

Uses Yarn to create a new Next.js application based on the remove-console example. This command bootstraps a project with the specified configuration, demonstrating how to implement console log removal.

```bash
yarn create next-app --example remove-console remove-console-app
```

--------------------------------

### Bootstrap a Next.js App with Orbit Components

Source: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md

These commands use `create-next-app` to bootstrap the example project, which integrates Next.js with Orbit Components. Commands are provided for npx, Yarn, and pnpm, allowing you to choose your preferred package manager.

```bash
npx create-next-app --example with-orbit-components with-orbit-components-app
```

```bash
yarn create next-app --example with-orbit-components with-orbit-components-app
```

```bash
pnpm create next-app --example with-orbit-components with-orbit-components-app
```

--------------------------------

### Example Home Component for Pages Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

A basic React component example located in `pages/index.js`. This `Home` component renders a single `h1` element and is used in subsequent test examples for the Pages Router.

```jsx
export default function Home() {
  return <h1>Home</h1>
}
```

--------------------------------

### Bootstrap Next.js with react-multi-carousel

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md

Use `create-next-app` with npm, Yarn, or pnpm to quickly set up a new Next.js project that includes the `react-multi-carousel` example. These commands will create a new directory with the specified app name, containing all the necessary files.

```bash
npx create-next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

```bash
yarn create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

```bash
pnpm create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project based on the `with-google-tag-manager` example. This command scaffolds a complete application ready for configuration.

```bash
npx create-next-app --example with-google-tag-manager with-google-tag-manager-app
```

```bash
yarn create next-app --example with-google-tag-manager with-google-tag-manager-app
```

```bash
pnpm create next-app --example with-google-tag-manager with-google-tag-manager-app
```

--------------------------------

### Create Next.js App with Mux Video Example (Yarn)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md

Uses Yarn to create a new Next.js application using the with-mux-video example.  This command bootstraps the project with the necessary files and dependencies for Mux Video integration.

```bash
yarn create next-app --example with-mux-video with-mux-video-app
```

--------------------------------

### Generate Dynamic Images in a Next.js Route Handler

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx

This example demonstrates how to use ImageResponse within a Next.js Route Handler (app/api/route.js). The GET function dynamically creates a PNG image from a JSX component at request time, which is useful for generating custom social media cards.

```javascript
import { ImageResponse } from 'next/og'

export async function GET() {
  try {
    return new ImageResponse(
      (
        <div
          style={{
            height: '100%',
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: 'white',
            padding: '40px',
          }}
        >
          <div
            style={{
              fontSize: 60,
              fontWeight: 'bold',
              color: 'black',
              textAlign: 'center',
            }}
          >
            Welcome to My Site
          </div>
          <div
            style={{
              fontSize: 30,
              color: '#666',
              marginTop: '20px',
            }}
          >
            Generated with Next.js ImageResponse
          </div>
        </div>
      ),
      {
        width: 1200,
        height: 630,
      }
    )
  } catch (e) {
    console.log(`${e.message}`)
    return new Response(`Failed to generate the image`, {
      status: 500,
    })
  }
}
```

--------------------------------

### Bootstrap a Next.js Jotai Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to quickly set up a new Next.js project pre-configured with the Jotai state management library. This command bootstraps the 'with-jotai' example into a new directory named 'with-jotai-app'.

```bash
npx create-next-app --example with-jotai with-jotai-app
```

```bash
yarn create next-app --example with-jotai with-jotai-app
```

```bash
pnpm create next-app --example with-jotai with-jotai-app
```

--------------------------------

### Bootstrap the Example App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md

Use your preferred package manager (npx, Yarn, or pnpm) to create a new Next.js project based on the `with-google-maps-embed` example. These commands will set up a new directory with the example application ready for configuration.

```bash
npx create-next-app --example with-google-maps-embed with-google-maps-embed-app
```

```bash
yarn create next-app --example with-google-maps-embed with-google-maps-embed-app
```

```bash
pnpm create next-app --example with-google-maps-embed with-google-maps-embed-app
```

--------------------------------

### Create and Export a Variable Reference with Getters/Setters in JavaScript (Turbopack)

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md

This snippet defines a `dogRef` object to manage a `dog` variable imported from another Turbopack part. It provides `get` and `set` functions to read and modify the variable, encapsulating its state. The reference object and its methods are then exported for use in other modules.

```javascript
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
function getDog() {
    return dog;
}
function setDog(newDog) {
    dog = newDog;
}
const dogRef = {
    initial: dog,
    get: getDog,
    set: setDog
};
export { dogRef };
export { getDog as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { setDog as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { dogRef as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

--------------------------------

### Bootstrap the Next.js with Firebase Hosting Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new project directory based on the 'with-firebase-hosting' example.

```bash
npx create-next-app --example with-firebase-hosting with-firebase-hosting-app
```

```bash
yarn create next-app --example with-firebase-hosting with-firebase-hosting-app
```

```bash
pnpm create next-app --example with-firebase-hosting with-firebase-hosting-app
```

--------------------------------

### Bootstrap a Next.js App with Linaria Example using CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md

Use `create-next-app` with npm, Yarn, or pnpm to quickly set up a new Next.js project pre-configured with the Linaria styling library. This command clones the 'with-linaria' example from the Next.js repository into a new application directory.

```bash
npx create-next-app --example with-linaria with-linaria-app
```

```bash
yarn create next-app --example with-linaria with-linaria-app
```

```bash
pnpm create next-app --example with-linaria with-linaria-app
```

--------------------------------

### Create Next.js App with Docker Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md

Uses create-next-app to bootstrap a Next.js project with the with-docker example. This command sets up the basic project structure and dependencies for a Dockerized Next.js application.

```bash
npx create-next-app --example with-docker nextjs-docker
```

```bash
yarn create next-app --example with-docker nextjs-docker
```

```bash
pnpm create next-app --example with-docker nextjs-docker
```

```bash
bun create next-app --example with-docker nextjs-docker
```

--------------------------------

### Invalidate a Route Handler's Data Cache

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx

This example shows a Next.js Route Handler that fetches and caches data using `cache: 'force-cache'`. Calling `revalidatePath("/api/data")` will invalidate the Data Cache entry for this specific GET handler, forcing a fresh fetch on the next request.

```ts
export async function GET() {
  const data = await fetch('https://api.vercel.app/blog', {
    cache: 'force-cache',
  })

  return Response.json(await data.json())
}
```

--------------------------------

### Define Next.js Middleware with a Path Matcher

Source: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx

This example shows how to create a single `middleware.ts` file in a Next.js application. It uses an exported `config` object with a `matcher` property to specify which routes the middleware should run on, in this case `/about/*` and `/dashboard/:path*`. The middleware function itself rewrites matching requests to a different URL.

```typescript
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/about-2', request.url))
}

// Supports both a single string value or an array of matchers
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}
```

--------------------------------

### Bootstrap the Next.js App with Salesforce Commerce Cloud

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md

Use `create-next-app` with npm, Yarn, or pnpm to bootstrap the example project. This command sets up a new Next.js application pre-configured for Salesforce Commerce Cloud integration in a directory named `nextjs-sfcc-app`.

```bash
npx create-next-app --example with-sfcc nextjs-sfcc-app
```

```bash
yarn create next-app --example with-sfcc nextjs-sfcc-app
```

```bash
pnpm create next-app --example with-sfcc nextjs-sfcc-app
```

--------------------------------

### Read a Cookie in a Next.js Server Component (TSX/JS)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx

This example demonstrates how to use the `cookies` function from `next/headers` within a Next.js Server Component to read an incoming request cookie. The function is asynchronous and returns a `cookieStore` object, from which you can retrieve a specific cookie using the `get()` method.

```tsx
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

```javascript
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

--------------------------------

### Start the Next.js App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md

Start the Next.js development server to run the application locally. This command launches the application on http://localhost:3000.

```bash
$ yarn dev
```

--------------------------------

### Create Next.js app with MongoDB example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md

Uses create-next-app to bootstrap a new Next.js project with the with-mongodb-mongoose example. This sets up a basic project structure with MongoDB integration.

```bash
npx create-next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

```bash
yarn create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

```bash
pnpm create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

--------------------------------

### Install Tailwind CSS v3 and Dependencies

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-v3-css.mdx

Install Tailwind CSS v3, PostCSS, and Autoprefixer as development dependencies using your preferred package manager. After installation, run the init command to generate the necessary `tailwind.config.js` and `postcss.config.js` configuration files.

```pnpm
pnpm add -D tailwindcss@^3 postcss autoprefixer
npx tailwindcss init -p
```

```npm
npm install -D tailwindcss@^3 postcss autoprefixer
npx tailwindcss init -p
```

```yarn
yarn add -D tailwindcss@^3 postcss autoprefixer
npx tailwindcss init -p
```

```bun
bun add -D tailwindcss@^3 postcss autoprefixer
bunx tailwindcss init -p
```

--------------------------------

### Configure Middleware with Negative Path Matching in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx

This example demonstrates how to use the `matcher` config in a `middleware.js` file to control which paths the middleware runs on. It uses a regular expression with a negative lookahead to apply the middleware to all request paths except for those starting with `api`, `_next/static`, `_next/image`, or specific metadata files.

```javascript
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
  ],
}
```

--------------------------------

### Bootstrap a Next.js REST API Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new project from the `api-routes-rest` example. This command scaffolds a complete application ready for development.

```bash
npx create-next-app --example api-routes-rest api-routes-rest-app
```

```bash
yarn create next-app --example api-routes-rest api-routes-rest-app
```

```bash
pnpm create next-app --example api-routes-rest api-routes-rest-app
```

--------------------------------

### Manage Cookies in Next.js Middleware

Source: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx

This example demonstrates the current API for managing cookies in Next.js Middleware. Using the `cookies` property on a `NextResponse` object, you can `set`, `getWithOptions`, and `delete` cookies, following a pattern similar to the JavaScript `Map` object. This replaces the older direct `response.cookie()` and `response.clearCookie()` methods.

```typescript
import { NextResponse } from 'next/server';

export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}
```

--------------------------------

### Install @next/bundle-analyzer

Source: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md

Install the `@next/bundle-analyzer` package into your Next.js project using either npm or yarn. It is recommended to install it as a development dependency.

```bash
npm install @next/bundle-analyzer
```

```bash
yarn add @next/bundle-analyzer
```

--------------------------------

### Bootstrap a Next.js App with Sass

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md

Use `create-next-app` to quickly set up a new Next.js project based on the `with-sass` example. Commands are provided for npm, Yarn, and pnpm package managers.

```bash
npx create-next-app --example with-sass with-sass-app
```

```bash
yarn create next-app --example with-sass with-sass-app
```

```bash
pnpm create next-app --example with-sass with-sass-app
```

--------------------------------

### Track Link Navigation State with useLinkStatus in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-link-status.mdx

This example demonstrates how to use the `useLinkStatus` hook to create an inline pending indicator for a `next/link` component. A `Hint` component calls `useLinkStatus` to get the `pending` state and applies a CSS class accordingly. This is particularly useful for navigations where prefetching is disabled (`prefetch={false}`) to provide immediate user feedback.

```tsx
'use client'

import Link from 'next/link'
import { useLinkStatus } from 'next/link'

function Hint() {
  const { pending } = useLinkStatus()
  return (
    <span aria-hidden className={`link-hint ${pending ? 'is-pending' : ''}`} />
  )
}

export default function Header() {
  return (
    <header>
      <Link href="/dashboard" prefetch={false}>
        <span className="label">Dashboard</span> <Hint />
      </Link>
    </header>
  )
}
```

```jsx
'use client'

import Link from 'next/link'
import { useLinkStatus } from 'next/link'

function Hint() {
  const { pending } = useLinkStatus()
  return (
    <span aria-hidden className={`link-hint ${pending ? 'is-pending' : ''}`} />
  )
}

export default function Header() {
  return (
    <header>
      <Link href="/dashboard" prefetch={false}>
        <span className="label">Dashboard</span> <Hint />
      </Link>
    </header>
  )
}
```

--------------------------------

### Start the Development Server

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md

Execute `pnpm dev` to start the development server. This command will watch for code changes in the source files and automatically rebuild the project as you work.

```bash
pnpm dev
```

--------------------------------

### Create Next.js app with Emotion using npx

Source: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md

Uses npx to create a new Next.js application based on the with-emotion-swc example. This command bootstraps a project with Emotion pre-configured.

```bash
npx create-next-app --example with-emotion-swc with-emotion-swc-app
```

--------------------------------

### Install the `react-is` Package

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md

Install the `react-is` package into your project using either the Yarn or NPM package managers.

```shell
# Yarn
yarn add react-is
```

```shell
# NPM
npm install react-is
```

--------------------------------

### Bootstrap the Next.js Context API Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md

Initialize a new Next.js project using the `with-context-api` example template. These commands use different package managers (npx, Yarn, pnpm) to download and set up the project structure for you.

```bash
npx create-next-app --example with-context-api with-context-api-app
```

```bash
yarn create next-app --example with-context-api with-context-api-app
```

```bash
pnpm create next-app --example with-context-api with-context-api-app
```

--------------------------------

### Bootstrap a Next.js App with Relay Modern

Source: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md

Use `create-next-app` to initialize a new Next.js project based on the `with-relay-modern` example. The following commands demonstrate how to achieve this with npx, Yarn, or pnpm.

```bash
npx create-next-app --example with-relay-modern with-relay-modern-app
```

```bash
yarn create next-app --example with-relay-modern with-relay-modern-app
```

```bash
pnpm create next-app --example with-relay-modern with-relay-modern-app
```

--------------------------------

### Bootstrap a Next.js App with Cypress

Source: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the example project. This command creates a new Next.js application named 'with-cypress-app' pre-configured with Cypress.

```bash
npx create-next-app --example with-cypress with-cypress-app
```

```bash
yarn create next-app --example with-cypress with-cypress-app
```

```bash
pnpm create next-app --example with-cypress with-cypress-app
```

--------------------------------

### Build a Static Storybook Site

Source: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md

These commands compile your Storybook into a set of static files, typically in a `storybook-static` directory. This static build can be deployed to any web hosting service, such as Vercel.

```bash
npm run build-storybook
```

```bash
yarn build-storybook
```

```bash
pnpm build-storybook
```

--------------------------------

### Install devlow-bench via npm

Source: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md

Installs the `devlow-bench` package using the Node Package Manager (npm). This command adds the tool to your project's dependencies.

```bash
npm install devlow-bench
```

--------------------------------

### Create Next.js app with Emotion using pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md

Uses pnpm to create a new Next.js application based on the with-emotion-swc example. This command bootstraps a project with Emotion pre-configured.

```bash
pnpm create next-app --example with-emotion-swc with-emotion-swc-app
```

--------------------------------

### Bootstrap the Secure Image Compute Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap a new project from the `image-secure-compute` example. This sets up a Next.js application pre-configured with a serverless function to securely serve images.

```bash
npx create-next-app --example image-secure-compute image-secure-compute-app
```

```bash
yarn create next-app --example image-secure-compute image-secure-compute-app
```

```bash
pnpm create next-app --example image-secure-compute image-secure-compute-app
```

--------------------------------

### Install EdgeDB CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md

Install the EdgeDB command-line interface (CLI) to interact with the EdgeDB instance. The commands differ based on the operating system.

```bash
# macOS/Linux
$ curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh
```

```powershell
# Windows (Powershell)
$ iwr https://ps1.edgedb.com -useb | iex
```

--------------------------------

### Bootstrap a Next.js Slate.js App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md

Use `create-next-app` with your preferred package manager (npm via npx, Yarn, or pnpm) to bootstrap the 'with-slate' example project. This command sets up a new Next.js application pre-configured with Slate.js.

```bash
npx create-next-app --example with-slate with-slate-app
```

```bash
yarn create next-app --example with-slate with-slate-app
```

```bash
pnpm create next-app --example with-slate with-slate-app
```

--------------------------------

### Install npm dependencies

Source: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md

Install the npm dependencies required for the project. Use either npm or yarn.

```bash
$  npm install
# or
$  yarn
```

--------------------------------

### Install MDX Dependencies for Next.js `pages` Directory

Source: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md

Install the required packages `@next/mdx` and `@mdx-js/loader` to use MDX with the Next.js `pages` directory. You can use either npm or yarn for the installation.

```npm
npm install @next/mdx @mdx-js/loader
```

```yarn
yarn add @next/mdx @mdx-js/loader
```

--------------------------------

### Bootstrap Next.js Stripe Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md

Use `create-next-app` to quickly initialize a new project based on the official `with-stripe-typescript` example. The commands for npm, Yarn, and pnpm are provided to accommodate different development environments.

```bash
npx create-next-app --example with-stripe-typescript with-stripe-typescript-app
```

```bash
yarn create next-app --example with-stripe-typescript with-stripe-typescript-app
```

```bash
pnpm create next-app --example with-stripe-typescript with-stripe-typescript-app
```

--------------------------------

### Bootstrap the Next.js with Recoil Example Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md

Use `create-next-app` to set up a new Next.js project pre-configured with the Recoil example. You can use npx, Yarn, or pnpm to execute the command, which will create a new directory named 'with-recoil-app' with the project files.

```bash
npx create-next-app --example with-recoil with-recoil-app
```

```bash
yarn create next-app --example with-recoil with-recoil-app
```

```bash
pnpm create next-app --example with-recoil with-recoil-app
```

--------------------------------

### Create a Web App Manifest in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx

This snippet demonstrates how to create a web app manifest file in a Next.js application using either TypeScript or JavaScript. The manifest file, located at `app/manifest.ts` or `app/manifest.js`, defines essential PWA metadata such as the app's name, icons, start URL, and display properties, enabling users to install the web app on their device.

```tsx
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}
```

```jsx
export default function manifest() {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}
```

--------------------------------

### Run the Local Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md

Start the Next.js development server to run your application locally. The site will be available at http://localhost:3000.

```bash
yarn dev
# or
npm run dev
```

--------------------------------

### Bootstrap Next.js SuperTokens App via create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md

Use `create-next-app` with the `with-supertokens` example to quickly set up a Next.js project integrated with SuperTokens. Commands are provided for npm, Yarn, and pnpm, which all achieve the same result of bootstrapping the example application.

```bash
npx create-next-app --example with-supertokens with-supertokens-app
```

```bash
yarn create next-app --example with-supertokens with-supertokens-app
```

```bash
pnpm create next-app --example with-supertokens with-supertokens-app
```

--------------------------------

### Bootstrap the Next.js Docker Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project from the `with-docker-multi-env` example. This command sets up the necessary file structure and configurations for Docker-based multi-environment deployments.

```bash
npx create-next-app --example with-docker-multi-env nextjs-docker-multi-env
```

```bash
yarn create next-app --example with-docker-multi-env nextjs-docker-multi-env
```

```bash
pnpm create next-app --example with-docker-multi-env nextjs-docker-multi-env
```

--------------------------------

### Bootstrap a Next.js App with Apollo and Redux

Source: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new Next.js project based on the 'with-apollo-and-redux' example. This command sets up a boilerplate application that integrates both Apollo Client and Redux.

```bash
npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

```bash
yarn create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

```bash
pnpm create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

--------------------------------

### Create Next.js app with Panda CSS example

Source: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md

These commands use different package managers (npm, Yarn, pnpm, Bun) to create a new Next.js application based on the Panda CSS example. The command bootstraps a new project with the necessary configurations and dependencies for using Panda CSS in Next.js.

```bash
npx create-next-app --example panda-css panda-css-app
```

```bash
yarn create next-app --example panda-css panda-css-app
```

```bash
pnpm create next-app --example panda-css panda-css-app
```

```bash
bunx create-next-app --example panda-css panda-css-app
```

--------------------------------

### Secure a Next.js API Route with `unauthorized`

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx

This example shows how to protect a `GET` endpoint in a Next.js Route Handler. It uses a helper function `verifySession` to check for an active user session. If no session is found, the `unauthorized()` function is called, which halts further execution and returns a 401 HTTP status, preventing unauthorized data access.

```typescript
import { NextRequest, NextResponse } from 'next/server'
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET(req: NextRequest): Promise<NextResponse> {
  // Verify the user's session
  const session = await verifySession()

  // If no session exists, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

```javascript
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET() {
  const session = await verifySession()

  // If the user is not authenticated, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

--------------------------------

### Install 'sharp' using a Package Manager

Source: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx

To resolve the error, install the `sharp` library in your project directory using the command corresponding to your package manager. After installation, you must rebuild your project with `next build` and restart the production server.

```bash
npm i sharp
```

```bash
yarn add sharp
```

```bash
pnpm add sharp
```

```bash
bun add sharp
```

--------------------------------

### Configure package.json Scripts for Deployment

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/16-deploying.mdx

This JSON configuration for `package.json` defines the essential scripts for building and starting a Next.js application as a Node.js server. The `build` script compiles the application for production, and the `start` script launches the server that supports all Next.js features.

```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

--------------------------------

### Start a Next.js Production App with PM2

Source: https://github.com/vercel/next.js/blob/canary/__wiki__/Deployment-on-Nginx's-reverse-proxy.md

This command starts a pre-built Next.js application using the PM2 process manager. It runs the `npm start` script, assigns the name "next" to the process, and keeps the application running in the background. Ensure you have run `next build` before executing this command.

```bash
pm2 start npm --name "next" -- start
```

--------------------------------

### Bootstrap the Next.js FingerprintJS Pro Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project pre-configured with the FingerprintJS Pro example. This command downloads the template and sets up the initial project structure.

```bash
npx create-next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

```bash
yarn create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

```bash
pnpm create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

--------------------------------

### Bootstrap a Next.js App with Storybook

Source: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap a new Next.js project pre-configured with the Storybook example. This command creates a new directory with the project files.

```bash
npx create-next-app --example with-storybook with-storybook-app
```

```bash
yarn create next-app --example with-storybook with-storybook-app
```

```bash
pnpm create next-app --example with-storybook with-storybook-app
```

--------------------------------

### Create an Example Page Component (App Router)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx

An example of a simple page component located in the `app` directory for a Next.js project. This component, which renders a heading and a link, is used as the subject for a unit test.

```tsx
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

```jsx
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

--------------------------------

### Install Next.js Preview Build from a Commit

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md

Modify your project's `package.json` to install a specific preview build of Next.js from a commit SHA. This uses the `vercel-packages.vercel.app` service to fetch the package.

```json
{
  "dependencies": {
    "next": "https://vercel-packages.vercel.app/next/commits/188f76947389a27e9bcff8ebf9079433679256a7/next"
  }
}
```

--------------------------------

### Install OpenTelemetry Dependencies via npm

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx

Installs the necessary OpenTelemetry packages for manual configuration using npm. These packages include the Node.js SDK, resource and semantic convention definitions, the Node.js trace SDK, and the OTLP HTTP trace exporter.

```bash
npm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http
```

--------------------------------

### Push Prisma Schema to PlanetScale

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Pushes the Prisma schema to your PlanetScale database, creating the necessary tables and relationships.  This command uses Prisma CLI to sync your schema.

```bash
npx prisma db push
```

```bash
yarn prisma db push
```

```bash
pnpm prisma db push
```

--------------------------------

### Initialize a Next.js Project with an API Route

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

Use the `create-next-app` command with the `--api` flag to scaffold a new Next.js project. This automatically includes an example `route.ts` file in the `app/` directory, demonstrating a basic API endpoint.

```bash
npx create-next-app@latest --api
```

--------------------------------

### Bootstrap the Next.js Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap a new Next.js application using the `cms-prismic` example. This command scaffolds a complete project directory with all necessary configurations.

```bash
npx create-next-app --example cms-prismic cms-prismic-app
```

```bash
yarn create next-app --example cms-prismic cms-prismic-app
```

```bash
pnpm create next-app --example cms-prismic cms-prismic-app
```

--------------------------------

### Bootstrap the Next.js MobX State Tree Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to set up a new Next.js project pre-configured with the MobX State Tree example. This command initializes a new application directory with the necessary files and dependencies.

```bash
npx create-next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

```bash
yarn create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

```bash
pnpm create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

--------------------------------

### Bootstrap a Next.js Apollo App via Command Line

Source: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to create a new Next.js project pre-configured with the Apollo client. This command downloads the 'with-apollo' example and sets it up in a new directory named 'with-apollo-app'.

```bash
npx create-next-app --example with-apollo with-apollo-app
```

```bash
yarn create next-app --example with-apollo with-apollo-app
```

```bash
pnpm create next-app --example with-apollo with-apollo-app
```

--------------------------------

### Bootstrap the Next.js with React Intl Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md

Use npx, Yarn, or pnpm to create a new Next.js application based on the 'with-react-intl' example. This command scaffolds a complete project with React Intl pre-configured.

```bash
npx create-next-app --example with-react-intl with-react-intl-app
```

```bash
yarn create next-app --example with-react-intl with-react-intl-app
```

```bash
pnpm create next-app --example with-react-intl with-react-intl-app
```

--------------------------------

### Bootstrap a Next.js Meilisearch App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, pnpm, or Bun) to bootstrap a new Next.js project from the `with-meilisearch` example. This command initializes a new application in a directory named `with-meilisearch-app`.

```bash
npx create-next-app --example with-meilisearch with-meilisearch-app
```

```bash
yarn create next-app --example with-meilisearch with-meilisearch-app
```

```bash
pnpm create next-app --example with-meilisearch with-meilisearch-app
```

```bash
bunx create-next-app --example with-meilisearch with-meilisearch-app
```

--------------------------------

### Create Next.js app with Emotion using Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md

Uses Yarn to create a new Next.js application based on the with-emotion-swc example. This command bootstraps a project with Emotion pre-configured.

```bash
yarn create next-app --example with-emotion-swc with-emotion-swc-app
```

--------------------------------

### Bootstrap a Next.js App with Turbopack Loaders Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md

Use `create-next-app` to bootstrap a new Next.js project pre-configured with the Turbopack loaders example. Commands are shown for npx, Yarn, and pnpm.

```bash
npx create-next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

```bash
yarn create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

```bash
pnpm create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

--------------------------------

### Install the Turso CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md

Install the Turso command-line interface to manage your databases. A command is provided for macOS using Homebrew, and another for Linux and Windows Subsystem for Linux (WSL) using a curl script.

```bash
# macOS
brew install tursodatabase/tap/turso
```

```bash
# Windows (WSL) & Linux:
# curl -sSfL https://get.tur.so/install.sh | bash
```

--------------------------------

### Bootstrap Next.js SSR Portals Example with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap the `with-portals-ssr` example. This command initializes a new Next.js application pre-configured to demonstrate server-side rendered portals.

```bash
npx create-next-app --example with-portals-ssr with-portals-ssr-app
```

```bash
yarn create next-app --example with-portals-ssr with-portals-ssr-app
```

```bash
pnpm create next-app --example with-portals-ssr with-portals-ssr-app
```

--------------------------------

### Run Next.js Production Benchmark using PNPM

Source: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md

These shell commands are used to set up the environment, compile local changes, and execute the benchmarking script for a Next.js application. `pnpm install` is for installing dependencies, `pnpm dev` or `pnpm build --force` are for compiling local Next.js modifications, and `pnpm bench` runs the actual benchmark.

```bash
# Install dependencies
pnpm install

# If you made changes to Next.js, compile them by running either:
pnpm dev
# or
pnpm build --force

# Run the benchmark script
pnpm bench
```

--------------------------------

### Consume a Promise in a Client Component with React's `use` Hook

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx

This example shows how to consume a Promise within a Next.js Client Component. It uses a custom hook (`useUser`) to get the Promise from context and then unwraps its value using React's `use` hook. This suspends the component until the data is resolved, enabling streaming and partial hydration.

```tsx
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

```jsx
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

--------------------------------

### Install the Stable Release of Next.js

Source: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md

Use this npm command to install the latest stable version of Next.js. This channel is recommended for the majority of users and follows semantic versioning.

```shell
npm install next
```

--------------------------------

### Bootstrap the i18n Next.js Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the `with-i18n-next-intl` example. This command scaffolds a complete application ready for internationalization.

```bash
npx create-next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

```bash
yarn create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

```bash
pnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

--------------------------------

### Bootstrap a Next.js App with the Cloudflare Turnstile Example

Source: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project based on the Cloudflare Turnstile example.

```bash
npx create-next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

```bash
yarn create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

```bash
pnpm create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

--------------------------------

### Bootstrap Next.js GSAP App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md

Use `create-next-app` with npx, Yarn, or pnpm to initialize a new Next.js project pre-configured with the GSAP animation library. These commands create a new directory named 'with-gsap-app' containing the example project.

```bash
npx create-next-app --example with-gsap with-gsap-app
```

```bash
yarn create next-app --example with-gsap with-gsap-app
```

```bash
pnpm create next-app --example with-gsap with-gsap-app
```

--------------------------------

### GET /api/hello-world

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx

Demonstrates a basic Next.js Route Handler for handling GET requests, returning a simple JSON message. This handler can be placed in any `route.js` file to respond to requests at that path.

```APIDOC
## GET /api/hello-world

### Description
Demonstrates a basic Next.js Route Handler for handling GET requests, returning a simple JSON message. This handler can be placed in any `route.js` file to respond to requests at that path.

### Method
GET

### Endpoint
/your-route-path

### Parameters
#### Path Parameters
(None)

#### Query Parameters
(None)

#### Request Body
(None)

### Request Example
(None)

### Response
#### Success Response (200)
- **message** (string) - A greeting message.

#### Response Example
{
  "message": "Hello World"
}
```

--------------------------------

### Create Next.js App with Docker Compose Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md

These commands use create-next-app to bootstrap a Next.js application with the Docker Compose example. Choose npm, Yarn, or pnpm to execute the command, creating a new project with the specified template.

```bash
npx create-next-app --example with-docker-compose with-docker-compose-app
```

```bash
yarn create next-app --example with-docker-compose with-docker-compose-app
```

```bash
pnpm create next-app --example with-docker-compose with-docker-compose-app
```

--------------------------------

### Create a Next.js Sentry Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md

Use `create-next-app` to initialize a new Next.js project based on the `with-sentry` example. Below are the commands for different package managers: npx, Yarn, and pnpm. This is the first step to creating a local copy of the example app.

```bash
npx create-next-app --example with-sentry nextjs-sentry-example

yarn create next-app --example with-sentry nextjs-sentry-example

pnpm create next-app --example with-sentry nextjs-sentry-example
```

--------------------------------

### Create a Static robots.txt File

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/robots.mdx

Add a static `robots.txt` file to the root of your `app` directory to provide instructions to search engine crawlers. This example allows full access for all user-agents except for the `/private/` directory and specifies the location of the sitemap.

```text
User-Agent: *
Allow: /
Disallow: /private/

Sitemap: https://acme.com/sitemap.xml
```

--------------------------------

### Install Jest and Testing Dependencies

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

Install Jest, React Testing Library, and their required peer dependencies for a Next.js project using npm, yarn, or pnpm. These packages provide the core functionality for unit and snapshot testing.

```bash
npm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
```

```bash
yarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
```

```bash
pnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
```

--------------------------------

### Bootstrap a Next.js App with the CLI

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx

Use `npx create-next-app@latest` to bootstrap a new Next.js application. You can optionally provide a project name and other flags directly in the command to customize the setup.

```bash
npx create-next-app@latest [project-name] [options]
```

--------------------------------

### Get Client Component Loader Metrics in Next.js (JavaScript)

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md

This JavaScript function retrieves performance metrics related to client component loading within a Next.js application using Turbopack. It compiles the load start time, total load times, and component count into a single object. The function also provides an option to reset these metrics after retrieval by passing `{ reset: true }`.

```javascript
import { c as clientComponentLoadCount } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import { a as clientComponentLoadStart } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { b as clientComponentLoadTimes } from "__TURBOPack_PART__" assert {
    __turbopack_part__: -1
};
function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}
export { getClientComponentLoaderMetrics };
export { getClientComponentLoaderMetrics as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

--------------------------------

### Install the @xstate/inspect Dependency

Source: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md

Install the `@xstate/inspect` package to enable debugging and visualization tools for your XState machines. This can be done using npm, Yarn, or pnpm.

```bash
npm install @xstate/inspect
```

```bash
yarn add @xstate/inspect
```

```bash
pnpm add @xstate/inspect
```

--------------------------------

### Create Next.js App with Expo TypeScript Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md

These commands create a new Next.js application using the with-expo-typescript example. Choose npm, Yarn, or pnpm to bootstrap the project. This sets up the basic project structure for a universal React app.

```bash
npx create-next-app --example with-expo-typescript with-expo-typescript-app
```

```bash
yarn create next-app --example with-expo-typescript with-expo-typescript-app
```

```bash
pnpm create next-app --example with-expo-typescript with-expo-typescript-app
```

--------------------------------

### Rename .env.example to .env

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Renames the `.env.example` file to `.env`. This file will store your environment variables, including the database connection string.

```shell
mv .env.example .env
```

--------------------------------

### Install TypeScript Dependencies

Source: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md

This command installs the necessary development dependencies to add TypeScript support to the Next.js project, allowing you to use `.ts` and `.tsx` files for pages and components.

```bash
npm install --save-dev typescript @types/react @types/node
```

--------------------------------

### Bootstrap Next.js with Google Analytics Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to bootstrap a new Next.js project from the `with-google-analytics` example. This command creates a new directory named `with-google-analytics-app` containing the pre-configured application.

```bash
npx create-next-app --example with-google-analytics with-google-analytics-app
```

```bash
yarn create next-app --example with-google-analytics with-google-analytics-app
```

```bash
pnpm create next-app --example with-google-analytics with-google-analytics-app
```

--------------------------------

### Conditionally Redirect in a Next.js Client Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx

This example demonstrates how to perform a redirect within a Client Component based on the current URL path. It utilizes the `usePathname` hook to get the current path and calls the `redirect` function from `next/navigation` if a specific condition is met, such as a user accessing a restricted area without being logged in. When used during the initial page load with Server-Side Rendering (SSR), this will result in a server-side redirect.

```tsx
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

```jsx
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

--------------------------------

### Bootstrap the `with-cookies-next` Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md

These commands use `create-next-app` with different package managers (npx, Yarn, pnpm) to set up a new Next.js project that is pre-configured with the `with-cookies-next` example. This provides a ready-to-run application demonstrating cookie management.

```bash
npx create-next-app --example with-cookies-next with-cookies-next-app
```

```bash
yarn create next-app --example with-cookies-next with-cookies-next-app
```

```bash
pnpm create next-app --example with-cookies-next with-cookies-next-app
```

--------------------------------

### Bootstrap a Next.js Project with Jest

Source: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md

Use `create-next-app` to initialize a new Next.js application pre-configured with Jest. The example provides commands for npm, Yarn, and pnpm package managers.

```bash
npx create-next-app --example with-jest with-jest-app
```

```bash
yarn create next-app --example with-jest with-jest-app
```

```bash
pnpm create next-app --example with-jest with-jest-app
```

--------------------------------

### Bootstrap a Next.js App with the goober Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md

These commands use `create-next-app` to scaffold a new Next.js project pre-configured with the 'goober' css-in-js library. The example can be bootstrapped using npm, Yarn, or pnpm.

```bash
npx create-next-app --example with-goober with-goober-app
```

```bash
yarn create next-app --example with-goober with-goober-app
```

```bash
pnpm create next-app --example with-goober with-goober-app
```

--------------------------------

### Create Example Next.js Pages (App Router)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Create two simple pages using the Next.js App Router to serve as the basis for an E2E navigation test. This includes a home page and an about page, each with a link to the other.

```jsx
// app/page.js
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}

// app/about/page.js
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

--------------------------------

### Configure Supabase Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md

After creating the project, rename the `.env.example` file to `.env.local` and add your Supabase project URL and anonymous API key. These values are required for the application to connect to your Supabase backend and can be found in your Supabase project's API settings.

```env
NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
```

--------------------------------

### Install Playwright Dependencies in CI

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Prepare your Continuous Integration (CI) environment by installing all necessary browser binaries and system dependencies for Playwright. This command is required to ensure Playwright can run headlessly on CI servers.

```bash
npx playwright install-deps
```

--------------------------------

### Build and Run the App in Production Mode

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md

To test localization with translated message files, the application must be built and started in production mode. The 'build' command prepares the app, and the 'start' command runs the production server, which loads the appropriate 'lang/*.json' files based on browser language preferences.

```bash
npm run build
npm start
```

--------------------------------

### Load Movie Graph Data into Neo4j

Source: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md

This command is executed within a Neo4j environment, such as the Neo4j Browser or Cypher Shell, to load the sample movie graph dataset into the database. This dataset is required for the example application to function correctly.

```bash
:play movie-graph
```

--------------------------------

### Install the Next.js Dependency

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

This command uses npm to install the latest version of Next.js into an existing project. It is the first step in the migration process from Create React App to Next.js.

```bash
npm install next@latest
```

--------------------------------

### Configure package.json Scripts for a Custom Server

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx

To run a custom Next.js server, you must update the `scripts` in your `package.json`. These scripts define the commands for starting the server in development mode (`dev`) and production mode (`start`).

```json
{
  "scripts": {
    "dev": "node server.js",
    "build": "next build",
    "start": "NODE_ENV=production node server.js"
  }
}
```

--------------------------------

### Authenticate PlanetScale CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Authenticates the PlanetScale CLI to allow interaction with your PlanetScale account. This is a prerequisite for other PlanetScale CLI commands.

```shell
pscale auth login
```

--------------------------------

### Run the Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md

Start the Next.js development server using npm, Yarn, or pnpm. The application will become available at http://localhost:3000.

```bash
npm run dev
```

```bash
yarn dev
```

```bash
pnpm dev
```

--------------------------------

### Create Example Next.js Pages (Pages Router)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Create two simple pages using the Next.js Pages Router to serve as the basis for an E2E navigation test. This includes a home page and an about page, each with a link to the other.

```jsx
// pages/index.js
import Link from 'next/link'

export default function Home() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}

// pages/about.js
import Link from 'next/link'

export default function About() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

--------------------------------

### Bootstrap a Next.js App with Redux Toolkit

Source: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md

Use `create-next-app` with various package managers (npm, Yarn, pnpm) to set up a new Next.js project that includes the Redux Toolkit example. This command creates a new directory named 'with-redux-app' containing the pre-configured project.

```bash
npx create-next-app --example with-redux with-redux-app
```

```bash
yarn create next-app --example with-redux with-redux-app
```

```bash
pnpm create next-app --example with-redux with-redux-app
```

--------------------------------

### Install the @next/third-parties Library

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx

Install the experimental `@next/third-parties` package along with the latest version of Next.js using npm. This package provides components and utilities to improve the performance of third-party scripts.

```bash
npm install @next/third-parties@latest next@latest
```

--------------------------------

### Bootstrap Next.js/Zustand App with pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md

Initializes a new Next.js project using the `with-zustand` example template. This command, executed with pnpm, scaffolds the complete application into a new directory named `with-zustand-app`.

```bash
pnpm create next-app --example with-zustand with-zustand-app
```

--------------------------------

### Bootstrap Next.js/Zustand App with npx

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md

Initializes a new Next.js project using the `with-zustand` example template. This command, executed with npx, scaffolds the complete application into a new directory named `with-zustand-app`.

```bash
npx create-next-app --example with-zustand with-zustand-app
```

--------------------------------

### Configure DatoCMS Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md

An example of the `.env.local` file format. The `DATOCMS_API_TOKEN` is your read-only API token from DatoCMS. The `DATOCMS_PREVIEW_SECRET` is a random string you create to secure the Next.js preview mode endpoint.

```bash
DATOCMS_API_TOKEN=...
DATOCMS_PREVIEW_SECRET=...
```

--------------------------------

### Create PlanetScale Password

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md

Creates a new password for a specific branch of your PlanetScale database using the PlanetScale CLI. Replace placeholders with appropriate values.

```shell
pscale password create <DATABASE_NAME> <BRANCH_NAME> <PASSWORD_NAME>
```

--------------------------------

### Use React's `use` Hook and Context for Data Fetching in Next.js

Source: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx

This pattern demonstrates how to fetch data in a parent Server Component, pass the resulting promise down through a Context Provider, and then consume it in a child Client Component using the `use` hook. This allows data fetching to start early on the server and stream to the client. The example is split into three parts: the context provider, the parent server component, and the consuming client component.

```tsx
// File: app/context.tsx
'use client'

import { createContext, useContext } from 'react'

export const BlogContext = createContext<Promise<any> | null>(null)

export function BlogProvider({
  children,
  blogPromise,
}: {
  children: React.ReactNode
  blogPromise: Promise<any>
}) {
  return (
    <BlogContext.Provider value={blogPromise}>{children}</BlogContext.Provider>
  )
}

export function useBlogContext() {
  const context = useContext(BlogContext)
  if (!context) {
    throw new Error('useBlogContext must be used within a BlogProvider')
  }
  return context
}

// File: app/page.tsx
import { BlogProvider } from './context'

export default function Page() {
  const blogPromise = fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )

  return (
    <BlogProvider blogPromise={blogPromise}>
      <BlogPosts />
    </BlogProvider>
  )
}

// File: app/blog-posts.tsx
'use client'

import { use } from 'react'
import { useBlogContext } from './context'

export function BlogPosts() {
  const blogPromise = useBlogContext()
  const posts = use(blogPromise)

  return <div>{posts.length} blog posts</div>
}
```

--------------------------------

### Install Tailwind CSS Dependencies via Package Manager

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx

Install Tailwind CSS and its PostCSS plugin as development dependencies using your preferred package manager. These commands are for pnpm, npm, yarn, and bun respectively.

```bash
pnpm add -D tailwindcss @tailwindcss/postcss
```

```bash
npm install -D tailwindcss @tailwindcss/postcss
```

```bash
yarn add -D tailwindcss @tailwindcss/postcss
```

```bash
bun add -D tailwindcss @tailwindcss/postcss
```

--------------------------------

### Install Next.js Preview Build from a Pull Request

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md

Update `package.json` to install a preview build of Next.js associated with a specific pull request number. This allows for testing changes from a PR before it is merged.

```json
{
  "dependencies": {
    "next": "https://vercel-packages.vercel.app/next/prs/66445/next"
  }
}
```

--------------------------------

### Example SWC Abstract Syntax Tree Output

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-swc-ast-explorer/README.md

This is an example of the Abstract Syntax Tree (AST) generated by `swc-ast-explorer` for the code `console.log('hello')`. The output uses a Rust-like debug format to represent the hierarchical structure of the parsed code, including expressions, identifiers, and literals.

```rust
Script(
  Script {
    body: [
      Expr(
        ExprStmt {
          expr: Call(
            CallExpr {
              callee: Expr(
                Member(
                  MemberExpr {
                    obj: Ident(
                      Ident {
                        sym: Atom('console' type=inline),
                        optional: false,
                      },
                    ),
                    prop: Ident(
                      Ident {
                        sym: Atom('log' type=inline),
                        optional: false,
                      },
                    ),
                  },
                ),
              ),
              args: [
                ExprOrSpread {
                  spread: None,
                  expr: Lit(
                    Str(
                      Str {
                        value: Atom('hello' type=inline),
                        raw: Some(
                          "'hello'",
                        ),
                      },
                    ),
                  ),
                },
              ],
              type_args: None,
            },
          ),
        },
      ),
    ],
    shebang: None,
  },
)
```

--------------------------------

### Initialize Prisma with a database

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command initializes Prisma in the project, setting up the Prisma schema and connecting to a database. It might require the user to log in to Prisma Data Platform.

```bash
npx prisma init --db
```

--------------------------------

### Bootstrap Next.js Segment Analytics Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project pre-configured with Segment Analytics. This command clones the example for the Pages Router and sets up the necessary dependencies.

```bash
npx create-next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

```bash
yarn create next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

```bash
pnpm create next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

--------------------------------

### Create Dynamic Open Graph Image from External Data in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx

This snippet demonstrates how to generate a dynamic Open Graph image in a Next.js app route. It uses the `params` object to get a dynamic segment (e.g., a post slug), fetches corresponding data from an external API, and then uses `ImageResponse` to render JSX into a PNG image. The example exports metadata like `alt`, `size`, and `contentType` for the image.

```tsx
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }: { params: { slug: string } }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

```jsx
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

--------------------------------

### Install React Compiler Babel Plugin using npm

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/reactCompiler.mdx

Installs the `babel-plugin-react-compiler` package via npm. This plugin is essential for enabling the React Compiler in your Next.js project, providing the underlying Babel functionality for optimization.

```bash
npm install babel-plugin-react-compiler
```

--------------------------------

### Install Linux Dependencies for Rust

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md

On Linux systems, install the LLD linker and Clang compiler using `apt`. These packages are required dependencies for `rust-rocksdb`, which is used within the Next.js project.

```bash
sudo apt install lld clang
```

--------------------------------

### Install Sass Dependency

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx

To use Sass in a Next.js project, you first need to install the `sass` package as a development dependency using a package manager like npm.

```bash
npm install --save-dev sass
```

--------------------------------

### Bootstrap the Next.js with-lingui Example App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project pre-configured with Lingui for internationalization.

```bash
npx create-next-app --example with-lingui with-lingui-app
```

```bash
yarn create next-app --example with-lingui with-lingui-app
```

```bash
pnpm create next-app --example with-lingui with-lingui-app
```

--------------------------------

### Install web-push CLI and Generate VAPID Keys

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx

These terminal commands first install the `web-push` command-line interface globally via npm. Then, the `generate-vapid-keys` command is used to create the public and private VAPID keys required for the Web Push API.

```bash
npm install -g web-push

web-push generate-vapid-keys
```

--------------------------------

### Use an Edge API Route to Proxy Requests in Next.js

Source: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx

For use cases that previously used middleware to proxy requests, like forwarding headers to a backend API, the recommended approach is now Edge API Routes. This example shows an Edge API Route that reads a cookie from the incoming request and forwards it in the `authorization` header of a `fetch` call to an external service. The `runtime: 'edge'` config is required.

```typescript
import { type NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: NextRequest) {
  const authorization = req.cookies.get('authorization')
  return fetch('https://backend-api.com/api/protected', {
    method: req.method,
    headers: {
      authorization,
    },
    redirect: 'manual',
  })
}
```

--------------------------------

### Install the Next.js Canary Release

Source: https://github.com/vercel/next.js/blob/canary/errors/opening-an-issue.mdx

Use npm or yarn to install the latest daily canary build of Next.js. This is recommended to verify if an issue has already been fixed before submitting a new bug report.

```bash
npm install next@canary
```

```bash
yarn add next@canary
```

--------------------------------

### Implement End-to-End Tests in Next.js using `nextTestSetup`

Source: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt

This test suite demonstrates four methods for end-to-end testing a Next.js page using the `nextTestSetup` helper from `e2e-utils`. The tests cover using Cheerio for fast HTML parsing, a full browser instance for complex interactions, raw HTML string comparison, and the `fetch` API to inspect the HTTP response directly. Each `it` block represents a different testing approach for the same 'hello world' assertion.

```typescript
import { nextTestSetup } from 'e2e-utils'

describe('{{name}}', () => {
  const { next } = nextTestSetup({
    files: __dirname,
  })

  // Recommended for tests that check HTML. Cheerio is a HTML parser that has a jQuery like API.
  it('should work using cheerio', async () => {
    const $ = await next.render$('/')
    expect($('p').text()).toBe('hello world')
  })

  // Recommended for tests that need a full browser
  it('should work using browser', async () => {
    const browser = await next.browser('/')
    expect(await browser.elementByCss('p').text()).toBe('hello world')
  })

  // In case you need the full HTML. Can also use $.html() with cheerio.
  it('should work with html', async () => {
    const html = await next.render('/')
    expect(html).toContain('hello world')
  })

  // In case you need to test the response object
  it('should work with fetch', async () => {
    const res = await next.fetch('/')
    const html = await res.text()
    expect(html).toContain('hello world')
  })
})
```

--------------------------------

### Install Type Declarations for React and Node

Source: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md

Install the type declarations for React, ReactDOM, and Node as development dependencies to enable full TypeScript support and autocompletion for these libraries.

```shell
npm install --save-dev @types/react @types/react-dom @types/node
```

```shell
yarn install --save-dev @types/react @types/react-dom @types/node
```

```shell
pnpm install --save-dev @types/react @types/react-dom @types/node
```

--------------------------------

### Configure Next.js Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This example shows the environment variables required in a `.env` file for a Next.js application connecting to a headless WordPress backend. These variables define the frontend and backend URLs, a shared secret key, and user credentials for authenticated actions like post previews.

```bash
NEXT_PUBLIC_BASE_URL="http://localhost:3000"
NEXT_PUBLIC_WORDPRESS_API_URL="http://wp-domain.com"
NEXT_PUBLIC_WORDPRESS_API_HOSTNAME="wp-domain.com"
HEADLESS_SECRET="INSERT_RANDOM_SECRET_KEY"
WP_USER="username"
WP_APP_PASS="1234 5678 abcd efgh"
```

--------------------------------

### Manage Docker Environments using Makefile Commands

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md

Use the provided Makefile to build and start the application in different deployment environments. Each environment—development, staging, and production—has its own set of `build` and `start` commands, which run the application on different ports (3001, 3002, and 3003 respectively).

```makefile
# Development environment - for doing testing
make build-development
make start-development

# Staging environment - for doing UAT testing
make build-staging
make start-staging

# Production environment - for users
make build-production
make start-production
```

--------------------------------

### Navigate to the created Next.js application directory

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command navigates into the directory of the newly created Next.js application.

```bash
cd ./my-prisma-postgres-app
```

--------------------------------

### Bootstrap a Next.js App with Paste and TypeScript

Source: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md

Initialize a new Next.js project using the `with-paste-typescript` example. These commands demonstrate how to use `create-next-app` with npm, Yarn, and pnpm to set up the application.

```bash
npx create-next-app --example with-paste-typescript with-paste-typescript-app
```

```bash
yarn create next-app --example with-paste-typescript with-paste-typescript-app
```

```bash
pnpm create next-app --example with-paste-typescript with-paste-typescript-app
```

--------------------------------

### Run Next.js Development Server

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md

Commands to start the Next.js development server using npm, yarn, or bun.  Allows local development and testing of the Next.js application.

```bash
npm run dev
```

```bash
yarn dev
```

```bash
bun run dev
```

--------------------------------

### Bootstrap a Next.js Elasticsearch App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md

Use `create-next-app` to initialize a new project from the `with-elasticsearch` example. The commands for npm (via npx), Yarn, and pnpm are provided to bootstrap the application.

```bash
npx create-next-app --example with-elasticsearch with-elasticsearch-app
```

```bash
yarn create next-app --example with-elasticsearch with-elasticsearch-app
```

```bash
pnpm create next-app --example with-elasticsearch with-elasticsearch-app
```

--------------------------------

### Install Playwright and MSW Dependencies

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md

Install the necessary development dependencies for running Playwright tests. `@playwright/test` is required, and `msw` is an optional but helpful library for fetch mocking.

```sh
npm install -D @playwright/test
```

```sh
npm install -D msw
```

--------------------------------

### Link Local Project to Vercel (Bash)

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

Links the local project to the Vercel project after deployment. This allows for continuous deployment and management through the Vercel platform. Requires Vercel CLI to be installed.

```bash
npx vercel link
```

--------------------------------

### Bootstrap the Next.js with-reflux Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md

Use `create-next-app` to set up a new Next.js project pre-configured with the Reflux state management library. The command can be run using npx, Yarn, or pnpm.

```bash
npx create-next-app --example with-reflux with-reflux-app
```

```bash
yarn create next-app --example with-reflux with-reflux-app
```

```bash
pnpm create next-app --example with-reflux with-reflux-app
```

--------------------------------

### Bootstrap a Next.js Project with Vitest

Source: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to quickly set up a new Next.js application that is pre-configured for testing with Vitest. This command clones the `with-vitest` example repository.

```bash
npx create-next-app --example with-vitest with-vitest-app
```

```bash
yarn create next-app --example with-vitest with-vitest-app
```

```bash
pnpm create next-app --example with-vitest with-vitest-app
```

--------------------------------

### Install @next/bundle-analyzer with npm, yarn, or pnpm

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx

Install the `@next/bundle-analyzer` plugin for Next.js using your preferred package manager. This tool helps visualize the size of your application's JavaScript bundles and their dependencies.

```bash
npm i @next/bundle-analyzer
# or
yarn add @next/bundle-analyzer
# or
pnpm add @next/bundle-analyzer
```

--------------------------------

### Install the next-rspack package

Source: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md

Install the `next-rspack` package into your project using either npm or yarn. This package is required to integrate Rspack with Next.js.

```shell
npm install next-rspack
```

```shell
yarn add next-rspack
```

--------------------------------

### Create Next.js app with npm

Source: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md

This command uses npm to create a new Next.js app using the reproduction template. It initializes a project named 'reproduction-app' based on the specified example.

```bash
npx create-next-app --example reproduction-template-pages reproduction-app
```

--------------------------------

### Install MDX Dependency for Next.js `app` Directory

Source: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md

For usage with the Next.js `app` directory, install only the `@next/mdx` package. You can use either npm or yarn.

```npm
npm install @next/mdx
```

```yarn
yarn add @next/mdx
```

--------------------------------

### Install Vitest Dependencies Manually

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx

Install Vitest and its required peer dependencies for a Next.js project as development dependencies. This includes `@vitejs/plugin-react` for React support and `jsdom` for a test environment. Separate commands are provided for TypeScript and JavaScript projects.

```bash
# Using TypeScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths
```

```bash
# Using JavaScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom
```

--------------------------------

### Build the Stencil Component for Production

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md

Execute the `npm run build` command to compile the component, creating optimized and minified files suitable for a production environment. The output is typically placed in a `dist/` directory.

```bash
npm run build
```

--------------------------------

### Bootstrap a Next.js Convex App

Source: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md

Initialize a new Next.js project pre-configured with the Convex example using npx, Yarn, or pnpm. This command sets up the basic project structure and dependencies.

```bash
npx create-next-app --example convex convex-app
```

```bash
yarn create next-app --example convex convex-app
```

```bash
pnpm create next-app --example convex convex-app
```

--------------------------------

### Update Sharp at a Custom Path

Source: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx

If you use the `NEXT_SHARP_PATH` environment variable to point to a specific `sharp` installation, you must update that specific installation. Navigate to its parent directory and run the update command.

```bash
cd "$NEXT_SHARP_PATH/../" && npm i sharp@latest
```

--------------------------------

### Bootstrap Next.js/Zustand App with Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md

Initializes a new Next.js project using the `with-zustand` example template. This command, executed with Yarn, scaffolds the complete application into a new directory named `with-zustand-app`.

```bash
yarn create next-app --example with-zustand with-zustand-app
```

--------------------------------

### Bootstrap a Next.js App with Xata Integration

Source: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md

Use `create-next-app` with the `with-xata` example to quickly set up a new Next.js project pre-configured for use with Xata. The commands are provided for npm, Yarn, and pnpm package managers.

```Shell
npx create-next-app --example with-xata with-xata-app
```

```Shell
yarn create next-app --example with-xata with-xata-app
```

```Shell
pnpm create next-app --example with-xata with-xata-app
```

--------------------------------

### Install TypeScript as a Dev Dependency

Source: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md

Install TypeScript as a development dependency to enable its features in your Next.js project. Next.js has built-in support and will automatically configure it on the next run.

```shell
npm install --save-dev typescript
```

```shell
yarn install --save-dev typescript
```

```shell
pnpm install --save-dev typescript
```

--------------------------------

### Run Next.js Codemod for NextRequest Geo/IP Properties

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx

This command executes the `next-request-geo-ip` codemod. It installs `@vercel/functions` and transforms the usage of `geo` and `ip` properties from `NextRequest` to use the corresponding functions from the newly installed package.

```bash
npx @next/codemod@latest next-request-geo-ip .
```

--------------------------------

### Install the Next.js ESLint Plugin

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/03-eslint.mdx

Install the `@next/eslint-plugin-next` package in your project using your preferred package manager (npm, yarn, pnpm, or bun). This plugin is essential for enforcing Next.js-specific linting rules.

```bash
npm install --save-dev @next/eslint-plugin-next
```

```bash
yarn add --dev @next/eslint-plugin-next
```

```bash
pnpm add --save-dev @next/eslint-plugin-next
```

```bash
bun add --dev @next/eslint-plugin-next
```

--------------------------------

### Compile Rust to WebAssembly

Source: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md

Execute the build script to compile the Rust source code (e.g., `src/add.rs`) into a WebAssembly module (`add.wasm`). This command can be run using npm, Yarn, or pnpm.

```bash
npm run build-rust
```

```bash
yarn build-rust
```

```bash
pnpm build-rust
```

--------------------------------

### Build and Use a Local WASM Binary

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md

This multi-step process allows you to build a local WebAssembly (WASM) version of `@next/swc`, copy it into your project, and run Next.js while forcing it to use the WASM binary. This requires `wasm-pack` and a Rust installation.

```bash
# 1. Build the WASM package (requires wasm-pack)
pnpm --filter=@next/swc build-wasm --target <wasm_target>

# 2. Copy the artifact to node_modules
node ./scripts/setup-wasm.mjs

# 3. Run a Next.js command (e.g., dev server) forcing WASM usage
NODE_OPTIONS='--no-addons' pnpm next dev
```

--------------------------------

### Create a Next.js App with Biome Integration

Source: https://github.com/vercel/next.js/blob/canary/examples/with-biome/README.md

Bootstrap a new Next.js application pre-configured with Biome using `create-next-app`. These commands demonstrate how to use npm, Yarn, and pnpm to clone the 'with-biome' example.

```bash
npx create-next-app --example with-biome with-biome-app
```

```bash
yarn create next-app --example with-biome with-biome-app
```

```bash
pnpm create next-app --example with-biome with-biome-app
```

--------------------------------

### Bootstrap a Next.js Project with Jest and Babel

Source: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md

Use `create-next-app` to scaffold a new Next.js application from the `with-jest-babel` example. This sets up a project pre-configured for testing with Jest and Babel. Commands are provided for npm, Yarn, and pnpm.

```bash
npx create-next-app --example with-jest-babel with-jest-babel-app
```

```bash
yarn create next-app --example with-jest-babel with-jest-babel-app
```

```bash
pnpm create next-app --example with-jest-babel with-jest-babel-app
```

--------------------------------

### Bootstrap a Next.js with Contentlayer App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md

These commands create a new Next.js application using the `with-contentlayer` example. You can use your preferred package manager (npm, Yarn, or pnpm) to bootstrap the project.

```bash
npx create-next-app --example with-contentlayer with-contentlayer-app
```

```bash
yarn create next-app --example with-contentlayer with-contentlayer-app
```

```bash
pnpm create next-app --example with-contentlayer with-contentlayer-app
```

--------------------------------

### Example Turbopack Entrypoints Manifest

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md

This configuration block outlines the entrypoints for a Turbopack bundle. It maps functionalities like module evaluation and specific function exports (`getEnv`, `getEnvWithoutDefaults`) to their corresponding integer identifiers within the compiled module graph.

```text
{
    ModuleEvaluation: 3,
    Export(
        "getEnv",
    ): 5,
    Export(
        "getEnvWithoutDefaults",
    ): 6,
    Exports: 7,
}
```

--------------------------------

### Install Cypress as a Dev Dependency

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Manually add Cypress to your Next.js project as a development dependency using your preferred package manager (npm, yarn, or pnpm).

```bash
npm install -D cypress
# or
yarn add -D cypress
# or
pnpm install -D cypress
```

--------------------------------

### Run Firebase Locally for Testing

Source: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md

These commands start a local Firebase server, allowing you to test the Next.js application in an environment that emulates Firebase Hosting and Cloud Functions.

```bash
npm run serve
```

```bash
yarn serve
```

--------------------------------

### Define Module Entrypoints Configuration

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md

An example of a custom configuration format, likely for the Turbopack bundler, specifying module entrypoints. It maps named exports like 'DOG' and 'cat' to internal module indices for evaluation.

```text
{
    ModuleEvaluation: 3,
    Export(
        "DOG",
    ): 0,
    Export(
        "cat",
    ): 1,
    Exports: 2,
}
```

--------------------------------

### Bootstrap a Next.js App with the styled-jsx Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md

Use create-next-app with your preferred package manager (npm, Yarn, or pnpm) to set up a new Next.js project that demonstrates the use of styled-jsx for component-scoped styling.

```bash
npx create-next-app --example with-styled-jsx with-styled-jsx-app
```

```bash
yarn create next-app --example with-styled-jsx with-styled-jsx-app
```

```bash
pnpm create next-app --example with-styled-jsx with-styled-jsx-app
```

--------------------------------

### Install Next Compose Plugins and Transpile Modules

Source: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md

This command installs the necessary packages for transpiling modules that may not be compatible with Next.js by default. It uses yarn to add next-compose-plugins and next-transpile-modules as development dependencies.

```sh
yarn add -D next-compose-plugins next-transpile-modules
```

--------------------------------

### Install the Canary Release of Next.js

Source: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md

Use this npm command to explicitly install the canary version of Next.js. This channel contains the latest changes and is used to test new features and bugfixes in real-world applications before they reach the stable channel.

```shell
npm install next@canary
```

--------------------------------

### Define Contentful Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md

This is an example structure for the `.env.local` file. You must replace the placeholders with your actual Contentful Space ID, Access Token, Preview Access Token, and custom secret values for previewing and revalidation.

```bash
CONTENTFUL_SPACE_ID=...
CONTENTFUL_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_SECRET=...
CONTENTFUL_REVALIDATE_SECRET=...
```

--------------------------------

### Integrate a Stencil Component into an Application

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md

Demonstrates multiple methods for using a compiled Stencil component. It can be loaded directly in HTML using a `<script>` tag from a CDN or local `node_modules`, or it can be installed via npm and imported into a JavaScript/TypeScript module for use in another Stencil app.

```html
<!-- Load component from a CDN like unpkg -->
<script src='https://unpkg.com/my-component@0.0.1/dist/mycomponent.js'></script>
```

```html
<!-- Load component from local node_modules -->
<script src='node_modules/my-component/dist/mycomponent.js'></script>
```

```bash
# Install the component via npm
npm install my-component
```

```javascript
// Import the component in a Stencil app
import my-component;
```

--------------------------------

### Bootstrap a Next.js Mantine App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md

These commands bootstrap a new Next.js application pre-configured with the Mantine component library. Use the appropriate command for your preferred package manager (npm, Yarn, or pnpm) to create a new project folder named 'with-mantine-app'.

```bash
npx create-next-app --example with-mantine with-mantine-app
```

```bash
yarn create next-app --example with-mantine with-mantine-app
```

```bash
pnpm create next-app --example with-mantine with-mantine-app
```

--------------------------------

### Bootstrap a Next.js MDBReact App

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to quickly set up a new Next.js project that includes MDBReact. This command clones the `with-mdbreact` example repository and initializes a new application in a directory named `with-mdbreact-app`.

```bash
npx create-next-app --example with-mdbreact with-mdbreact-app
```

```bash
yarn create next-app --example with-mdbreact with-mdbreact-app
```

```bash
pnpm create next-app --example with-mdbreact with-mdbreact-app
```

--------------------------------

### Configure Biome linting and formatting scripts in Next.js package.json

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet demonstrates how to integrate Biome for fast linting and formatting into your Next.js project's `package.json`. It includes scripts for checking code quality and automatically formatting files.

```json
{
  "scripts": {
    "lint": "biome check",
    "format": "biome format --write"
  }
}
```

--------------------------------

### Bootstrap a Next.js App with Grafbase

Source: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md

Use `create-next-app` with npm, Yarn, or pnpm to initialize a new Next.js project pre-configured with the Grafbase example. This command downloads the template and sets up the basic project structure.

```bash
npx create-next-app --example with-grafbase with-grafbase-app
```

```bash
yarn create next-app --example with-grafbase with-grafbase-app
```

```bash
pnpm create next-app --example with-grafbase with-grafbase-app
```

--------------------------------

### Example of Markdown to HTML Conversion

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx

This example illustrates how basic Markdown syntax is converted into structurally valid HTML. Markdown's plain text formatting for bold text and hyperlinks is automatically transformed into the corresponding HTML `<strong>` and `<a>` tags.

```markdown
I **love** using [Next.js](https://nextjs.org/)
```

```html
<p>I <strong>love</strong> using <a href="https://nextjs.org/">Next.js</a></p>
```

--------------------------------

### Format single and multi-line notes in MDX

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

Demonstrates the MDX syntax for creating both single-line and multi-line 'Good to know' notes, which are used for important but non-critical information within the documentation.

```mdx
> **Good to know**: This is a single line note.

> **Good to know**:
>
> - We also use this format for multi-line notes.
> - There are sometimes multiple items worth knowing or keeping in mind.
```

--------------------------------

### Create Next.js App Router Home Page Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet illustrates how to create a basic home page (`/`) for a Next.js application using the App Router. The `Page` component is a default export that returns an `h1` element, rendering 'Hello, Next.js!' as its content.

```tsx
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

```jsx
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

--------------------------------

### Configure Userbase Environment Variable

Source: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md

Set the `NEXT_PUBLIC_USERBASE_APP_ID` variable in your `.env.local` file. This ID is required for the application to connect to your Userbase account and can be found in your Userbase dashboard.

```bash
NEXT_PUBLIC_USERBASE_APP_ID=...
```

--------------------------------

### Create Next.js app with Yarn

Source: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md

This command uses Yarn to create a new Next.js app using the reproduction template. It initializes a project named 'reproduction-app' based on the specified example.

```bash
yarn create next-app --example reproduction-template-pages reproduction-app
```

--------------------------------

### Create Next.js app with pnpm

Source: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md

This command uses pnpm to create a new Next.js app using the reproduction template. It initializes a project named 'reproduction-app' based on the specified example.

```bash
pnpm create next-app --example reproduction-template-pages reproduction-app
```

--------------------------------

### Enable Caching for a GET Route Handler

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx

By default, Route Handlers are not cached. You can opt into caching for GET requests by exporting a `dynamic` constant with the value `'force-static'`. This configuration caches the response of the GET method, making the route handler behave statically, while other HTTP methods remain dynamic.

```typescript
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

```javascript
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

--------------------------------

### Bootstrap Next.js with React Hook Form Example

Source: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md

Use `create-next-app` with your preferred package manager (npx, Yarn, or pnpm) to bootstrap the `with-react-hook-form` example. This command creates a new Next.js application in a directory named `with-react-hook-form-app`, pre-configured to demonstrate the integration.

```bash
npx create-next-app --example with-react-hook-form with-react-hook-form-app
```

```bash
yarn create next-app --example with-react-hook-form with-react-hook-form-app
```

```bash
pnpm create next-app --example with-react-hook-form with-react-hook-form-app
```

--------------------------------

### Type API Routes in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx

These examples demonstrate how to add types to Next.js API route handlers. The first example uses the built-in `NextApiRequest` and `NextApiResponse` types for basic type safety. The second example enhances this by defining a custom `Data` type and applying it to the response with `NextApiResponse<Data>` for strongly-typed JSON responses.

```typescript
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ name: 'John Doe' })
}
```

```typescript
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}
```

--------------------------------

### Run Knex Migrations

Source: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md

Runs the latest database migrations using Knex via npm, Yarn or pnpm. This applies schema changes to the Postgres database. The migrations are defined in the knex/migrations folder. It expects Knex to be configured and the database connection to be available.

```bash
npm run migrate:latest
```

```bash
yarn migrate:latest
```

```bash
pnpm migrate:latest
```

--------------------------------

### Migrate the database using Prisma

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command applies the database migrations defined in the Prisma schema to the database.  Different package managers can be used.

```bash
npx prisma migrate dev --name init
```

```bash
yarn prisma migrate dev --name init
```

```bash
pnpm prisma migrate dev --name init
```

```bash
bun prisma migrate dev --name init
```

--------------------------------

### Import Custom Matchers in Jest Setup File

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

Import `@testing-library/jest-dom` in your Jest setup file (`jest.setup.ts` or `jest.setup.js`) to make its custom matchers, like `.toBeInTheDocument()`, available globally across all your test files.

```typescript
import '@testing-library/jest-dom'
```

```javascript
import '@testing-library/jest-dom'
```

--------------------------------

### Example Terminal Warning for an Invalid Property

Source: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx

This is an example of a warning message displayed in the terminal when Next.js detects an unknown property in `next.config.js`. In this specific case, `rewritess` is a typo and should be corrected to `rewrites`.

```bash
The root value has an unexpected property, rewritess, which is not in the list of allowed properties
```

--------------------------------

### Bootstrap a Next.js App with Flow

Source: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with Flow for static type checking. The example can be bootstrapped using npx, Yarn, or pnpm.

```bash
npx create-next-app --example with-flow with-flow-app
```

```bash
yarn create next-app --example with-flow with-flow-app
```

```bash
pnpm create next-app --example with-flow with-flow-app
```

--------------------------------

### GET, POST /api/items

Source: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md

Endpoints for retrieving a list of all todo items and for creating a new todo item.

```APIDOC
## GET /api/items

### Description
Retrieves an array of all todo items.

### Method
GET

### Endpoint
`/api/items`

### Parameters
None

### Response
#### Success Response (200)
Returns an array of `TodoItem` objects.
- **id** (integer) - The unique identifier for the todo item.
- **text** (string) - The content of the todo item.
- **completed** (boolean) - The completion status of the todo item.

#### Response Example
```json
[
  {
    "id": 1,
    "text": "Learn Tigris",
    "completed": false
  }
]
```

---

## POST /api/items

### Description
Adds a new todo item to the list.

### Method
POST

### Endpoint
`/api/items`

### Parameters
#### Request Body
- **text** (string) - Required - The content of the todo item.

### Request Example
```json
{
  "text": "Build a Next.js app"
}
```

### Response
#### Success Response (201)
Returns the newly created `TodoItem`.
- **id** (integer) - The unique identifier for the todo item.
- **text** (string) - The content of the todo item.
- **completed** (boolean) - The completion status of the todo item.

#### Response Example
```json
{
  "id": 2,
  "text": "Build a Next.js app",
  "completed": false
}
```
```

--------------------------------

### Configure Website URL for Sitemap

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md

Set the WEBSITE_URL environment variable in the .env file. This value is used to construct the absolute URLs within the generated sitemap.xml file and should be replaced with your production domain.

```bash
# Used to add the domain to sitemap.xml, replace it with a real domain in production
WEBSITE_URL=https://my-domain.com
```

--------------------------------

### Clean the Project

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md

Use this command to remove all build artifacts and clean the project directory. This is useful for starting a fresh build or troubleshooting build-related issues.

```bash
pnpm clean
```

--------------------------------

### Example MDX Page with a React Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx

This example shows the content of an `.mdx` file that functions as a page in a Next.js application. It combines standard markdown for text formatting (headers, bold, lists) with JSX syntax, allowing for the direct import and rendering of a React component, `<MyComponent />`.

```mdx
import { MyComponent } from 'my-component'

# Welcome to my MDX page!

This is some **bold** and _italics_ text.

This is a list in markdown:

- One
- Two
- Three

Checkout my React component:

<MyComponent />
```

--------------------------------

### Bootstrap a Next.js App with Chakra UI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with Chakra UI and TypeScript. The command can be executed with npx (npm), Yarn, or pnpm by specifying the `with-chakra-ui` example.

```bash
npx create-next-app --example with-chakra-ui with-chakra-ui-app
```

```bash
yarn create next-app --example with-chakra-ui with-chakra-ui-app
```

```bash
pnpm create next-app --example with-chakra-ui with-chakra-ui-app
```

--------------------------------

### Install @next/env package for Next.js environment variable loading

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx

Command to install the `@next/env` package using npm. This package is used for loading environment variables outside the Next.js runtime.

```bash
npm install @next/env
```

--------------------------------

### Seed the Prisma Database with bun

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command uses the bun runtime to execute the Prisma `db seed` command. This process populates the database with the initial data defined in the project's seed script.

```bash
bun prisma db seed
```

--------------------------------

### Run Next.js Standalone Production Server Locally

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/output.mdx

This command starts the minimal `server.js` generated by Next.js's standalone build process, allowing you to test the production server locally. It runs the application using Node.js directly from the `.next/standalone` directory, replicating the production environment.

```bash
node .next/standalone/server.js
```

--------------------------------

### Navigate to a Predefined Route with router.push

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx

This example shows how to use `router.push` inside a button's `onClick` handler to programmatically navigate to a static page, such as `/about`.

```jsx
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/about')}>
      Click me
    </button>
  )
}
```

--------------------------------

### Create Next.js app using create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md

This command uses create-next-app to bootstrap a new Next.js application using the reproduction-template. It allows users to quickly set up a minimal project for demonstrating bugs or issues in Next.js. The project name is specified as 'reproduction-app'.

```bash
npx create-next-app --example reproduction-template reproduction-app
```

```bash
yarn create next-app --example reproduction-template reproduction-app
```

```bash
pnpm create next-app --example reproduction-template reproduction-app
```

--------------------------------

### Bootstrap a Next.js Project with Stencil.js

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md

These commands use `create-next-app` to scaffold a new project based on the `with-stencil` example. The commands are provided for npm, Yarn, and pnpm package managers, allowing you to quickly set up the monorepo environment containing both the Next.js app and the Stencil components.

```bash
npx create-next-app --example with-stencil with-stencil-app
```

```bash
yarn create next-app --example with-stencil with-stencil-app
```

```bash
pnpm create next-app --example with-stencil with-stencil-app
```

--------------------------------

### Directory Structure for MDX Integration

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx

Shows the recommended file layout for using MDX in a Next.js project. Separate examples are provided for the App Router (`/app`) and the Pages Router (`/pages`).

```text
  .
  ├── app/
  │   └── mdx-page/
  │       └── page.(tsx/js)
  ├── markdown/
  │   └── welcome.(mdx/md)
  ├── mdx-components.(tsx/js)
  └── package.json
```

```text
  .
  ├── markdown/
  │   └── welcome.(mdx/md)
  ├── pages/
  │   └── mdx-page.(tsx/js)
  ├── mdx-components.(tsx/js)
  └── package.json
```

--------------------------------

### Bootstrap Project with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md

Use `create-next-app` with your preferred package manager (npx, yarn, or pnpm) to quickly bootstrap a new Next.js application based on the ButterCMS example. This is an alternative to cloning the repository manually.

```bash
npx create-next-app --example cms-buttercms cms-buttercms-app
```

```bash
yarn create next-app --example cms-buttercms cms-buttercms-app
```

```bash
pnpm create next-app --example cms-buttercms cms-buttercms-app
```

--------------------------------

### Run Neo4j Database with Docker to Load Graph

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-static/readme.md

This command starts a Neo4j graph database instance using Docker. It maps the necessary ports (7474 for the web UI, 7687 for the Bolt protocol) and mounts a local volume for data persistence. Once running, you can load the `graph.cypherl` file into this database.

```bash
docker run \
    --publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    neo4j
```

--------------------------------

### Create Basic Page Links with the Next.js Link Component

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx

This example demonstrates creating basic client-side navigation using the `Link` component from `next/link`. Each `Link` component wraps an anchor tag and uses the `href` prop to map to a specific page file within the `pages` directory.

```jsx
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link href="/">Home</Link>
      </li>
      <li>
        <Link href="/about">About Us</Link>
      </li>
      <li>
        <Link href="/blog/hello-world">Blog Post</Link>
      </li>
    </ul>
  )
}

export default Home
```

--------------------------------

### Example of Deprecated `next/dynamic` Multi-Module Loading

Source: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx

This example shows the deprecated pattern for loading multiple components at once using `next/dynamic`. It utilizes the `modules` and `render` properties, a pattern that is no longer supported and should be migrated to align with React's standard lazy loading behavior.

```jsx
import dynamic from 'next/dynamic'

const HelloBundle = dynamic({
  modules: () => {
    const components = {
      Hello1: () => import('../components/hello1').then((m) => m.default),
      Hello2: () => import('../components/hello2').then((m) => m.default),
    }

    return components
  },
  render: (props, { Hello1, Hello2 }) => (
    <div>
      <h1>{props.title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  ),
})

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

--------------------------------

### Bootstrap a Next.js Project with Absolute Imports

Source: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md

These commands use `create-next-app` to set up a new Next.js project based on the 'with-absolute-imports' example. Commands are provided for the npm, Yarn, and pnpm package managers.

```bash
npx create-next-app --example with-absolute-imports with-absolute-imports-app
```

```bash
yarn create next-app --example with-absolute-imports with-absolute-imports-app
```

```bash
pnpm create next-app --example with-absolute-imports with-absolute-imports-app
```

--------------------------------

### Import Content Models and Data into Kontent.ai

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md

These shell commands are used to import content models and data into your Kontent.ai project. First, install the Kontent.ai Backup Manager globally using npm. Then, run the `kbm` command to restore data from a backup file, replacing the placeholders with your Project ID and Management API key.

```sh
npm i -g @kontent-ai/backup-manager
kbm --action=restore --apiKey=<Management API key> --projectId=<Project ID> --zipFilename=kontent-ai-backup
```

--------------------------------

### Run Benchmarks Comparing Turbopack to Other Bundlers

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md

This command runs a comparative benchmark by testing both `turbopack-bench` and `turbopack-cli`. This setup is used to generate the performance numbers that compare Turbopack against other bundlers for publication.

```sh
cargo bench -p turbopack-bench -p turbopack-cli
```

--------------------------------

### Configure Basic Rewrites in next.config.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/rewrites.mdx

This example demonstrates a basic rewrite configuration in `next.config.js`. An async `rewrites` function returns an array of objects, each defining a `source` path and a `destination` path. In this case, a request to `/about` will serve the content from the root path `/`.

```javascript
module.exports = {
  async rewrites() {
    return [
      {
        source: '/about',
        destination: '/',
      },
    ]
  },
}
```

--------------------------------

### Awaiting Connection in a Next.js GET Route Handler

Source: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx

To prevent errors when accessing the `Request` object in a Next.js `GET` handler, you must first `await connection()`. This explicitly marks the route as dynamic, allowing you to safely access request properties like headers. This is necessary because Next.js attempts to prerender `GET` handlers by default.

```javascript
import { connection } from 'next/server'

export default async function GET(request) {
  await connection()
  const requestHeaders = request.headers
  return ...
}
```

--------------------------------

### Define Next.js Configuration as a Function

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/index.mdx

Illustrates how to export a function from `next.config.mjs` to dynamically create the configuration. This function receives the current `phase` and `defaultConfig` as arguments, allowing for more flexible setups.

```javascript
// @ts-check

export default (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}
```

--------------------------------

### Run Unit Tests for the Stencil Component

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md

Run the `npm test` command in your terminal to execute the suite of unit tests configured for the component, helping to ensure its functionality is correct and prevent regressions.

```bash
npm test
```

--------------------------------

### GET /api/items/search

Source: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md

Endpoint for searching todo items based on a query string.

```APIDOC
## GET /api/items/search

### Description
Finds and returns todo items matching the given query string.

### Method
GET

### Endpoint
`/api/items/search`

### Parameters
#### Query Parameters
- **q** (string) - Required - The search query to match against todo item text.

### Response
#### Success Response (200)
Returns an array of matching `TodoItem` objects.
- **id** (integer) - The unique identifier for the todo item.
- **text** (string) - The content of the todo item.
- **completed** (boolean) - The completion status of the todo item.

#### Response Example
```json
[
  {
    "id": 1,
    "text": "Learn Tigris",
    "completed": false
  }
]
```
```

--------------------------------

### GET /api

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

A simple API endpoint that demonstrates how to perform a server-side redirect using Next.js Route Handlers. Any request to this endpoint will be immediately redirected to an external URL.

```APIDOC
## GET /api

### Description
This endpoint immediately redirects any incoming request to `https://nextjs.org/`. It serves as a basic example of using the `redirect` function within a Route Handler.

### Method
GET

### Endpoint
/api

### Parameters
None

### Response
#### Success Response (307/308)
The server responds with a redirect to `https://nextjs.org/`. The response body is empty.
```

--------------------------------

### Migrate Next.js lint configuration to ESLint CLI using codemod

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This command shows how to use the Next.js codemod to migrate a project that previously used `next lint` to the direct ESLint CLI. This is necessary for projects transitioning to direct ESLint script invocation.

```bash
npx @next/codemod@canary next-lint-to-eslint-cli .
```

--------------------------------

### Install MDX Dependencies for Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx

This command installs the packages required to render MDX content within a Next.js application. `@next/mdx` provides the core integration, while `@mdx-js/loader` and `@mdx-js/react` handle MDX processing and rendering. The `@types/mdx` package is included for TypeScript support.

```bash
npm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx
```

--------------------------------

### Configure Tailwind CSS Content Array for Specific Files (Good Example)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx

Define the 'content' array in 'tailwind.config.js' to explicitly scan relevant files for Tailwind classes. This example shows a good practice to target specific source files and avoid scanning unnecessary directories like 'node_modules'.

```javascript
module.exports = {
  content: [
    './src/**/*.{js,ts,jsx,tsx}', // Good
    // This might be too broad
    // It will match `packages/**/node_modules` too
    // '../../packages/**/*.{js,ts,jsx,tsx}',
  ],
}
```

--------------------------------

### Link Project with a Xata Workspace

Source: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md

Run the `xata init` command to link your local project with a Xata workspace. This command can be executed using the globally installed Xata CLI or with `npx`.

```Shell
xata init
```

--------------------------------

### Get All Cookies with NextResponse in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx

Illustrates how to retrieve all cookies from a response using `cookies.getAll()`. The method can also be passed a name to get all cookies that share that specific name, returning an array of cookie objects.

```typescript
// Given incoming request /home
let response = NextResponse.next()
// [
//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },
//   { name: 'experiments', value: 'winter-launch', Path: '/home' },
// ]
response.cookies.getAll('experiments')
// Alternatively, get all cookies for the response
response.cookies.getAll()
```

--------------------------------

### Run devlow-bench from the Command Line

Source: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md

Shows the command-line interface usage for `devlow-bench`. It includes options for selecting scenarios, filtering by properties, and specifying output formats like JSON, console, or direct upload to Datadog.

```bash
Usage: devlow-bench [options] <scenario files>
## Selecting scenarios
  --scenario=<filter>, -s=<filter>   Only run the scenario with the given name
  --interactive, -i                  Select scenarios and variants interactively
  --<prop>=<value>                   Filter by any variant property defined in scenarios
## Output
  --json=<path>, -j=<path>           Write the results to the given path as JSON
  --console                          Print the results to the console
  --datadog[=<hostname>]             Upload the results to Datadog
                                     (requires DATADOG_API_KEY environment variables)
## Help
  --help, -h, -?                     Show this help
```

--------------------------------

### Perform Automated Browser Operations

Source: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md

Example of using the `devlow-bench/browser` module to automate browser actions. This snippet shows how to create a new session, perform hard navigations, reloads, soft navigations by clicking an element, and closing the session.

```javascript
import { newBrowserSession } from 'devlow-bench/browser'

const session = await newBrowserSession({
  // options
})
await session.hardNavigation('metric name', 'https://example.com')
await session.reload('metric name')
await session.softNavigationByClick('metric name', '.selector-to-click')
await session.close()
```

--------------------------------

### Link Between Pages in Next.js using the Link Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx

This example demonstrates how to create navigation links between pages using the Next.js `<Link>` component. The component is imported from `next/link` and used to wrap an `<a>` tag, enabling client-side navigation and prefetching for improved performance.

```tsx
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

```jsx
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

--------------------------------

### Bootstrap Next.js YouTube Embed App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to initialize a new Next.js project from the `with-youtube-embed` example. This command creates a new directory named `with-youtube-embed-app` containing the pre-configured application.

```bash
npx create-next-app --example with-youtube-embed with-youtube-embed-app
```

```bash
yarn create next-app --example with-youtube-embed with-youtube-embed-app
```

```bash
pnpm create next-app --example with-youtube-embed with-youtube-embed-app
```

--------------------------------

### Initialize OpenTelemetry NodeSDK for Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx

Provides the implementation for `instrumentation.node.ts` (or `.js`) to initialize the OpenTelemetry NodeSDK. It configures the service name, sets up a simple span processor with an OTLP trace exporter, and starts the SDK to begin collecting telemetry data.

```typescript
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { resourceFromAttributes } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: resourceFromAttributes({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

```javascript
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { resourceFromAttributes } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: resourceFromAttributes({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

--------------------------------

### Bootstrap an i18n Next.js App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md

These commands use `create-next-app` to initialize a new Next.js project from the `i18n-routing-pages` example. This provides a quick way to set up a project pre-configured with internationalization features using your preferred package manager (npx, Yarn, or pnpm).

```bash
npx create-next-app --example i18n-routing-pages i18n-routing-pages-app
```

```bash
yarn create next-app --example i18n-routing-pages i18n-routing-pages-app
```

```bash
pnpm create next-app --example i18n-routing-pages i18n-routing-pages-app
```

--------------------------------

### Update Sharp to the Latest Version

Source: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx

To fix the AVIF support issue, run this command in your project directory to install the latest version of the `sharp` package. This is the most common and recommended solution.

```bash
npm i sharp@latest
```

--------------------------------

### Run Next.js Production Environment with Docker Compose

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md

These commands create a Docker network, build the production environment using the compose.prod.yaml file, and then start the production environment in detached mode. It leverages multistage builds for smaller image sizes.

```bash
# Create a network, which allows containers to communicate
# with each other, by using their container name as a hostname
docker network create my_network

# Build prod
docker compose -f compose.prod.yaml build

# Up prod in detached mode
docker compose -f compose.prod.yaml up -d
```

--------------------------------

### Seed the database using Prisma

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command seeds the database with initial data, as defined in the prisma/seed.ts file. Different package managers can be used.

```bash
npx prisma db seed
```

```bash
yarn prisma db seed
```

```bash
pnpm prisma db seed
```

--------------------------------

### Generate Taxonomy API in WordPress

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This function generates an array of taxonomy URLs (categories or tags) based on user inputs. It uses `wsra_get_user_inputs` to fetch arguments and taxonomy type. It returns an array of URLs.

```php
function wsra_generate_taxonomy_api()
{
  [$args,, $taxonomy] = wsra_get_user_inputs();
  $taxonomy_urls = array();
  $taxonomys = $taxonomy == 'tag' ? get_tags($args) : get_categories($args);
  foreach ($taxonomys as $taxonomy) {
    $fullUrl = esc_url(get_category_link($taxonomy->term_id));
    $url = str_replace(home_url(), '', $fullUrl);
    $tempArray = [
      'url' => $url,
    ];
    array_push($taxonomy_urls, $tempArray);
  }
  return array_merge($taxonomy_urls);
}
```

--------------------------------

### Bootstrap a Next.js Payload CMS App

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to set up a new project based on the `cms-payload` example. This command scaffolds a complete Next.js application integrated with Payload CMS for a serverless environment.

```bash
npx create-next-app --example cms-payload cms-payload-app
```

```bash
yarn create next-app --example cms-payload cms-payload-app
```

```bash
pnpm create next-app --example cms-payload cms-payload-app
```

--------------------------------

### Bootstrap a Static Export Next.js App using create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md

These commands bootstrap a new Next.js application using the `with-static-export` example. The same outcome can be achieved using npx (for npm), Yarn, or pnpm, creating a new project in a directory named `with-static-export-app`.

```bash
npx create-next-app --example with-static-export with-static-export-app
```

```bash
yarn create next-app --example with-static-export with-static-export-app
```

```bash
pnpm create next-app --example with-static-export with-static-export-app
```

--------------------------------

### Create a Static `manifest.json` File

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/manifest.mdx

Create a static `manifest.json` or `manifest.webmanifest` file in the root of the `app` directory. This file provides essential metadata about the web application, such as its name, description, and start URL, following the Web Manifest Specification.

```json
{
  "name": "My Next.js Application",
  "short_name": "Next.js App",
  "description": "An application built with Next.js",
  "start_url": "/"
  // ...
}
```

--------------------------------

### Configure Stripe API Keys in Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md

To connect the application to your Stripe account, create a `.env.local` file by copying the provided example. Then, populate it with your unique Stripe publishable and secret API keys found in your Stripe developer dashboard.

```bash
cp .env.local.example .env.local
```

```bash
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
STRIPE_SECRET_KEY=<replace-with-your-secret-key>
```

--------------------------------

### Run Relay Ahead-of-Time Compilation

Source: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md

Compile GraphQL queries defined within components into optimized artifacts for Relay. This command should be re-run after any edits to components that query data with Relay. Use the command corresponding to your package manager.

```bash
npm run relay
# or
yarn relay
# or
pnpm relay
```

--------------------------------

### Configure ESLint linting scripts in Next.js package.json

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet demonstrates how to add ESLint linting scripts to your `package.json` file for a Next.js project. It defines commands for running ESLint and automatically fixing issues, enabling comprehensive code quality checks.

```json
{
  "scripts": {
    "lint": "eslint",
    "lint:fix": "eslint --fix"
  }
}
```

--------------------------------

### Create a Pull Request with GitHub CLI

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md

Use the GitHub CLI command `gh pr create` to start the interactive process of opening a pull request. The tool automates forking the repository and setting up a remote branch for your contribution.

```bash
gh pr create
```

--------------------------------

### Configure Sentry using the Sentry Wizard

Source: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md

After creating the project, run the Sentry wizard command to automatically generate and populate the necessary configuration files. This wizard streamlines the setup of the Sentry SDK and source map uploads for your Next.js application.

```bash
npx @sentry/wizard -i nextjs
```

--------------------------------

### Enable Static Caching for GET Route Handlers

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

Demonstrates how to opt-in a `GET` function in a Route Handler for caching, as they are not cached by default. This is achieved by exporting the route segment config option `export const dynamic = 'force-static'` in the route file.

```javascript
export const dynamic = 'force-static'

export async function GET() {}
```

--------------------------------

### Bootstrap a Next.js App with Rspack

Source: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md

Use `create-next-app` with your preferred package manager (npm, Yarn, or pnpm) to create a new Next.js project pre-configured with the experimental Rspack bundler. This command scaffolds the `with-rspack` example into a new directory.

```bash
npx create-next-app --example with-rspack with-rspack-app
```

```bash
yarn create next-app --example with-rspack with-rspack-app
```

```bash
pnpm create next-app --example with-rspack with-rspack-app
```

--------------------------------

### Identify React Portals

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md

This example demonstrates using `ReactIs.isPortal()` and `ReactIs.typeOf()` to determine if a value is a React Portal created with `ReactDOM.createPortal()`.

```javascript
import React from "react";
import ReactDOM from "react-dom";
import * as ReactIs from 'react-is';

const div = document.createElement("div");
const portal = ReactDOM.createPortal(<div />, div);

ReactIs.isPortal(portal); // true
ReactIs.typeOf(portal) === ReactIs.Portal; // true
```

--------------------------------

### Load Polyfills in Client-Side Instrumentation

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation-client.mdx

This example shows how to load polyfills in the `instrumentation-client` file to ensure they are available before the main application code runs. It demonstrates both a static import for polyfills that are always needed and a dynamic import for conditionally loading a polyfill (like `ResizeObserver`) based on feature detection.

```typescript
import './lib/polyfills'

if (!window.ResizeObserver) {
  import('./lib/polyfills/resize-observer').then((mod) => {
    window.ResizeObserver = mod.default
  })
}
```

```javascript
import './lib/polyfills'

if (!window.ResizeObserver) {
  import('./lib/polyfills/resize-observer').then((mod) => {
    window.ResizeObserver = mod.default
  })
}
```

--------------------------------

### Set Up Environment Variables for Ghost CMS

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md

Create a `.env.local` file in the project root to configure the connection to your Ghost CMS. You need to provide the `GHOST_API_URL` and the `GHOST_API_KEY` obtained from your Ghost admin panel's custom integration settings.

```bash
GHOST_API_URL=...
GHOST_API_KEY=...
```

--------------------------------

### Initialize Mock Service Worker in a Public Directory

Source: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md

Generates the `mockServiceWorker.js` file in the specified public directory. This step is necessary for MSW to intercept requests in the browser. The command is provided for npx, Yarn, and pnpm.

```bash
npx msw init public/
```

```bash
yarn msw init public/
```

```bash
pnpm msw init public/
```

--------------------------------

### Sync Local Environment with Vercel

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

Uses the Vercel CLI to link the local repository to a remote Vercel project and pull down the environment variables. This is a convenient way to set up the local `.env` file after the project has been deployed.

```bash
npx vercel link
npx vercel env pull
```

--------------------------------

### Simplify Layout for Automatic Metadata File Handling

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

This example shows how to simplify the `RootLayout` component by removing `<link>` tags for metadata files like `favicon.ico`. Next.js automatically includes these files in the `<head>` if they are placed in the root of the `app` directory.

```typescript
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

```javascript
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

--------------------------------

### Create Middleware with a Factory Function in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This snippet shows how libraries can provide a `createMiddleware` factory function. This pattern simplifies the setup of middleware by abstracting the implementation details, allowing developers to instantiate it with a single function call.

```typescript
import { createMiddleware } from 'third-party-library'

export default createMiddleware()
```

--------------------------------

### Migrating from `next/router` to `next/compat/router`

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx

This series of snippets illustrates the migration path for a component from the `pages` directory to the `app` directory. It starts with the legacy `next/router` usage, moves to the `next/compat/router` which can return null and requires a check, and finally refactors to use only `app` directory hooks like `useSearchParams` once the migration is complete.

```jsx
import { useRouter } from 'next/router'
const MyComponent = () => {
  const { isReady, query } = useRouter()
  // ...
}
```

```jsx
import { useEffect } from 'react'
import { useRouter } from 'next/compat/router'
import { useSearchParams } from 'next/navigation'
const MyComponent = () => {
  const router = useRouter() // may be null or a NextRouter instance
  const searchParams = useSearchParams()
  useEffect(() => {
    if (router && !router.isReady) {
      return
    }
    // In `app/`, searchParams will be ready immediately with the values, in
    // `pages/` it will be available after the router is ready.
    const search = searchParams.get('search')
    // ...
  }, [router, searchParams])
  // ...
}
```

```jsx
import { useSearchParams } from 'next/navigation'
const MyComponent = () => {
  const searchParams = useSearchParams()
  // As this component is only used in `app/`, the compat router can be removed.
  const search = searchParams.get('search')
  // ...
}
```

--------------------------------

### Generate Author API in WordPress

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This function generates an array of author URLs by querying all users and creating URLs based on their IDs.  It relies on WordPress functions like `get_users`, `get_author_posts_url`, and `home_url`. It returns an array of URLs.

```php
function wsra_generate_author_api()
{
  $author_urls = array();
  $authors = get_users();
  foreach ($authors as $author) {
    $fullUrl = esc_url(get_author_posts_url($author->ID));
    $url = str_replace(home_url(), '', $fullUrl);
    $tempArray = [
      'url' => $url,
    ];
    array_push($author_urls, $tempArray);
  }
  return array_merge($author_urls);
}
```

--------------------------------

### Create a Context Provider as a Client Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx

React Context is not supported in Server Components, so you must create a provider within a Client Component. This example shows a `ThemeProvider` marked with `'use client'` that creates and provides a context, accepting `children` to wrap other components.

```tsx
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

```jsx
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

--------------------------------

### Configure PostCSS for Tailwind CSS

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx

Create a `postcss.config.mjs` file in your project's root to configure PostCSS. This setup adds the Tailwind CSS plugin to the build process, enabling it to scan your files and generate the necessary CSS.

```javascript
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}
```

--------------------------------

### Implement Basic Navigation with next/link in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx

Demonstrates the basic usage of the Next.js `<Link>` component to create a simple hyperlink for client-side navigation. The `href` prop specifies the destination route. This example shows how to link to a '/dashboard' page from a main page.

```tsx
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

```jsx
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

--------------------------------

### Create Example Pages in Next.js Pages Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Define two simple pages, Home and About, using the traditional Next.js Pages Router. These React components use the `Link` component to enable navigation, which can then be verified with an E2E test.

```tsx
import Link from 'next/link'

export default function Home() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

```tsx
import Link from 'next/link'

export default function About() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

--------------------------------

### Non-Interactive `create-next-app` Options

Source: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md

You can create a project non-interactively by passing command-line arguments to `create-next-app`. This help output lists all the available flags for customizing the project, such as enabling TypeScript, adding Tailwind CSS, or bootstrapping from an official example.

```bash
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript

    Initialize as a TypeScript project. (default)

  --js, --javascript

    Initialize as a JavaScript project.

  --tailwind

    Initialize with Tailwind CSS config. (default)

  --eslint

    Initialize with ESLint config.

  --app

    Initialize as an App Router project.

  --src-dir

    Initialize inside a `src/` directory.

  --turbopack

    Enable Turbopack by default for development.

  --import-alias <alias-to-configure>

    Specify import alias to use (default "@/*").

  --empty

    Initialize an empty project.

  --use-npm

    Explicitly tell the CLI to bootstrap the application using npm

  --use-pnpm

    Explicitly tell the CLI to bootstrap the application using pnpm

  --use-yarn

    Explicitly tell the CLI to bootstrap the application using Yarn

  --use-bun

    Explicitly tell the CLI to bootstrap the application using Bun

  -e, --example [name]|[github-url]

    An example to bootstrap the app with. You can use an example name
    from the official Next.js repo or a GitHub URL. The URL can use
    any branch and/or subdirectory

  --example-path <path-to-example>

    In a rare case, your GitHub URL might contain a branch name with
    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
    In this case, you must specify the path to the example separately:
    --example-path foo/bar

  --reset-preferences

    Explicitly tell the CLI to reset any stored preferences

  --skip-install

    Explicitly tell the CLI to skip installing packages

  --disable-git

    Explicitly tell the CLI to skip initializing a git repository.

  --yes

    Use previous preferences or defaults for all options that were not
    explicitly specified, without prompting.

  -h, --help                           display help for command
```

--------------------------------

### Define a Convex Query Function in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md

This example demonstrates how to create a Convex query function using TypeScript. It imports `query` from `./_generated/server` and `v` for validation from `convex/values`. The function defines expected arguments with validators and a handler that reads from the database and returns the result.

```typescript
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

--------------------------------

### Add Cypress Script to package.json

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Add a `cypress:open` script to your project's `package.json` file. This script provides a convenient way to launch the Cypress test runner from the command line.

```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint",
    "cypress:open": "cypress open"
  }
}
```

--------------------------------

### Run Production Environment without Multistage Builds

Source: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md

These commands build and run the production environment without multistage builds, resulting in a larger final image. This setup is an alternative to the multistage build process.

```bash
# Create a network, which allows containers to communicate
# with each other, by using their container name as a hostname
docker network create my_network

# Build prod without multistage
docker compose -f compose.prod-without-multistage.yaml build

# Up prod without multistage in detached mode
docker compose -f compose.prod-without-multistage.yaml up -d
```

--------------------------------

### Create a Snapshot Test for App Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

This example shows how to write a Jest snapshot test for the `Page` component (App Router). It renders the component and compares its output to a stored snapshot file to ensure the UI does not change unexpectedly.

```jsx
import { render } from '@testing-library/react'
import Page from '../app/page'

it('renders homepage unchanged', () => {
  const { container } = render(<Page />)
  expect(container).toMatchSnapshot()
})
```

--------------------------------

### Enable APFS Disk Compression on macOS

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md

On macOS, you can save disk space by enabling APFS compression for the `node_modules/` and `target/` directories. You can install a launch agent to do this automatically or run the compression script manually.

```bash
# Install a launch agent for automatic compression
./scripts/LaunchAgents/install-macos-agents.sh

# Or run the compression script manually
./scripts/macos-compress.sh
```

--------------------------------

### Read File System Content at Build Time with getStaticProps

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx

This JSX example demonstrates how to use `getStaticProps` in a Next.js page to read all files from a local `posts` directory. It utilizes Node.js's `fs` and `path` modules, combined with `process.cwd()` to construct the correct file paths. The content of each file is then passed as `props` to the `Blog` component for static site generation.

```jsx
import { promises as fs } from 'fs'
import path from 'path'

// posts will be populated at build time by getStaticProps()
function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>
          <h3>{post.filename}</h3>
          <p>{post.content}</p>
        </li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  const postsDirectory = path.join(process.cwd(), 'posts')
  const filenames = await fs.readdir(postsDirectory)

  const posts = filenames.map(async (filename) => {
    const filePath = path.join(postsDirectory, filename)
    const fileContents = await fs.readFile(filePath, 'utf8')

    // Generally you would parse/transform the contents
    // For example you can transform markdown to HTML here

    return {
      filename,
      content: fileContents,
    }
  })
  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts: await Promise.all(posts),
    },
  }
}

export default Blog
```

--------------------------------

### Recommended Asynchronous Usage of `draftMode` in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

Demonstrates the recommended asynchronous pattern for checking if draft mode is enabled. The `draftMode()` function from `next/headers` should be awaited to get the `isEnabled` status.

```tsx
import { draftMode } from 'next/headers'

// Before
const { isEnabled } = draftMode()

// After
const { isEnabled } = await draftMode()
```

--------------------------------

### Create a Next.js Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx

In Next.js, a page is UI rendered on a specific route. To create a page, add a `page.tsx` or `page.js` file inside the `app` directory and default export a React component. This example shows how to create a simple index page.

```tsx
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

```jsx
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

--------------------------------

### Generate dotCMS API Token

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md

Use this cURL command to generate an authentication token for the dotCMS API. This token is necessary for the `DOTCMS_TOKEN` environment variable, allowing the Next.js application to fetch content. The example uses credentials for the public demo site.

```bash
curl -H "Content-Type:application/json" --insecure  -X POST -d  '
{ "user":"admin@dotcms.com", "password":"admin", "expirationDays": 10 }
' http://demo.dotcms.com:8080/api/v1/authentication/api-token
```

--------------------------------

### Configure Makeswift Environment Variables

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md

Rename the `.env.local.example` file to `.env.local` and add your Makeswift site's API key and the API host. This connects your Next.js application to your Makeswift project.

```diff
-- MAKESWIFT_API_HOST=
-- MAKESWIFT_SITE_API_KEY=
++ MAKESWIFT_API_HOST=https://api.makeswift.com
++ MAKESWIFT_SITE_API_KEY=<YOUR_MAKESWIFT_SITE_API_KEY>
```

--------------------------------

### Run Vitest Tests

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx

Execute the test suite using your preferred package manager (npm, yarn, pnpm, or bun). By default, Vitest will start in 'watch' mode, automatically re-running tests whenever source or test files are changed.

```bash
npm run test
# or
yarn test
# or
pnpm test
# or
bun test
```

--------------------------------

### Create Next.js app with custom Babel config (npm)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md

This command initializes a new Next.js application with a custom Babel configuration using npm. It utilizes the 'create-next-app' tool to bootstrap the project with the specified example.

```bash
npx create-next-app --example with-custom-babel-config with-custom-babel-config-app
```

--------------------------------

### Load Next.js Environment Variables for Testing in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx

This JavaScript snippet demonstrates how to manually load Next.js environment variables into a testing setup, such as a Jest global setup file. It uses the `loadEnvConfig` function from the `@next/env` package to ensure that environment variables are loaded consistently with how Next.js operates, using the current working directory as the project root.

```javascript
// The below can be used in a Jest global setup file or similar for your testing set-up
import { loadEnvConfig } from '@next/env'

export default async () => {
  const projectDir = process.cwd()
  loadEnvConfig(projectDir)
}
```

--------------------------------

### Example of Generated Type Registration Code in Rust

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/architecture.md

This Rust code snippet is an example of a file generated by a build script within the `turbo-tasks` crate. It demonstrates how various types and functions are manually registered into a global map using a unique string identifier. This process is crucial for deserializing values without compile-time type information, enabling persistent caching.

```rust
// target/debug/build/turbo-tasks-{hash}/out/register.rs

{
crate::nothing::NOTHINGVC_IMPL_NEW_FUNCTION.register(r##"turbo-tasks@TODO::::nothing::NothingVc::new"##);
crate::display::VALUETOSTRING_TRAIT_TYPE.register(r##"turbo-tasks@TODO::::display::ValueToString"##);
crate::primitives::STRING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::String"##);
crate::primitives::BOOL_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::Bool"##);
crate::nothing::NOTHING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::nothing::Nothing"##);
crate::native_function::NATIVEFUNCTION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::native_function::NativeFunction"##);
crate::completion::COMPLETION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::completion::Completion"##);
}
```

--------------------------------

### Initialize Analytics with Client-Side Instrumentation in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx

Create an `instrumentation-client.js` or `instrumentation-client.ts` file in your project's root to execute code before the application's frontend starts. This is ideal for initializing global analytics, setting up error tracking with `window.addEventListener`, or other performance monitoring tools.

```javascript
// Initialize analytics before the app starts
console.log('Analytics initialized')

// Set up global error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

--------------------------------

### Update `next.config.js` for `bundlePagesRouterDependencies`

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

The experimental configuration `experimental.bundlePagesExternals` has been promoted to a stable feature and renamed to `bundlePagesRouterDependencies`. This example shows the required change in your `next.config.js` file.

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Before
  experimental: {
    bundlePagesExternals: true,
  },

  // After
  bundlePagesRouterDependencies: true,
}

module.exports = nextConfig
```

--------------------------------

### Create .env file

Source: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md

This command creates a new .env file in the current directory, which is used to store environment variables such as database URLs.

```bash
touch .env
```

--------------------------------

### Generate a Viewport with a Simple Function

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-viewport.mdx

This example shows how to dynamically generate viewport metadata by exporting a `generateViewport` function. The function returns a `Viewport` object, allowing for programmatic control over the viewport settings.

```tsx
import type { Viewport } from 'next'

export function generateViewport(): Viewport {
  return {
    themeColor: 'black',
  }
}
```

--------------------------------

### Optimize Bundle Size by Composing Server and Client Components

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx

This example demonstrates how to reduce the client JavaScript bundle size by keeping larger components as Server Components. A mostly static `<Layout>` Server Component imports and renders an interactive `<Search>` Client Component, ensuring only the necessary interactive code is sent to the client.

```tsx
// File: app/layout.tsx (Server Component)
import Search from './search' // Client Component
import Logo from './logo'     // Server Component

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}

// File: app/ui/search.tsx (Client Component)
'use client'

export default function Search() {
  // ...
}
```

```jsx
// File: app/layout.js (Server Component)
import Search from './search' // Client Component
import Logo from './logo'     // Server Component

export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}

// File: app/ui/search.js (Client Component)
'use client'

export default function Search() {
  // ...
}
```

--------------------------------

### Define a Static Viewport with Type Safety

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-viewport.mdx

This demonstrates how to define a static `viewport` object with type safety in Next.js. The TypeScript example explicitly uses the `Viewport` type from 'next', while the JavaScript example leverages JSDoc for type inference and validation.

```tsx
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}
```

```js
/** @type {import("next").Viewport} */
export const viewport = {
  themeColor: 'black',
}
```

--------------------------------

### Import a Static Image from a URL

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/urlImports.mdx

Demonstrates importing an image from an external URL and using it with the Next.js `Image` component. This allows Next.js to optimize the remote image, for example by applying a blur placeholder.

```javascript
import Image from 'next/image'
import logo from 'https://example.com/assets/logo.png'

export default () => (
  <div>
    <Image src={logo} placeholder="blur" />
  </div>
)
```

--------------------------------

### Declare and Export a Simple Variable in a JavaScript Module (Turbopack)

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md

A fundamental module example within the Turbopack system. This snippet declares a simple string variable `cat` and exports it using a Turbopack-specific export assertion (`__TURBOPACK_VAR__`). This serves as a source module for other parts to import from.

```javascript
let cat = "cat";
export { cat as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

--------------------------------

### Wrap content for App or Pages Router in MDX

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

Demonstrates how to use `<PagesOnly>` components in MDX files to display content selectively for the Pages Router, ensuring router-specific information is shown only where relevant.

```mdx
This content is shared between App and Pages.

<PagesOnly>

This content will only be shown on the Pages docs.

</PagesOnly>

This content is shared between App and Pages.
```

--------------------------------

### Turbopack Build Entrypoints Configuration

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md

This object represents a Turbopack configuration for module entrypoints. It maps exports like `a`, `b`, and `order` to internal numeric identifiers, guiding the bundler on how to assemble the final code from its constituent parts.

```javascript
{
    ModuleEvaluation: 2,
    Export(
        "a",
    ): 5,
    Export(
        "b",
    ): 4,
    Export(
        "order",
    ): 2,
    Exports: 6,
}
```

--------------------------------

### Upgrade to the Next.js Canary Version

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/17-upgrading.mdx

This command installs the latest canary build of Next.js. Canary versions are released frequently and contain features that are not yet in a stable release. It's recommended to be on the latest stable version before upgrading to canary.

```bash
npm i next@canary
```

--------------------------------

### Create a Custom Next.js Server in TypeScript and JavaScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx

This snippet demonstrates how to programmatically start a Next.js application using Node.js's built-in `http` module. It creates a server, prepares the Next.js app, and then uses the app's request handler to process incoming requests. This approach is for custom server patterns but will remove performance optimizations like Automatic Static Optimization.

```typescript
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'

const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url!, true)
    handle(req, res, parsedUrl)
  }).listen(port)

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  )
})
```

```javascript
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'

const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true)
    handle(req, res, parsedUrl)
  }).listen(port)

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  )
})
```

--------------------------------

### Example Usage of the Removed `Router.onAppUpdated` Hook in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/errors/no-on-app-updated-hook.mdx

This example shows a common but now obsolete use of `Router.onAppUpdated`. It was used to trigger a full page reload to the next route upon detecting a new application deployment. This hook is no longer available in Next.js.

```javascript
Router.onAppUpdated = function (nextRoute) {
  location.href = nextRoute
}
```

--------------------------------

### Example of an Invalid Re-export Causing an Error

Source: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx

This example demonstrates the error scenario. A page (`example-b.js`) uses a wildcard to re-export from another page (`example-a.js`) that contains server-side code (the `fs` module), leading to a 'Module not found' error during the client-side build.

```jsx
// pages/example-a.js
import fs from 'fs'

export default function A() {
  return <main />
}

export function getStaticProps() {
  fs
  return { props: {} }
}

// pages/example-b.js
export * from './example-a'
```

--------------------------------

### Manage Module Dependencies with Turbopack Assertions in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md

This shows how Turbopack manages its internal module graph using a proprietary `__turbopack_part__` syntax. The first example shows how modules import other chunks and compiled dependencies. The second example demonstrates how variables are re-exported from different parts, making them available to other modules in the bundle.

```javascript
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "../compiled/stacktrace-parser";
```

```javascript
export { IPC } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export IPC"
};
export { structuredError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export structuredError"
};
```

--------------------------------

### Nested Caching: Parent Component Example

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheLife.mdx

This example shows a parent component that uses the 'use cache' directive and sets a cache profile using `cacheLife('days')`. When this component includes a child with a more restrictive cache profile, the shortest duration will be applied to the nested structure.

```tsx
// Parent component
import { unstable_cacheLife as cacheLife } from 'next/cache'
import { ChildComponent } from './child'

export async function ParentComponent() {
  'use cache'
  cacheLife('days')

  return (
    <div>
      <ChildComponent />
    </div>
  )
}
```

--------------------------------

### Download GraphQL Schema for Relay

Source: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md

Fetch the GraphQL schema introspection data from the configured Relay endpoint. This step is a prerequisite for Relay's ahead-of-time compilation and can be run using npm, Yarn, or pnpm.

```bash
npm run schema
# or
yarn schema
# or
pnpm schema
```

--------------------------------

### Fetch Data in a Server Component with the fetch API

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx

This example demonstrates how to fetch data within a Next.js Server Component by converting the component into an asynchronous function and using `await` with the native `fetch` API. The component fetches a list of blog posts, parses the JSON response, and then maps over the data to render a list.

```tsx
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

```jsx
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

--------------------------------

### Define Module Entrypoints Configuration

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md

This configuration block defines the entry points for the module evaluation process. It maps specific exports like `external1`, `external2`, `foo`, and `foobar` to their corresponding module part indices. This is likely used by the bundler to know where to start evaluation for specific exports.

```json
{
    ModuleEvaluation: 8,
    Export(
        "external1",
    ): 0,
    Export(
        "external2",
    ): 10,
    Export(
        "foo",
    ): 11,
    Export(
        "foobar",
    ): 10,
    Exports: 12,
}
```

--------------------------------

### Configure Environment Variables for Prepr

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md

Define the necessary environment variables in your `.env.local` file. This includes the Prepr API endpoint, production and preview access tokens, and a secret key for enabling Next.js Preview Mode.

```bash
PREPRIO_API=https://graphql.prepr.io/graphql
PREPRIO_PRODUCTION_TOKEN='your Production access token'
PREPRIO_PREVIEW_TOKEN='your Preview access token'
PREPRIO_PREVIEW_SECRET='your secret id'
```

--------------------------------

### Continue Middleware Execution with `NextResponse.next()`

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx

This example demonstrates the simplest use of `NextResponse.next()`. Calling this method without arguments returns a response that signals Next.js to continue processing the request, moving on to the next middleware or the requested page/route.

```typescript
import { NextResponse } from 'next/server'

return NextResponse.next()
```

--------------------------------

### Initialize EdgeDB Project

Source: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md

Initialize an EdgeDB project within the application directory. This command sets up a local EdgeDB instance and applies migrations.

```bash
$ edgedb project init
```

--------------------------------

### Write a Cypress Component Test for a Next.js Pages Router Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

This example demonstrates a Cypress component test for a page built with the Next.js Pages Router. The test mounts the `AboutPage` component using `cy.mount()` and then verifies the presence of an `h1` element and a link with a specific `href` attribute.

```jsx
import AboutPage from '../../pages/about'

describe('<AboutPage />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the About page
    cy.mount(<AboutPage />)

    // The new page should contain an h1 with "About page"
    cy.get('h1').contains('About')

    // Validate that a link with the expected URL is present
    // *Following* the link is better suited to an E2E test
    cy.get('a[href="/"]').should('be.visible')
  })
})
```

--------------------------------

### Manually Upgrade Next.js and React

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx

If you prefer a manual upgrade, install the latest versions of Next.js, React, and related packages using npm. You might need to use flags like `--force` if you encounter peer dependency warnings before the stable releases.

```bash
npm i next@latest react@latest react-dom@latest eslint-config-next@latest
```

--------------------------------

### Import an Asset using the URL constructor

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/urlImports.mdx

To get a stable, hashed URL for a remote asset, you can use the `URL` constructor with `import.meta.url`. This tells Next.js to download and process the asset, providing a versioned pathname that can be used in your application code.

```javascript
const logo = new URL('https://example.com/assets/file.txt', import.meta.url)

console.log(logo.pathname)

// prints "/_next/static/media/file.a9727b5d.txt"
```

--------------------------------

### Scaffold SuperTokens App with a Next.js Frontend

Source: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md

Use the `create-supertokens-app` CLI to generate a new application with a Next.js frontend. After running the command with your preferred package manager (npm, Yarn, or pnpm), you will be prompted to select the app directory to complete the setup.

```bash
npx create-supertokens-app@latest --frontend=next
```

```bash
yarn create-supertokens-app@latest --frontend=next
```

```bash
pnpm create-supertokens-app@latest --frontend=next
```

--------------------------------

### Build Native Rust Code (SWC/Turbopack)

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md

For developers working on Next.js's Rust-based components like Turbopack, this command compiles the native Rust code. It requires a local Rust installation and is used to test recent changes that are not yet available in a canary release.

```bash
pnpm swc-build-native
```

--------------------------------

### Implement an Akamai Image Loader in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx

This is an example loader function for Akamai's Image and Video Manager. It constructs the final image URL by appending the `imwidth` query parameter to the source URL.

```javascript
// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demand
export default function akamaiLoader({ src, width, quality }) {
  return `https://example.com/${src}?imwidth=${width}`
}
```

--------------------------------

### Include Check and Cross icons in MDX

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

Shows how to embed `<Check>` and `<Cross>` components in an MDX file to display visual icons within the documentation, specifying their size for consistent presentation.

```mdx
<Check size={18} />
<Cross size={18} />
```

--------------------------------

### Illustrate useMemo Re-evaluation During Fast Refresh

Source: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/fast-refresh.mdx

This example demonstrates how hooks with dependencies, like `useMemo`, are always re-executed during a Fast Refresh in Next.js, even if the dependencies themselves have not changed. This ensures that edits to the hook's logic are immediately visible on the screen.

```javascript
// When you edit the function within useMemo, it will re-run during Fast Refresh
// regardless of whether the dependency 'x' has changed.

// For example, changing from this:
useMemo(() => x * 2, [x]);

// To this, will trigger a re-run:
useMemo(() => x * 10, [x]);
```

--------------------------------

### Access MDX Metadata in Next.js Components

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx

This example demonstrates how to import an MDX file as a component and simultaneously access its exported metadata. The metadata can then be used within the component, for example, to log or display author information. This pattern is applicable for both the App Router and Pages Router.

```typescript
import BlogPost, { metadata } from '@/content/blog-post.mdx'

export default function Page() {
  console.log('metadata: ', metadata)
  //=> { author: 'John Doe' }
  return <BlogPost />
}
```

```javascript
import BlogPost, { metadata } from '@/content/blog-post.mdx'

export default function Page() {
  console.log('metadata: ', metadata)
  //=> { author: 'John Doe' }
  return <BlogPost />
}
```

--------------------------------

### Create a PWA 'Add to Home Screen' Prompt for iOS in React

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx

This `InstallPrompt` component detects if the application is being viewed on an iOS device and is not yet installed as a standalone app. If these conditions are met, it displays instructions for the user to add the web app to their home screen. The component is provided in both TypeScript (TSX) and JavaScript (JSX) versions.

```tsx
function InstallPrompt() {
  const [isIOS, setIsIOS] = useState(false)
  const [isStandalone, setIsStandalone] = useState(false)

  useEffect(() => {
    setIsIOS(
      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
    )

    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)
  }, [])

  if (isStandalone) {
    return null // Don't show install button if already installed
  }

  return (
    <div>
      <h3>Install App</h3>
      <button>Add to Home Screen</button>
      {isIOS && (
        <p>
          To install this app on your iOS device, tap the share button
          <span role="img" aria-label="share icon">
            {' '}
            ⎋{' '}
          </span>
          and then "Add to Home Screen"
          <span role="img" aria-label="plus icon">
            {' '}
            ➕{' '}
          </span>
          .
        </p>
      )}
    </div>
  )
}

export default function Page() {
  return (
    <div>
      <PushNotificationManager />
      <InstallPrompt />
    </div>
  )
}
```

```jsx
function InstallPrompt() {
  const [isIOS, setIsIOS] = useState(false);
  const [isStandalone, setIsStandalone] = useState(false);

  useEffect(() => {
    setIsIOS(
      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
    );

    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches);
  }, []);

  if (isStandalone) {
    return null; // Don't show install button if already installed
  }

  return (
    <div>
      <h3>Install App</h3>
      <button>Add to Home Screen</button>
      {isIOS && (
        <p>
          To install this app on your iOS device, tap the share button
          <span role="img" aria-label="share icon">
            {' '}
            ⎋{' '}
          </span>
          and then "Add to Home Screen"
          <span role="img" aria-label="plus icon">
            {' '}
            ➕{' '}
          </span>
          .
        </p>
      )}
    </div>
  );
}

export default function Page() {
  return (
    <div>
      <PushNotificationManager />
      <InstallPrompt />
    </div>
  );
}
```

--------------------------------

### Generate Self-Signed SSL Certificate with OpenSSL

Source: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md

This OpenSSL command generates a self-signed X.509 certificate and a 2048-bit RSA private key without a passphrase. The resulting files, `localhost-privkey.pem` and `localhost-cert.pem`, are required to run the local HTTP2 server over HTTPS.

```bash
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout localhost-privkey.pem -out localhost-cert.pem
```

--------------------------------

### Examine Turbopack Module Partitioning

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md

This code shows how Turbopack breaks a module into smaller, interconnected parts for efficient loading. The snippets use special `__TURBOPACK_VAR__` and `__TURBOPACK_PART__` import/export assertions to manage dependencies between chunks. This example shows the output for both development and production builds, which are identical in this case.

```javascript
/* Part 0 */
const dog = "dog";
export { dog as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

/* Part 1 */
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const cat = "cat";
const CHIMERA = cat + dog;
export { CHIMERA };
export { cat as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { CHIMERA as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

/* Part 2 */
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const DOG = dog;
export { DOG };
export { DOG as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

/* Part 3 */
export { CHIMERA } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export CHIMERA"
};
export { DOG } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export DOG"
};
```

--------------------------------

### Create a Basic Page Component in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx

In Next.js, a page is a React Component exported from a file in the `pages` directory. The file's name determines the route. For example, creating `pages/about.js` and exporting a component makes it accessible at the `/about` URL.

```jsx
export default function About() {
  return <div>About</div>
}
```

--------------------------------

### Execute Playwright Tests

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Run the Playwright test suite against your application. It's recommended to run tests against a production build, so ensure your Next.js server is running (`npm run build` then `npm run start`) before executing this command.

```bash
npx playwright test
```

--------------------------------

### Create a Static JSON Route Handler in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx

This snippet illustrates how to create a static API route using a Route Handler in the App Router. By exporting a `GET` function, `next build` will execute it and generate a static file (e.g., `data.json`) containing the returned JSON response. This is only supported for the `GET` HTTP verb in static exports.

```typescript
export async function GET() {
  return Response.json({ name: 'Lee' })
}
```

```javascript
export async function GET() {
  return Response.json({ name: 'Lee' })
}
```

--------------------------------

### Run E2E Tests in Development Mode

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md

Execute a specific end-to-end test suite in development mode. This command uses `next dev` to start the development server against which the tests are run.

```sh
pnpm test-dev test/e2e/app-dir/app/
```

--------------------------------

### Define a Convex Mutation Function in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md

This example illustrates how to create a Convex mutation function for writing data. It uses the `mutation` helper, validates arguments with `convex/values`, and its handler performs a database insertion using `ctx.db.insert`. The mutation can also read from the database and optionally return a value.

```typescript
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

--------------------------------

### Generate a Component Tree with Fuzzponent

Source: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md

An example command that uses Fuzzponent to create a dependency tree with a depth of 2 and a seed of 206, outputting the resulting files into the 'components' directory. The entry point for the generated tree will be located at `components/index.js`.

```bash
fuzzponent --depth 2 --seed 206 --outdir components
```

--------------------------------

### GET, PUT, DELETE /api/item/{id}

Source: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md

Endpoints for fetching, updating, or deleting a specific todo item by its ID.

```APIDOC
## GET /api/item/{id}

### Description
Fetches a single todo item by its unique ID.

### Method
GET

### Endpoint
`/api/item/{id}`

### Parameters
#### Path Parameters
- **id** (integer) - Required - The unique identifier of the todo item.

### Response
#### Success Response (200)
Returns the requested `TodoItem`.
- **id** (integer) - The unique identifier for the todo item.
- **text** (string) - The content of the todo item.
- **completed** (boolean) - The completion status of the todo item.

#### Response Example
```json
{
  "id": 1,
  "text": "Learn Tigris",
  "completed": false
}
```

---

## PUT /api/item/{id}

### Description
Updates a specific todo item by its ID.

### Method
PUT

### Endpoint
`/api/item/{id}`

### Parameters
#### Path Parameters
- **id** (integer) - Required - The unique identifier of the todo item to update.
#### Request Body
- **text** (string) - Optional - The updated content of the todo item.
- **completed** (boolean) - Optional - The updated completion status.

### Request Example
```json
{
  "completed": true
}
```

### Response
#### Success Response (200)
Returns the updated `TodoItem`.
- **id** (integer) - The unique identifier for the todo item.
- **text** (string) - The content of the todo item.
- **completed** (boolean) - The completion status of the todo item.

#### Response Example
```json
{
  "id": 1,
  "text": "Learn Tigris",
  "completed": true
}
```

---

## DELETE /api/item/{id}

### Description
Deletes a specific todo item by its unique ID.

### Method
DELETE

### Endpoint
`/api/item/{id}`

### Parameters
#### Path Parameters
- **id** (integer) - Required - The unique identifier of the todo item to delete.

### Response
#### Success Response (204)
No content is returned.
```

--------------------------------

### Create Next.js app with custom Babel config (pnpm)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md

This command initializes a new Next.js application with a custom Babel configuration using pnpm. It utilizes the 'create next app' command to bootstrap the project with the specified example.

```bash
pnpm create next-app --example with-custom-babel-config with-custom-babel-config-app
```

--------------------------------

### Define a Next.js Edge API Route

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md

This code defines a Next.js API route handler. It imports `NextResponse` to create a JSON response, exports a `GET` function to handle HTTP GET requests, and sets the `runtime` to 'edge' to deploy the function to the Vercel Edge Network.

```javascript
import { NextResponse } from "next/server";

export const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};

export const runtime = "edge";
```

--------------------------------

### Fetch Data in a Client Component using SWR

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx

This example demonstrates data fetching within a Next.js Client Component using the SWR library. It defines a `fetcher` function and utilizes the `useSWR` hook to manage the data fetching lifecycle, including loading and error states.

```typescript
'use client'
import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post: { id: string; title: string }) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

```javascript
'use client'

import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

--------------------------------

### Using getInitialProps with a Custom App

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx

This example demonstrates fetching data within a custom `App` using `getInitialProps`. This pattern populates props for every page but disables Automatic Static Optimization and is not recommended. Consider incrementally adopting the App Router for data fetching in layouts instead.

```tsx
import App, { AppContext, AppInitialProps, AppProps } from 'next/app'

type AppOwnProps = { example: string }

export default function MyApp({
  Component,
  pageProps,
  example,
}: AppProps & AppOwnProps) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (
  context: AppContext
): Promise<AppOwnProps & AppInitialProps> => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

```jsx
import App from 'next/app'

export default function MyApp({ Component, pageProps, example }) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (context) => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

--------------------------------

### Create a Catch-all API Route in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx

This example demonstrates how to create a catch-all API route using the `[...slug].js` file naming convention. This pattern matches the base path and any number of subsequent segments (e.g., `/api/post/a/b/c`). The captured segments are available as an array in `req.query`, which are then joined and returned in the response.

```typescript
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

```javascript
export default function handler(req, res) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

--------------------------------

### Write a Cypress Component Test for a Next.js App Router Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

This example shows a Cypress component test for a page created with the Next.js App Router. The test uses `cy.mount()` to render the React component and then asserts that an `h1` tag and a specific link are present and visible on the page.

```tsx
import Page from '../../app/page'

describe('<Page />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the Home page
    cy.mount(<Page />)

    // The new page should contain an h1 with "Home"
    cy.get('h1').contains('Home')

    // Validate that a link with the expected URL is present
    // Following the link is better suited to an E2E test
    cy.get('a[href="/about"]').should('be.visible')
  })
})
```

--------------------------------

### Bootstrap a Next.js App with Compiled CSS

Source: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md

Use `create-next-app` with your preferred package manager (npm via npx, Yarn, or pnpm) to initialize a new project from the `with-compiled-css` example. This sets up a Next.js application with Compiled for build-time CSS-in-JS styling.

```bash
npx create-next-app --example with-compiled-css with-compiled-css-app
```

```bash
yarn create next-app --example with-compiled-css with-compiled-css-app
```

```bash
pnpm create next-app --example with-compiled-css with-compiled-css-app
```

--------------------------------

### Create a Post with a GraphQL Mutation

Source: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md

Execute this GraphQL mutation to populate the Grafbase backend with a new 'Post' entry. This example creates a post with a title, a slug, and an associated comment, demonstrating how to add data to the database via a GraphQL endpoint.

```graphql
mutation {
  postCreate(
    input: {
      title: "I love Next.js!"
      slug: "i-love-nextjs"
      comments: [{ create: { message: "me too!" } }]
    }
  ) {
    post {
      id
      slug
    }
  }
}
```

--------------------------------

### Create a Video Server Component in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx

This example shows how to create a Next.js Server Component for embedding a video. The component asynchronously fetches the video source URL and then renders an `<iframe>` tag with the appropriate `src` attribute. This pattern is ideal for handling externally hosted video content while leveraging server-side capabilities.

```jsx
export default async function VideoComponent() {
  const src = await getVideoSrc()

  return <iframe src={src} allowFullScreen />
}
```

--------------------------------

### Configure Environment Variables for Next.js Umbraco Integration

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md

An example `.env.local` file for connecting a Next.js application to an Umbraco CMS instance. It defines the server URL, Delivery API key, and a preview secret. The `NODE_TLS_REJECT_UNAUTHORIZED=0` setting is used to bypass self-signed SSL certificate errors in local development and should not be used in production.

```env
NODE_TLS_REJECT_UNAUTHORIZED=0
UMBRACO_SERVER_URL = 'https://localhost:12345'
UMBRACO_DELIVERY_API_KEY = 'my-secret-api-key'
UMBRACO_PREVIEW_SECRET = 'my-preview-secret'
```

--------------------------------

### Pass Flags to NAPI CLI via pack-next

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md

Pass flags directly to the underlying `napi` CLI by appending them after an argument separator (`--`) when running `pnpm pack-next`. This example demonstrates creating a release build.

```bash
pnpm pack-next --project ~/my-project/ -- --release
```

--------------------------------

### Register OpenTelemetry in Next.js Application

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation.mdx

Defines the `register` function, called once when a new Next.js server instance starts. It integrates OpenTelemetry for application observability, using `@vercel/otel`. This function can be asynchronous.

```typescript
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

```javascript
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

--------------------------------

### Set Up Navigation Blocker Context in Root Layout (Next.js)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx

This example shows how to configure the root layout (`app/layout.js`) to include a custom `NavigationBlockerProvider`. By wrapping the `{children}` with this provider, the navigation blocking context becomes available to all child components throughout the application.

```jsx
import { NavigationBlockerProvider } from './contexts/navigation-blocker'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  )
}
```

--------------------------------

### Add Subtitles to a Self-Hosted Video in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx

This example updates a video component to include subtitles. It fetches both the video and subtitle file URLs from Vercel Blob using the `list` function and then uses the HTML `<track>` element within the `<video>` tag to associate the subtitle file with the video.

```jsx
async function VideoComponent({ fileName }) {
  const { blobs } = await list({
    prefix: fileName,
    limit: 2,
  })
  const { url } = blobs[0]
  const { url: captionsUrl } = blobs[1]

  return (
    <video controls preload="none" aria-label="Video player">
      <source src={url} type="video/mp4" />
      <track src={captionsUrl} kind="subtitles" srcLang="en" label="English" />
      Your browser does not support the video tag.
    </video>
  )
}
```

--------------------------------

### Integrate the Loading Indicator into a Next.js Layout

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-link-status.mdx

This example shows how to use the `LoadingIndicator` component within a layout or menu. By placing the `LoadingIndicator` inside a `next/link` component, it will automatically respond to the prefetching and navigation status of that specific link.

```tsx
import Link from 'next/link'
import LoadingIndicator from './components/loading-indicator'

const links = [
  { href: '/shop/electronics', label: 'Electronics' },
  { href: '/shop/clothing', label: 'Clothing' },
  { href: '/shop/books', label: 'Books' },
]

function Menubar() {
  return (
    <div>
      {links.map((link) => (
        <Link key={link.label} href={link.href}>
          <span className="label">{link.label}</span> <LoadingIndicator />
        </Link>
      ))}
    </div>
  )
}

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <Menubar />
      {children}
    </div>
  )
}
```

```jsx
import Link from 'next/link'
import LoadingIndicator from './components/loading-indicator'

const links = [
  { href: '/shop/electronics', label: 'Electronics' },
  { href: '/shop/clothing', label: 'Clothing' },
  { href: '/shop/books', label: 'Books' },
]

function Menubar() {
  return (
    <div>
      {links.map((link) => (
        <Link key={link.label} href={link.href}>
          <span className="label">{link.label}</span> <LoadingIndicator />
        </Link>
      ))}
    </div>
  )
}

export default function Layout({ children }) {
  return (
    <div>
      <Menubar />
      {children}
    </div>
  )
}
```

--------------------------------

### Correctly Instantiate a Next.js App

Source: https://github.com/vercel/next.js/blob/canary/errors/invalid-server-options.mdx

To properly initialize a Next.js application for a custom server, you must call the `next()` function with a configuration object. The `dev` property, a boolean indicating the development status, is a crucial part of this configuration. The examples show both an incomplete call and the correct structure with the `dev` property.

```javascript
const app = next()
```

```javascript
const app = next({ dev: boolean })
```

--------------------------------

### Define Dynamic Paths for Pre-rendering with getStaticPaths

Source: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md

This example shows how to use `getStaticPaths` in a dynamic page file (e.g., `pages/posts/[id].js`). The function is called at build time to fetch data and determine which specific paths should be pre-rendered. The `fallback: false` option means any path not specified will result in a 404 error.

```javascript
// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id }
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}
```

--------------------------------

### Create a New Turso Database via CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md

Use the Turso CLI to provision a new database. Replace `[database-name]` with a unique name for your database.

```bash
turso db create [database-name]
```

--------------------------------

### Define Global Styles in a CSS File

Source: https://github.com/vercel/next.js/blob/canary/errors/no-styled-jsx-in-document.mdx

Create a global stylesheet, for example `styles.css`, to define styles that should apply to all pages, such as body fonts and margins. This file will be imported into the custom `_app` component.

```css
body {
  font-family:
    'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial',
    sans-serif;
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

--------------------------------

### Create a New Builder.io Space

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md

Navigate into the project directory and use the Builder.io CLI to create a new content space. You must provide a private key from your Builder.io account and a name for the new space. The command will output a public API key needed for configuration.

```bash
cd cms-builder-io-app
builder create -k [private-key] -n [space-name] -d
```

--------------------------------

### Redirect with Query Parameters using NextResponse in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx

Illustrates a more advanced redirect where the destination URL is programmatically constructed. This example adds a `from` query parameter to a login URL, which is useful for redirecting users back to their original page after authentication.

```typescript
import { NextResponse } from 'next/server'

// Given an incoming request...
const loginUrl = new URL('/login', request.url)
// Add ?from=/incoming-url to the /login URL
loginUrl.searchParams.set('from', request.nextUrl.pathname)
// And redirect to the new URL
return NextResponse.redirect(loginUrl)
```

--------------------------------

### Set a Custom Output Directory for next export

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/exportPathMap.mdx

Use the `-o` argument with the `next export` command to specify a custom directory for the output files. This example exports the static site to a directory named `outdir` instead of the default `out`.

```bash
next export -o outdir
```

--------------------------------

### Create Example Pages in Next.js App Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx

Define two simple pages, Home and About, using the Next.js App Router. These React components use Next.js's `Link` component for client-side navigation between the two routes, providing a basic structure to test with Playwright.

```tsx
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

```tsx
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

--------------------------------

### Optimize Icon Library Imports in React/Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx

This JSX example illustrates how to improve build performance by directly importing individual icons from libraries like `@phosphor-icons/react`. Instead of importing the entire library, specific component paths are used, which reduces the number of modules the compiler has to process.

```jsx
// Instead of this:
import { TriangleIcon } from '@phosphor-icons/react'

// Do this:
import { TriangleIcon } from '@phosphor-icons/react/dist/csr/Triangle'
```

--------------------------------

### Conditionally Apply Headers in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx

This `next.config.js` example demonstrates using the `headers` function to conditionally apply HTTP headers. It uses the `has` property to require the presence of a specific header, cookie, query parameter, or host, and the `missing` property to require its absence. The examples also show capturing values from a match using regex named capture groups for use in the new header's value.

```javascript
module.exports = {
  async headers() {
    return [
      // if the header `x-add-header` is present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-add-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the header `x-no-header` is not present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-no-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the source, query, and cookie are matched,
      // the `x-authorized` header will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // header key/values since value is provided and
            // doesn't use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        headers: [
          {
            key: 'x-authorized',
            value: ':authorized',
          },
        ],
      },
      // if the header `x-authorized` is present and
      // contains a matching value, the `x-another-header` will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
      // if the host is `example.com`,
      // this header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
    ]
  },
}
```

--------------------------------

### Configure tsconfig.json for Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

Next.js provides automatic TypeScript setup. Ensure your `tsconfig.json` file includes `next-env.d.ts` in its `include` array to make Next.js's environment types available to your project.

```json
{
  "include": ["next-env.d.ts", "app/**/*", "src/**/*"]
}
```

--------------------------------

### Configure VSCode to Preview MDX Files

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

This JSON configuration for VSCode's user settings associates `.mdx` files with the `markdown` language mode. By adding this to `settings.json`, contributors can utilize VSCode's built-in Markdown previewer to visualize their documentation changes locally, enhancing the editing experience for MDX content.

```json
{
  "files.associations": {
    "*.mdx": "markdown"
  }
}
```

--------------------------------

### Vite Static Image Import Example

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx

In a Vite application, importing a static image file returns its public URL as a string. This string can be directly used as the `src` attribute in an `<img>` tag.

```tsx
import image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production

export default function App() {
  return <img src={image} />
}
```

--------------------------------

### Configure Related Links in Next.js Docs Metadata

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

This YAML snippet demonstrates how to define related links within a Next.js documentation page's metadata using the `related` field. It allows specifying an optional description for the link list and a series of required relative URL paths to other documentation pages, guiding users to logical next steps.

```yaml
---
related:
  description: Learn how to quickly get started with your first application.
  links:
    - app/building-your-application/routing/defining-routes
    - app/building-your-application/data-fetching
    - app/api-reference/file-conventions/page
---
```

--------------------------------

### Create a Snapshot Test for Pages Router

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx

This example demonstrates a Jest snapshot test for the `Home` component (Pages Router). It renders the component and creates a snapshot of the DOM structure, which is then used to detect any unintended changes in future test runs.

```jsx
import { render } from '@testing-library/react'
import Home from '../pages/index'

it('renders homepage unchanged', () => {
  const { container } = render(<Home />)
  expect(container).toMatchSnapshot()
})
```

--------------------------------

### Create a Link with Query Parameters in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx

Illustrates how to use an object for the `href` prop in the `<Link>` component to construct a URL with a pathname and query parameters. This is useful for passing dynamic data between pages. The example navigates to `/about?name=test`.

```tsx
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

```jsx
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

--------------------------------

### Use a Session Creation Function in a Next.js Server Action

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx

This example shows how to integrate session creation into a Server Action, specifically a `signup` function. After successfully creating a user, it calls `createSession` with the new user's ID and then uses the `redirect` function to navigate the user to their profile page. This pattern centralizes session logic and integrates it into form handling.

```typescript
import { createSession } from '@/app/lib/session'

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

```javascript
import { createSession } from '@/app/lib/session'

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

--------------------------------

### Create a Basic Loading Component in Next.js (TSX/JSX)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/loading.mdx

This example shows the basic implementation of a loading component using the `loading.js` or `loading.tsx` file convention in Next.js. This component will be automatically rendered as a fallback UI using React Suspense while the content for the corresponding route segment is being loaded.

```tsx
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

```jsx
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

--------------------------------

### Example of a Deeply Nested Relative Import in TSX

Source: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md

This code snippet illustrates a common issue in large projects where relative imports become long and difficult to manage, often referred to as 'spaghetti' imports. This example shows importing a Button component from a directory three levels up.

```tsx
import Button from "../../../components/button";
```

--------------------------------

### Module Splitting for Production Build (Turbopack)

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md

This example demonstrates a more optimized module splitting strategy for a production build. The bundler creates more granular parts, separating variable declarations from their usage and using imports with `__TURBOPACK_PART__` to link dependencies, which allows for better code-splitting and tree-shaking.

```javascript
// Part 0
const effects = [];
export { effects as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

// Part 1
import { a as effects } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
function effect(name) {
    effects.push(name);
}
export { effect };
export { effect as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

// Part 2
import { a as effects } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
export { effects };

// Part 3
await Promise.resolve();
export { };

// Part 4
export { effect } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export effect"
};
export { effects } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export effects"
};
```

--------------------------------

### Render a Client-Only Component in a Next.js Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

Updates the catch-all route page to render the `ClientOnly` component. This finalizes the setup, where the server-rendered page acts as a host for the fully client-side rendered application.

```typescript
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

```javascript
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

--------------------------------

### Transition with next/link to a specific locale

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/internationalization.mdx

This example demonstrates how to use the `Link` component from `next/link` to navigate to a different locale. By providing the `locale` prop, you can specify the target language for the transition, overriding the currently active locale.

```jsx
import Link from 'next/link'

export default function IndexPage(props) {
  return (
    <Link href="/another" locale="fr">
      To /fr/another
    </Link>
  )
}
```

--------------------------------

### Import an Uninstalled Module

Source: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx

This code snippet demonstrates importing a package named `swr`. This will result in a 'Module Not Found' error if the package is not listed in the project's dependencies. To fix this, you must install the package using a package manager like npm (`npm install swr`) or yarn (`yarn add swr`).

```javascript
import useSWR from 'swr'
```

--------------------------------

### Basic Usage of the Next.js Image Component in TSX/JSX

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx

This snippet demonstrates the fundamental usage of the Image component from `next/image`. It shows how to import and render the component within a Next.js page, which is the starting point for implementing image optimization. The `src` and `alt` props are required.

```tsx
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

```jsx
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

--------------------------------

### Triggering a Reserved Port Error in Next.js

Source: https://github.com/vercel/next.js/blob/canary/errors/reserved-port.mdx

These commands demonstrate how starting either the Next.js production server (`next start`) or development server (`next dev`) on a reserved port like 4045 will result in an error. This is because such ports are blocked by browser standards to prevent security vulnerabilities.

```bash
next start -p 4045
```

```bash
next dev --port 4045
```

--------------------------------

### Create a Basic API Route in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx

This example demonstrates a basic API route located at `pages/api/hello.ts` (or `.js`). It defines a default export function that handles incoming requests and sends a JSON response with a 200 status code. This illustrates the fundamental structure of an API endpoint in Next.js.

```typescript
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

```javascript
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

--------------------------------

### GET /auth/callback

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This endpoint acts as a callback URL for third-party authentication flows. It captures a session token from the query parameters, sets it as a secure, HTTP-only cookie, and redirects the user to a specified URL.

```APIDOC
## GET /auth/callback

### Description
Handles the callback from a third-party authentication provider. It receives a session token, sets it in a `_token` cookie, and redirects the user to complete the login process.

### Method
GET

### Endpoint
/auth/callback

### Parameters
#### Query Parameters
- **session_token** (string) - Required - The session token provided by the third-party service upon successful authentication.
- **redirect_url** (string) - Required - The URL to redirect the user to after the session token has been set as a cookie.

### Response
#### Success Response (307/308)
The server responds with a redirect to the provided `redirect_url`. The response includes a `Set-Cookie` header to establish the user's session.
- **Header**: `Set-Cookie: _token=<session_token>; Path=/; Secure; HttpOnly`
```

--------------------------------

### Combine `withMDX` and Custom Next.js Configuration

Source: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md

Pass your existing Next.js configuration object as an argument to the `withMDX()` call. This merges the MDX setup with your custom settings, such as a webpack configuration.

```javascript
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX({
  webpack(config, options) {
    return config
  },
})
```

--------------------------------

### Demonstrate JavaScript Module Splitting for Development

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md

This example shows how a script can be split into two parts for a development environment, likely by a tool like Turbopack. The first part ('Part 0') declares a variable and exports it using a tool-specific `export ... from` syntax. The second part ('Part 1') imports that variable and uses it, demonstrating how dependencies between code chunks are managed.

```javascript
// Part 0
let x = 0;
export { x as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

// Part 1
import { a as x } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
console.log(x);
console.log(x);
```

--------------------------------

### Create a Shared Layout Component in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx

This example demonstrates how to create a reusable layout component that wraps page content. This component, typically placed in a `components` directory, can include shared elements like a navigation bar and footer, and it renders the page content passed as `children` props.

```jsx
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

--------------------------------

### Generate Posts API in WordPress

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This function generates an array of post URLs and their last modified dates. It uses `WP_Query` to fetch posts based on arguments from `wsra_get_user_inputs`. It returns an array of URLs and modified dates.

```php
function wsra_generate_posts_api()
{
  [, $postArgs] = wsra_get_user_inputs();
  $postUrls = array();
  $query = new WP_Query($postArgs);

  while ($query->have_posts()) {
    $query->the_post();
    $uri = str_replace(home_url(), '', get_permalink());
    $tempArray = [
      'url' => $uri,
      'post_modified_date' => get_the_modified_date(),
    ];
    array_push($postUrls, $tempArray);
  }
  wp_reset_postdata();
  return array_merge($postUrls);
}
```

--------------------------------

### Create a Dynamic Component Using the `cookies` API

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx

This example shows how a component becomes dynamic by using a server-side Next.js API like `cookies`. When this component is used on a PPR-enabled page, Next.js will defer its rendering and stream it to the client, while the rest of the page remains static.

```javascript
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}
```

```typescript
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}
```

--------------------------------

### Generate a Video Sitemap in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/sitemap.mdx

This example demonstrates how to create a video sitemap by adding a `videos` property to a sitemap entry in `app/sitemap.ts`. Each object in the `videos` array contains details about a specific video, which Next.js will use to generate the corresponding `<video>` tags in the final `sitemap.xml` file.

```typescript
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      videos: [
        {
          title: 'example',
          thumbnail_loc: 'https://example.com/image.jpg',
          description: 'this is the description',
        },
      ],
    },
  ]
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<urlset
  xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
  xmlns:video="http://www.google.com/schemas/sitemap-video/1.1"
>
  <url>
    <loc>https://example.com</loc>
    <video:video>
      <video:title>example</video:title>
      <video:thumbnail_loc>https://example.com/image.jpg</video:thumbnail_loc>
      <video:description>this is the description</video:description>
    </video:video>
    <lastmod>2021-01-01</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.5</priority>
  </url>
</urlset>
```

--------------------------------

### Embed a YouTube Video with `@next/third-parties` in Next.js

Source: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md

This example demonstrates how to use the `YouTubeEmbed` component from `@next/third-parties/google` to efficiently display a YouTube video. The component utilizes `lite-youtube-embed` for improved performance and requires a `videoid` prop to specify the video.

```javascript
import { YouTubeEmbed } from '@next/third-parties/google'

export default function Page() {
  return <YouTubeEmbed videoid="ogfYd705cRs" height={400} />
}
```

--------------------------------

### Filter Comparative Benchmarks for Specific Bundlers

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md

This command demonstrates how to filter the benchmark suite to run tests only for specific bundlers. The example targets the `hmr_to_eval` benchmark for Turbopack CSR and Vite, enabling a direct comparison between them.

```sh
cargo bench -p turbopack-bench -p turbopack-cli -- "hmr_to_eval/(Turbopack CSR|Vite)"
```

--------------------------------

### Disable Preloading Entries on Start in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx

This experimental configuration prevents Next.js from preloading all page JavaScript modules into memory when the server starts. Disabling this feature reduces the initial memory footprint but may result in slower response times for initial page requests, as modules are loaded on-demand.

```typescript
import type { NextConfig } from 'next'

const config: NextConfig = {
  experimental: {
    preloadEntriesOnStart: false,
  },
}

export default config
```

```javascript
/** @type {import('next').NextConfig} */
const config = {
  experimental: {
    preloadEntriesOnStart: false,
  },
}

export default config
```

--------------------------------

### Configure module path aliases in Next.js tsconfig/jsconfig

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This snippet extends the `tsconfig.json` or `jsconfig.json` configuration to include the `paths` option. It demonstrates how to create custom aliases like `@/styles/*` and `@/components/*`, making imports cleaner and more organized, relative to the defined `baseUrl`.

```json
{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}
```

--------------------------------

### Write a Puppeteer E2E Test for Checkly

Source: https://github.com/vercel/next.js/blob/canary/test/development/acceptance-app/fixtures/app-hmr-changes/app/(post)/2020/develop-preview-test/page.mdx

This Node.js script demonstrates a simple end-to-end test using Puppeteer. The script launches a headless Chrome browser, navigates to a URL specified by the `ENVIRONMENT_URL` environment variable (typically provided by a CI/CD service like Vercel), and asserts that the page's title matches an expected value. This code is designed to run in a serverless environment like Checkly, where the setup and scheduling logic are handled by the platform.

```javascript
const puppeteer = require('puppeteer')
const assert = require('assert')

const browser = await puppeteer.launch()
const page = await browser.newPage()

// `ENVIRONMENT_URL` is a global variable
// that points to the URL of the preview deployment
await page.goto(process.env.ENVIRONMENT_URL)

const title = await page.title()
assert.strictEqual(title, 'Blog - Guillermo Rauch')

await browser.close()
```

--------------------------------

### GET /api/redirects

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx

Retrieves a specific redirect entry based on a provided pathname. The endpoint queries a static JSON file to find the corresponding destination and redirect type.

```APIDOC
## GET /api/redirects

### Description
Retrieves a redirect entry from a `redirects.json` file. The entry is identified by the `pathname` provided as a query parameter.

### Method
GET

### Endpoint
`/api/redirects`

### Parameters
#### Query Parameters
- **pathname** (string) - Required - The path to look up in the redirects file.

### Response
#### Success Response (200)
Returns the redirect entry object if found.
- **destination** (string) - The target URL for the redirect.
- **permanent** (boolean) - A boolean indicating if the redirect is permanent.

#### Response Example (Success)
```json
{
  "destination": "/new-page",
  "permanent": true
}
```

#### Error Response (400)
Returns an error message if the `pathname` parameter is missing or if no corresponding redirect entry is found.

#### Response Example (Error)
```json
{
  "message": "Bad Request"
}
```

```json
{
  "message": "No redirect"
}
```

```

--------------------------------

### Review Turbopack Entrypoints Configuration

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md

This text represents a configuration for module entrypoints within Turbopack. It maps specific named exports (`CHIMERA`, `DOG`) and general exports to numerical identifiers, which likely correspond to the partitioned module parts for evaluation.

```plaintext
{
    ModuleEvaluation: 4,
    Export(
        "CHIMERA",
    ): 1,
    Export(
        "DOG",
    ): 2,
    Exports: 3,
}
```

--------------------------------

### Implement Time-Based Revalidation in a Next.js App Router Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx

This example demonstrates how to set up time-based Incremental Static Regeneration (ISR) in a Next.js App Router page. By exporting a `revalidate` constant, the page will be regenerated in the background after a specified interval (e.g., 3600 seconds). The example fetches and displays blog posts, serving a cached version immediately while a fresh version is generated upon the next request after the timeout.

```typescript
interface Post {
  id: string
  title: string
  content: string
}

export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts: Post[] = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

```javascript
export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

--------------------------------

### Implement Prefetch on Hover for Next.js Links

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx

This example creates a custom `HoverPrefetchLink` component that initiates prefetching only when the user hovers over the link. It uses React's `useState` hook to manage the hover state and conditionally enables the `prefetch` prop on the `next/link` component, offering a balance between performance and resource conservation.

```tsx
'use client'

import Link from 'next/link'
import { useState } from 'react'

function HoverPrefetchLink({ 
  href, 
  children, 
}: { 
  href: string
  children: React.ReactNode 
}) {
  const [active, setActive] = useState(false)

  return (
    <Link
      href={href}
      prefetch={active ? null : false}
      onMouseEnter={() => setActive(true)}
    >
      {children}
    </Link>
  )
}
```

```jsx
'use client'

import Link from 'next/link'
import { useState } from 'react'

function HoverPrefetchLink({ href, children }) {
  const [active, setActive] = useState(false)

  return (
    <Link
      href={href}
      prefetch={active ? null : false}
      onMouseEnter={() => setActive(true)}
    >
      {children}
    </Link>
  )
}
```

--------------------------------

### Define Next.js App Router Root Layout Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This code snippet defines the required root layout component for a Next.js application using the App Router. It wraps the entire application, must contain `<html>` and `<body>` tags, and accepts `children` to render page-specific content.

```tsx
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

```jsx
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

--------------------------------

### Set Application Port via Environment Variable

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx

Next.js 11 supports setting the application port using the `PORT` environment variable for both `next dev` and `next start`. This is an alternative to using the `-p` or `--port` flag.

```bash
PORT=4000 next start
```

--------------------------------

### Manage Request Cookies with NextRequest in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx

The `NextRequest` object extends the standard Web Request API and provides a `cookies` property for managing request cookies. This property includes methods to set, get, get all, delete, check for, and clear cookies from the incoming request's `Set-Cookie` header.

```typescript
// set(name, value): Set a cookie on the request.
// Given incoming request /home, it adds `Set-Cookie:show-banner=false;path=/home` header.
request.cookies.set('show-banner', 'false');

// get(name): Get the value of a cookie.
// Returns { name: 'show-banner', value: 'false', Path: '/home' }
request.cookies.get('show-banner');

// getAll(name?): Get all cookies with a given name, or all cookies if no name is provided.
// Example with multiple cookies of the same name:
// [ { name: 'experiments', value: 'new-pricing-page', Path: '/home' }, ... ]
request.cookies.getAll('experiments');
// Get all cookies
request.cookies.getAll();

// delete(name): Delete a cookie from the request.
// Returns true if a cookie was deleted, false otherwise.
request.cookies.delete('experiments');

// has(name): Check if a cookie exists.
// Returns true if the cookie exists, false if not.
request.cookies.has('experiments');

// clear(): Remove the `Set-Cookie` header from the request.
request.cookies.clear();
```

--------------------------------

### Define a GET API Route to Inspect Component Types

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md

This JavaScript function defines a `GET` request handler for a Next.js App Router API route. The function returns a JSON response containing the types of two imported components, `ClientComponent` and `MyModuleClientComponent`, using the `typeof` operator. This is a technique to verify how components are being interpreted on the server.

```javascript
export function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}
```

--------------------------------

### Register REST API Routes in WordPress

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This registers custom REST API routes under the 'sitemap/v1' namespace. Each route is associated with a callback function to generate sitemap data for posts, taxonomies, authors, and total pages.

```php
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/posts', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_posts_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/taxonomy', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_taxonomy_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/author', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_author_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/totalpages', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_totalpages_api',
  ));
});
```

--------------------------------

### Use Path Parameters in Next.js Headers

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx

You can capture dynamic segments from the URL path and use them in your header values or keys. In this example, for a request to `/blog/hello-world`, the `:slug` parameter is captured and used to dynamically set the `x-slug` and `x-slug-hello-world` headers.

```javascript
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug',
        headers: [
          {
            key: 'x-slug',
            value: ':slug', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

--------------------------------

### Validate Client Input in Next.js Server Components

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx

This snippet demonstrates the importance of validating user input on the server instead of trusting client-side data like search parameters. The bad example shows a vulnerability where `searchParams` are trusted directly, while the good example shows re-verifying the user's status on the server using a token from cookies.

```tsx
// BAD: Trusting searchParams directly
export default async function Page({ searchParams }) {
  const isAdmin = searchParams.get('isAdmin')
  if (isAdmin === 'true') {
    // Vulnerable: relies on untrusted client data
    return <AdminPanel />
  }
}

// GOOD: Re-verify every time
import { cookies } from 'next/headers'
import { verifyAdmin } from './auth'

export default async function Page() {
  const token = cookies().get('AUTH_TOKEN')
  const isAdmin = await verifyAdmin(token)

  if (isAdmin) {
    return <AdminPanel />
  }
}
```

--------------------------------

### Implement Basic Client-Side Instrumentation in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation-client.mdx

Create an `instrumentation-client.ts` or `instrumentation-client.js` file in the root of your Next.js project to set up client-side monitoring. This example shows how to use the `performance` API, log an analytics initialization message, and add a global error event listener to report errors before the application hydrates.

```typescript
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

```javascript
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

--------------------------------

### Customize Rules for Specific User Agents

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/robots.mdx

Define different crawling rules for specific search engine bots by passing an array of rule objects to the `rules` property. This example provides distinct rules for 'Googlebot' versus 'Applebot' and 'Bingbot' within a dynamically generated `robots` file.

```typescript
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: [
      {
        userAgent: 'Googlebot',
        allow: ['/'],
        disallow: '/private/',
      },
      {
        userAgent: ['Applebot', 'Bingbot'],
        disallow: ['/'],
      },
    ],
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

```javascript
export default function robots() {
  return {
    rules: [
      {
        userAgent: 'Googlebot',
        allow: ['/'],
        disallow: ['/private/'],
      },
      {
        userAgent: ['Applebot', 'Bingbot'],
        disallow: ['/'],
      },
    ],
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

--------------------------------

### Define Next.js Pages Router Custom App Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This code defines a custom `_app` component for the Next.js Pages Router. It is used to initialize pages, control global styling, and ensure layout persistence between page navigations. It takes `Component` and `pageProps` as props.

```tsx
import type { AppProps } from 'next/app'

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}
```

```jsx
export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}
```

--------------------------------

### Implement Client-Side Navigation in a Static Next.js App

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx

This example demonstrates how to create client-side navigation in a statically exported Next.js application using the `Link` component from `next/link`. This enables SPA-like route transitions between pages without requiring a full page reload from the server.

```typescript
import Link from 'next/link'

export default function Page() {
  return (
    <>
      <h1>Index Page</h1>
      <hr />
      <ul>
        <li>
          <Link href="/post/1">Post 1</Link>
        </li>
        <li>
          <Link href="/post/2">Post 2</Link>
        </li>
      </ul>
    </>
  )
}
```

```javascript
import Link from 'next/link'

export default function Page() {
  return (
    <>
      <h1>Index Page</h1>
      <p>
        <Link href="/other">Other Page</Link>
      </p>
    </>
  )
}
```

--------------------------------

### Run E2E Tests in Production Mode

Source: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md

This command runs a specific end-to-end test suite in production mode. It simulates a production environment by first running `next build` and then `next start` before executing the tests.

```sh
pnpm test-start test/e2e/app-dir/app/
```

--------------------------------

### Get Absolute Path to regenerator-runtime's runtime.js

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md

This snippet shows how to retrieve the absolute file system path of the `runtime.js` file from the regenerator-runtime package using a `require` statement in a Node.js environment.

```javascript
require("regenerator-runtime/path").path
```

--------------------------------

### Create a Nested Route Page in Next.js (TypeScript/JavaScript)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx

To create a nested route like `/blog`, create a `blog` folder inside the `app` directory and add a `page` file. This file exports a React component that defines the UI for that specific route segment. The example shows an asynchronous component that fetches and displays a list of posts.

```tsx
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

```jsx
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

--------------------------------

### Prefetch Pages for Faster Transitions with Next.js router.prefetch

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx

The `router.prefetch` method allows you to prefetch a page's data in the background, leading to faster client-side transitions. This is a production-only feature and is most useful for navigations that are not handled by `next/link`, which prefetches automatically. In the example, the dashboard is prefetched on the login page to speed up the transition after a successful login.

```jsx
import { useCallback, useEffect } from 'react'
import { useRouter } from 'next/router'

export default function Login() {
  const router = useRouter()
  const handleSubmit = useCallback((e) => {
    e.preventDefault()

    fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        /* Form data */
      }),
    }).then((res) => {
      // Do a fast client-side transition to the already prefetched dashboard page
      if (res.ok) router.push('/dashboard')
    })
  }, [])

  useEffect(() => {
    // Prefetch the dashboard page
    router.prefetch('/dashboard')
  }, [router])

  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
      <button type="submit">Login</button>
    </form>
  )
}
```

--------------------------------

### Enable MDX in `next.config.js`

Source: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md

Create or modify `next.config.js` to wrap your Next.js configuration with the `withMDX` higher-order component. This basic setup enables MDX processing for `.mdx` files.

```javascript
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX()
```

--------------------------------

### Implement a Cloudinary Image Loader in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx

This example demonstrates a custom loader function for Cloudinary. It constructs the URL by prepending a comma-separated list of transformation parameters, such as format, crop, width, and quality, to the image source path.

```javascript
// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg
export default function cloudinaryLoader({ src, width, quality }) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://example.com/${params.join(',')}${src}`
}
```

--------------------------------

### Update package.json Scripts for Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

To migrate from Create React App, replace the `react-scripts` commands in your `package.json` with the corresponding Next.js commands. Use `next dev` for development, `next build` for creating a production build, and a static server like `serve` for the start script if needed.

```json
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "npx serve@latest ./build"
  }
}
```

--------------------------------

### Create the Next.js Configuration File for SPA Output

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

This TypeScript code defines the initial configuration for Next.js in a `next.config.ts` file. The `output: 'export'` setting configures the project to produce a static Single-Page Application (SPA), and `distDir: 'build'` changes the output directory to `build`, which aligns with Create React App's default. This setup facilitates a smoother initial migration by treating the app as purely client-side.

```typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA)
  distDir: 'build', // Changes the build output directory to `build`
}

export default nextConfig
```

--------------------------------

### Configure Next.js Image `remotePatterns` with Wildcard Hostname

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx

Utilize wildcard patterns like `**` within the `hostname` property of `remotePatterns` in `next.config.js` to allow images from subdomains. This example permits sources like `image.example.com`, but query strings and custom ports remain blocked by default.

```js
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.example.com',
        port: '',
        search: ''
      }
    ]
  }
}
```

--------------------------------

### Run Mocha Tests

Source: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md

Executes the Mocha test suite within the Next.js application. These commands use either npm, yarn, or pnpm to run the test script defined in the package.json file.  The tests are executed in a Node.js environment.

```bash
npm run test
```

```bash
yarn test
```

```bash
pnpm test
```

--------------------------------

### Create a Root Layout in Next.js `app` Directory

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx

Defines a root layout component for a Next.js application using the `app` directory. This component is required, must accept a `children` prop, and must render the `<html>` and `<body>` tags. This example is provided in both TypeScript (.tsx) and JavaScript (.js).

```typescript
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

```javascript
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

--------------------------------

### Create a Middleware with a Matcher

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx

Defines a middleware function that redirects requests matching a specific path. The `config` object is used to export a `matcher`, which filters the routes on which the Middleware will run. The example is provided in both TypeScript and JavaScript.

```typescript
import { NextResponse, NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

```javascript
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

--------------------------------

### Refactor Synchronous Request API Calls to Async in Next.js 15

Source: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx

Demonstrates how to manually refactor code for Next.js 15's async request APIs. The 'before' example shows a synchronous `getToken` function that incorrectly calls `cookies()`. The 'after' example shows the corrected code, where both the utility function and the consuming Page component are converted to use `async/await` to properly handle the Promise returned by `cookies()`.

```jsx
// Before: Synchronous access (Incorrect in Next.js 15)

// filename=".../token-utils.js"
// This function is sync and the codemod won't make it async
// because it doesn't know about every callsite that uses it.
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}

// filename="app/page.js"
import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return /* ... */
}

// After: Refactored to async/await (Correct)

// filename=".../token-utils.js"
export async function getToken() {
  return (await cookies()).get('token')
}

// filename="app/page.js"
import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return /* ... */
}
```

--------------------------------

### Merge and Export Multiple Module Parts in Turbopack

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md

This example demonstrates how Turbopack can merge bindings from different module parts. It imports `c1_3` and `c2_2` from their respective `__TURBOPACK_PART__` locations and then exports both, creating a new module that combines functionalities.

```javascript
import { e as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { h as c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
export { c1_3 };
export { c2_2 };
```

--------------------------------

### Generate Total Pages API in WordPress

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md

This function calculates and returns an array containing the total counts for categories, tags, users, and published posts for each post type. It retrieves all public post types and counts their published posts.

```php
function wsra_generate_totalpages_api()
{
  $args = array(
    'exclude_from_search' => false
  );
  $argsTwo = array(
    'publicly_queryable' => true
  );
  $post_types = get_post_types($args, 'names');
  $post_typesTwo = get_post_types($argsTwo, 'names');
  $post_types = array_merge($post_types, $post_typesTwo);
  unset($post_types['attachment']);
  $defaultArray = [
    'category' => count(get_categories()),
    'tag' => count(get_tags()),
    'user' => (int)count_users()['total_users'],
  ];
  $tempValueHolder = array();
  foreach ($post_types as $postType) {
    $tempValueHolder[$postType] = (int)wp_count_posts($postType)->publish;
  }
  return array_merge($defaultArray, $tempValueHolder);
}
```

--------------------------------

### GET /api/revalidate

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx

This endpoint triggers on-demand revalidation for a specified cache path. The path to be revalidated must be provided as a query parameter.

```APIDOC
## GET /api/revalidate

### Description
This endpoint triggers on-demand revalidation for a specified cache path. It is useful for updating content when it changes in a headless CMS or database. The function `revalidatePath` from `next/cache` is used internally.

### Method
GET

### Endpoint
/api/revalidate

### Parameters
#### Query Parameters
- **path** (string) - Required - The path to revalidate (e.g., `/blog/my-post`).

### Response
#### Success Response (200)
- **revalidated** (boolean) - Indicates if the revalidation was successfully triggered. Always `true`.
- **now** (number) - The server timestamp when the revalidation was processed.

#### Error Response (400)
- **revalidated** (boolean) - Indicates that revalidation was not triggered. Always `false`.
- **now** (number) - The server timestamp when the request was processed.
- **message** (string) - An error message indicating why revalidation failed, such as "Missing path to revalidate".

### Response Example
#### Success
```json
{
  "revalidated": true,
  "now": 1678886400000
}
```

#### Error (Missing Path)
```json
{
  "revalidated": false,
  "now": 1678886400000,
  "message": "Missing path to revalidate"
}
```
```

--------------------------------

### Fetch Data for Dynamic Pages in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx

Provides a complete example for a dynamic page that uses both `getStaticPaths` and `getStaticProps`. `getStaticPaths` determines which pages to pre-render, and `getStaticProps` fetches the specific data for each of those pages using the `params` object, which contains the route parameters like the post `id`.

```jsx
export default function Post({ post }) {
  // Render post...
}

export async function getStaticPaths() {
  // ...
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}
```

--------------------------------

### Configure base URL for absolute imports in Next.js tsconfig/jsconfig

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx

This configuration snippet shows how to set the `baseUrl` option in `tsconfig.json` or `jsconfig.json`. This property defines the base directory for resolving module paths, enabling absolute imports relative to the specified root.

```json
{
  "compilerOptions": {
    "baseUrl": "src/"
  }
}
```

--------------------------------

### Create a Backend Proxy with a Next.js Route Handler

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This example demonstrates how to implement a server-side proxy using a Next.js Route Handler. The POST handler validates the incoming request before cloning it and forwarding it to an external backend service using the native fetch API. It includes basic error handling for the proxy request.

```typescript
import { isValidRequest } from '@/lib/utils'

export async function POST(request: Request, { params }) {
  const clonedRequest = request.clone()
  const isValid = await isValidRequest(clonedRequest)

  if (!isValid) {
    return new Response(null, { status: 400, statusText: 'Bad Request' })
  }

  const { slug } = await params
  const pathname = slug.join('/')
  const proxyURL = new URL(pathname, 'https://nextjs.org')
  const proxyRequest = new Request(proxyURL, request)

  try {
    return fetch(proxyRequest)
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

```javascript
import { isValidRequest } from '@/lib/utils'

export async function POST(request, { params }) {
  const clonedRequest = request.clone()
  const isValid = await isValidRequest(clonedRequest)

  if (!isValid) {
    return new Response(null, { status: 400, statusText: 'Bad Request' })
  }

  const { slug } = await params
  const pathname = slug.join('/')
  const proxyURL = new URL(pathname, 'https://nextjs.org')
  const proxyRequest = new Request(proxyURL, request)

  try {
    return fetch(proxyRequest)
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

--------------------------------

### Configure Responsive Image Sizes in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx

This example demonstrates how to use the `sizes` property with the `next/legacy/image` component to optimize image loading for different viewport widths. It specifies various `vw` values to help the browser select the most appropriate image size from the automatically generated `srcset`, significantly improving performance for responsive layouts.

```javascript
import Image from 'next/legacy/image'
const Example = () => (
  <div className="grid-element">
    <Image
      src="/example.png"
      layout="fill"
      sizes="(max-width: 768px) 100vw,
              (max-width: 1200px) 50vw,
              33vw"
    />
  </div>
)
```

--------------------------------

### Add Unconfigured Babel Plugins in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx

To add Babel presets or plugins without specific configurations, list them in the `presets` or `plugins` arrays within your `.babelrc` file. This example adds the `@babel/plugin-proposal-do-expressions` plugin.

```json
{
  "presets": ["next/babel"],
  "plugins": ["@babel/plugin-proposal-do-expressions"]
}
```

--------------------------------

### Create a Root Layout from HTML Structure in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx

This example demonstrates converting a standard `index.html` file into a Next.js `RootLayout` component. The full `<html>`, `<head>`, and `<body>` structure is defined in JSX, with the `{children}` prop placed within the body to render the active page.

```tsx
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

```jsx
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

--------------------------------

### Example of Browser Console Log with Source Location

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/browserDebugInfoInTerminal.mdx

This React component demonstrates a simple `console.log` call triggered by a button click. When `browserDebugInfoInTerminal` is enabled, clicking this button will print 'Hello World' along with its source location (e.g., 'app/page.tsx:8:17') directly in your terminal.

```tsx
'use client'

export default function Home() {
  return (
    <button
      type="button"
      onClick={() => {
        console.log('Hello World')
      }}
    >
      Click me
    </button>
  )
}
```

--------------------------------

### Clear Redis Cache via CLI

Source: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md

Connect to the running Redis container using `docker exec` to access the Redis command-line interface. Once connected, use the `flushall` command to completely clear all data from the Redis cache, which is useful for testing or resetting state.

```bash
docker exec -it redis-stack redis-cli
127.0.0.1:6379> flushall
OK
```

--------------------------------

### Conditionally Load Components in MDX with Next.js

Source: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md

This TypeScript code demonstrates conditionally loading a heavy component in an MDX file using next/dynamic. It avoids loading the component on every page by checking if the component is used in the MDX source.

```typescript
import dynamic from "next/dynamic";
import Test from "@/components/test";
import { MDXRemote, type MDXRemoteProps } from 'next-mdx-remote/rsc'

const SomeHeavyComponent = dynamic(() => import("../component/SomeHeavyComponent"));

const defaultComponents = { Test };

export function CustomMDX(props: MDXRemoteProps) {
  const componentNames = [
    /<SomeHeavyComponent/.test(props.source as string) ? "SomeHeavyComponent" : "",
  ].filter(Boolean);

  const components = {
    ...defaultComponents,
    SomeHeavyComponent: componentNames.includes("SomeHeavyComponent")
      ? SomeHeavyComponent
      : () => null,
  };

  return <MDXRemote {...props} components={components} />;
}
```

--------------------------------

### Create a Source MDX Page for Shared Next.js Docs Content

Source: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx

This `mdx` snippet illustrates a source documentation page, complete with `title` and `description` metadata. Its content, focusing on the `<Link>` component, is designed to be pulled into other pages using the `source` field, thereby preventing content duplication and ensuring consistency across related documentation sections.

```mdx
---
title: <Link>
description: API reference for the <Link> component.
---

This API reference will help you understand how to use the props
and configuration options available for the Link Component.
```

--------------------------------

### Redirect Requests with Next.js Middleware

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This example illustrates how to perform redirects using Next.js Middleware. It checks for a specific incoming path (`/v1/docs`) and redirects the user to a new version of the path (`/v2/docs`) using `NextResponse.redirect`. This is a common pattern for handling URL changes or migrating content.

```typescript
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  if (request.nextUrl.pathname === '/v1/docs') {
    request.nextUrl.pathname = '/v2/docs'
    return NextResponse.redirect(request.nextUrl)
  }
}
```

```javascript
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/v1/docs') {
    request.nextUrl.pathname = '/v2/docs'
    return NextResponse.redirect(request.nextUrl)
  }
}
```

--------------------------------

### Inject Component Styles into the DOM

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/next-devtools/README.md

This snippet shows how to create a style entrypoint component that imports style strings from other components. It uses a `<style>` tag and a `css()` utility function to aggregate and inject minified CSS into the Shadow DOM, thereby applying the styles to the dev overlay.

```tsx
import { COMPONENT_NAME_STYLES } from './component'

export function ComponentStyles() {
  return (
    <style>
      {css`
        // ...
        ${COMPONENT_NAME_STYLES}
      `}
    </style
  )
}
```

--------------------------------

### Client-Side Data Fetching with useEffect in React

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx

This example demonstrates how to fetch data on the client side using the standard React `useEffect` and `useState` hooks. The data is fetched from an API endpoint when the component mounts, and the component's state is updated to reflect loading and final data states.

```jsx
import { useState, useEffect } from 'react'

function Profile() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(true)

  useEffect(() => {
    fetch('/api/profile-data')
      .then((res) => res.json())
      .then((data) => {
        setData(data)
        setLoading(false)
      })
  }, [])

  if (isLoading) return <p>Loading...</p>
  if (!data) return <p>No profile data</p>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}
```

--------------------------------

### Create Next.js app with custom Babel config (Yarn)

Source: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md

This command initializes a new Next.js application with a custom Babel configuration using Yarn. It utilizes the 'create next app' command to bootstrap the project with the specified example.

```bash
yarn create next-app --example with-custom-babel-config with-custom-babel-config-app
```

--------------------------------

### Define a Server Action in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx

This example shows the basic structure for creating a Server Action in Next.js. By adding the `'use server'` directive at the top of a file, any exported async functions within it are designated as Server Actions that can be securely called from either the client or the server.

```tsx
'use server'

export async function create() {}
```

```js
'use server'

export async function create() {}
```

--------------------------------

### Pass a Server Component as a Child to a Client Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx

This example shows how a parent Server Component can import both a Client Component (`Modal`) and another Server Component (`Cart`), then pass the `Cart` as a child to the `Modal`. This technique allows server-rendered content to be placed inside a client-side interactive shell.

```tsx
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

```jsx
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

--------------------------------

### Implement Full-Screen Background Image in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx

This example shows how to use the Next.js `Image` component with the `fill` prop to make an image cover the entire screen area. It also includes `placeholder="blur"` and `quality={100}` for optimized loading and improved user experience.

```jsx
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Background() {
  return (
    <Image
      alt="Mountains"
      src={mountains}
      placeholder="blur"
      quality={100}
      fill
      sizes="100vw"
      style={{
        objectFit: 'cover',
      }}
    />
  )
}
```

--------------------------------

### Implement Streaming with React Suspense in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/loading.mdx

This example demonstrates how to use React's `<Suspense>` component within a Next.js page to enable streaming. By wrapping components that perform asynchronous actions, like `<PostFeed />` and `<Weather />`, in `<Suspense>`, a fallback UI can be shown while the component's data is being fetched. This improves perceived performance by progressively rendering content.

```tsx
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

```jsx
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

--------------------------------

### Configure Jest with the Next.js Compiler

Source: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx

This configuration integrates Jest with a Next.js project using the built-in SWC-based transpilation. The `next/jest` helper simplifies setup by automatically handling transforms, mocking static assets like CSS and images, and loading environment variables from `.env` files.

```javascript
const nextJest = require('next/jest')

// Providing the path to your Next.js app which will enable loading next.config.js and .env files
const createJestConfig = nextJest({ dir: './' })

// Any custom config you want to pass to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
}

// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async
module.exports = createJestConfig(customJestConfig)
```

--------------------------------

### Append Elements to Page Head in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx

This example demonstrates the basic usage of the built-in `Head` component from `next/head`. By wrapping elements like `<title>` inside the `<Head>` component within a page, you can add them to the document's head.

```jsx
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage
```

--------------------------------

### Import and Instantiate the Next.js App

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx

This code shows the essential import required to connect a custom server with a Next.js application. The `next` function is imported and called to create an `app` instance, which is then used to handle requests within the custom server environment.

```javascript
import next from 'next'

const app = next({})
```

--------------------------------

### Configure Environment Variables in .env.local

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md

Defines the required environment variables for connecting to the TakeShape API. These variables include the project ID, API key, and a secret for enabling Next.js preview mode to view unpublished content.

```bash
TAKESHAPE_PROJECT_ID=...
TAKESHAPE_API_KEY=...
TAKESHAPE_PREVIEW_SECRET=...
```

--------------------------------

### Define Next.js Configuration as an Async Function

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/index.mdx

Shows how to use an `async` function in `next.config.js` to perform asynchronous operations during configuration setup, available since Next.js 12.1.0. This is useful for fetching data or other async tasks needed to build the config object.

```javascript
// @ts-check

module.exports = async (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}
```

--------------------------------

### Store a Secret Key in an Environment Variable File

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx

This example demonstrates how to store a generated secret key in a `.env` file. The key is assigned to the `SESSION_SECRET` environment variable, which can then be accessed securely within the application without hardcoding it.

```bash
SESSION_SECRET=your_secret_key
```

--------------------------------

### Revalidate a Specific URL

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx

A simple example of using `revalidatePath` to invalidate a single, specific URL. This marks the cache for '/blog/post-1' as stale, causing it to be re-rendered with fresh data on the next visit.

```ts
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/post-1')
```

--------------------------------

### Set Cookies by Returning Response with Set-Cookie Header in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx

This example illustrates how to return a cookie by constructing a `Response` object and explicitly setting the `Set-Cookie` header. It retrieves an existing token from the cookie store and includes it in the new response.

```ts
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` }
  })
}
```

```js
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` }
  })
}
```

--------------------------------

### HTML Output for link rel="preload"

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx

This snippet shows the expected HTML output for a `<link rel="preload">` tag within the `<head>` section of a document. This tag, generated by `ReactDOM.preload`, instructs the browser to start fetching a resource early in the page load process.

```html
<link rel="preload" href="..." as="..." />
```

--------------------------------

### Configure Basic Redirects in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx

This example demonstrates how to set up a basic redirect in `next.config.js`. It uses an async function `redirects` which returns an array of redirect objects. Each object specifies a `source` path, a `destination` path, and a `permanent` flag to determine the HTTP status code (308 for permanent, 307 for temporary).

```javascript
module.exports = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
    ]
  },
}
```

--------------------------------

### Import Global CSS in Next.js Root Layout

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx

This example illustrates how to apply global styles to a Next.js application. A global CSS file is imported directly into the root layout (`app/layout.tsx`), ensuring the styles are loaded for every page.

```typescript
import '../index.css'

export const metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

--------------------------------

### Enable Partial Prerendering and Use Suspense in a Next.js Page

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx

This example demonstrates how to enable the experimental Partial Prerendering feature by setting `export const experimental_ppr = true`. It then uses React's `<Suspense>` component to wrap a dynamic part of the page (`<DynamicComponent />`), providing a `<Fallback />` UI while the dynamic content is being loaded. This structure allows the static parts of the page to be served immediately, improving initial load times.

```jsx
import { Suspense } from 'react'
import StaticComponent from './StaticComponent'
import DynamicComponent from './DynamicComponent'
import Fallback from './Fallback'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
    </>
  )
}
```

--------------------------------

### Migrate to Built-in Next.js Font with Codemod

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx

This codemod uninstalls the `@next/font` package and transforms `@next/font` imports into the built-in `next/font`. For example, `import { Inter } from '@next/font/google'` becomes `import { Inter } from 'next/font/google'`.

```bash
npx @next/codemod@latest built-in-next-font .
```

--------------------------------

### Implement Art Direction for Responsive Images with Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx

This example demonstrates how to use `getImageProps` from `next/image` to define different image sources (`srcSet`) based on screen size (art direction). It utilizes media queries within a `<picture>` element to display distinct images for desktop and mobile devices, optimizing image delivery for various viewports.

```jsx
import { getImageProps } from 'next/image'

export default function Home() {
  const common = { alt: 'Art Direction Example', sizes: '100vw' }
  const {
    props: { srcSet: desktop },
  } = getImageProps({
    ...common,
    width: 1440,
    height: 875,
    quality: 80,
    src: '/desktop.jpg',
  })
  const {
    props: { srcSet: mobile, ...rest },
  } = getImageProps({
    ...common,
    width: 750,
    height: 1334,
    quality: 70,
    src: '/mobile.jpg',
  })

  return (
    <picture>
      <source media="(min-width: 1000px)" srcSet={desktop} />
      <source media="(min-width: 500px)" srcSet={mobile} />
      <img {...rest} style={{ width: '100%', height: 'auto' }} />
    </picture>
  )
}
```

--------------------------------

### Bootstrap a Next.js MDX App with create-next-app

Source: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with MDX for page rendering. The commands are provided for npm (via npx), Yarn, and pnpm package managers.

```bash
npx create-next-app --example mdx-pages mdx-pages-app
```

```bash
yarn create next-app --example mdx-pages mdx-pages-app
```

```bash
pnpm create next-app --example mdx-pages mdx-pages-app
```

--------------------------------

### Configure Enterspeed Preview API Key in .env.local using bash

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md

Sets the `ENTERSPEED_PREVIEW_ENVIRONMENT_API_KEY` and `ENTERSPEED_PREVIEW_SECRET` in the `.env.local` file. This is used to authenticate with the Enterspeed preview environment.

```bash
ENTERSPEED_PRODUCTION_ENVIRONMENT_API_KEY=

# Only required if you want to enable preview mode
ENTERSPEED_PREVIEW_ENVIRONMENT_API_KEY=
ENTERSPEED_PREVIEW_SECRET
```

--------------------------------

### Customize Sass Options in Next.js Configuration

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx

You can configure Sass options in your `next.config.js` file using the `sassOptions` property. This example demonstrates how to use `additionalData` to prepend Sass code, such as a global variable, to every Sass file.

```typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  sassOptions: {
    additionalData: `$var: red;`,
  },
}

export default nextConfig
```

```javascript
/** @type {import('next').NextConfig} */

const nextConfig = {
  sassOptions: {
    additionalData: `$var: red;`,
  },
}

module.exports = nextConfig
```

--------------------------------

### Link to Dynamic Routes using a URL Object in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx

This example provides an alternative method for linking to dynamic routes by passing a URL object to the `href` prop. The `pathname` property specifies the page file in the `pages` directory (e.g., `/blog/[slug]`), and the `query` object supplies the value for the dynamic segment.

```jsx
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link
            href={{
              pathname: '/blog/[slug]',
              query: { slug: post.slug },
            }}
          >
            {post.title}
          </Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

--------------------------------

### Fetch Data in a Server Component for Static Export

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx

This example shows a Next.js Server Component that fetches data during the build process (`next build`). When using static export, the `fetch` request runs once at build time, and the resulting component is pre-rendered into a static HTML file, similar to traditional static site generation.

```typescript
export default async function Page() {
  // This fetch will run on the server during `next build`
  const res = await fetch('https://api.example.com/...');
  const data = await res.json();

  return <main>...</main>;
}
```

--------------------------------

### Using unstable_cache with Key Parts, Tags, and Revalidation

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unstable_cache.mdx

This example shows how to use `unstable_cache` with additional options. It includes `keyParts` to make the cache key more specific using a variable, `tags` for on-demand revalidation, and `revalidate` to set a time-based revalidation period of 60 seconds.

```tsx
import { unstable_cache } from 'next/cache'

export default async function Page({
  params,
}: {
  params: Promise<{ userId: string }>
}) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId }
    },
    [userId], // add the user ID to the cache key
    {
      tags: ['users'],
      revalidate: 60,
    }
  )

  //...
}
```

```jsx
import { unstable_cache } from 'next/cache';

export default async function Page({ params } }) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId };
    },
    [userId], // add the user ID to the cache key
    {
      tags: ["users"],
      revalidate: 60,
    }
  );

  //...
}
```

--------------------------------

### Using Local Images from the Public Folder with Next.js Image

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx

This example shows how to use the `<Image>` component to display a local image stored in the `public` directory. The `src` path is an absolute path from the base URL, and `width` and `height` must be specified to prevent layout shift.

```tsx
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

```jsx
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

--------------------------------

### Turbopack Module Entrypoint Configuration

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md

This object literal defines the entrypoints for a Turbopack build, mapping public export names like `external1`, `foo`, and `foobar` to their corresponding internal module part IDs. This configuration guides the bundler in constructing the final module graph and output.

```javascript
{
    ModuleEvaluation: 7,
    Export(
        "external1",
    ): 9,
    Export(
        "external2",
    ): 10,
    Export(
        "foo",
    ): 3,
    Export(
        "foobar",
    ): 11,
    Exports: 12,
}
```

--------------------------------

### Selectively Apply a Font to a Component

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx

This example demonstrates how to import a specific font from the utility file and apply it to a targeted element, such as an `<h1>` tag within a page. This allows for mixing different fonts for different parts of the UI.

```tsx
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

```jsx
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

--------------------------------

### Define Module Entrypoints for Turbopack

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md

This object defines the entrypoints for the compiled modules in a Turbopack build. It maps specific evaluation stages and named exports, such as the 'default' export, to their corresponding module part identifiers, guiding how the final module is assembled.

```json
{
    ModuleEvaluation: 10,
    Export(
        "default",
    ): 10,
    Exports: 11,
}
```

--------------------------------

### Conditional PostCSS Configuration (JavaScript)

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx

A `postcss.config.js` file allows for dynamic configuration using JavaScript, such as conditionally including plugins based on the environment. This example applies transformations only in the production environment to speed up development.

```javascript
module.exports = {
  plugins:
    process.env.NODE_ENV === 'production'
      ? [
          'postcss-flexbugs-fixes',
          [
            'postcss-preset-env',
            {
              autoprefixer: {
                flexbox: 'no-2009',
              },
              stage: 3,
              features: {
                'custom-properties': false,
              },
            },
          ],
        ]
      : [
          // No transformations in development
        ],
}
```

--------------------------------

### Set Turbopack Root Directory in Next.js (JavaScript)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/turbopack.mdx

This example illustrates how to manually set the `root` option for Turbopack in `next.config.js`. This is useful when Next.js cannot automatically detect the project root, ensuring modules are resolved correctly from the specified absolute path.

```javascript
const path = require('path')
module.exports = {
  turbopack: {
    root: path.join(__dirname, '..'),
  },
}
```

--------------------------------

### Define a Basic Scenario in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md

Demonstrates the basic structure for defining a scenario using the `describe` function from `devlow-bench`. A scenario consists of a name, property options, and an async function that contains the logic to be benchmarked.

```javascript
import { describe } from 'devlow-bench'

describe(
  'my scenario',
  {
    /* property options */
  },
  async (
    {
      /* property values */
    }
  ) => {
    // run the scenario
  }
)
```

--------------------------------

### Customize Body Parser Size Limit in Next.js API Routes

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx

This example demonstrates how to adjust the maximum size for the parsed request body. The `sizeLimit` property accepts any string format supported by the 'bytes' package.

```javascript
export const config = {
  api: {
    bodyParser: {
      sizeLimit: '500kb',
    },
  },
}
```

--------------------------------

### Add Sanity API Read Token to .env.local

Source: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md

This line shows how to add the `SANITY_API_READ_TOKEN` to your `.env.local` file. This token is required for authenticating live preview requests from Sanity Studio and should be kept private.

```bash
SANITY_API_READ_TOKEN="<paste your token here>"
```

--------------------------------

### Read Request Headers using next/headers in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx

This example shows how to retrieve request headers using the `headers()` function from `next/headers` within a Next.js route handler. The returned headers instance is read-only.

```ts
import { headers } from 'next/headers'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const headersList = await headers()
  const referer = headersList.get('referer')
}
```

```js
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')
}
```

--------------------------------

### Implement Authentication Middleware in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx

This middleware example demonstrates how to protect API routes by checking if a request is authenticated. It uses a `matcher` config to apply the middleware only to paths under `/api/`. If authentication fails, it returns a 401 Unauthorized response with a JSON error message.

```typescript
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: Request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

```javascript
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

--------------------------------

### Bootstrap a Next.js App with NextUI

Source: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md

Use `create-next-app` to initialize a new Next.js project pre-configured with NextUI. The commands below are provided for npx (npm), Yarn, and pnpm package managers.

```bash
npx create-next-app --example with-next-ui with-next-ui-app
```

```bash
yarn create next-app --example with-next-ui with-next-ui-app
```

```bash
pnpm create next-app --example with-next-ui with-next-ui-app
```

--------------------------------

### Delete a Cookie with NextResponse in TypeScript

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx

Provides an example of deleting a cookie from the response using the `cookies.delete()` method. The method returns `true` if a cookie was successfully found and marked for deletion, and `false` otherwise.

```typescript
// Given incoming request /home
let response = NextResponse.next()
// Returns true for deleted, false if nothing is deleted
response.cookies.delete('experiments')
```

--------------------------------

### Write an E2E Navigation Test in Cypress

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx

Create a Cypress test file (`app.cy.js`) to verify navigation between pages. The test visits the home page, clicks a link to the 'about' page, and asserts that the URL and page heading have been updated correctly.

```javascript
describe('Navigation', () => {
  it('should navigate to the about page', () => {
    // Start from the index page
    cy.visit('http://localhost:3000/')

    // Find a link with an href attribute containing "about" and click it
    cy.get('a[href*="about"]').click()

    // The new url should include "/about"
    cy.url().should('include', '/about')

    // The new page should contain an h1 with "About"
    cy.get('h1').contains('About')
  })
})
```

--------------------------------

### Generate Static Routes for a Single Dynamic Segment in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx

This example demonstrates using `generateStaticParams` to statically generate routes from a hardcoded list of parameters. The function returns an array of objects, each with an `id`, which will result in the pre-rendering of pages for `/product/1`, `/product/2`, and `/product/3`.

```typescript
export function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }, { id: '3' }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/1
// - /product/2
// - /product/3
export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  // ...
}
```

```javascript
export function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }, { id: '3' }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/1
// - /product/2
// - /product/3
export default async function Page({ params }) {
  const { id } = await params
  // ...
}
```

--------------------------------

### Example of an Absolute Import with `baseUrl` in TSX

Source: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md

This snippet shows how an import statement is simplified after setting the `baseUrl` option in `tsconfig.json` or `jsconfig.json`. The import path is now resolved from the project's root directory, making it shorter and more maintainable.

```tsx
import Button from "components/button";
```

--------------------------------

### Create a Form with a Server Action in Next.js (TSX/JSX)

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx

This example shows how to create a form component in a Next.js page. The `action` prop is passed the `createPost` Server Action, which will be executed on the server when the form is submitted.

```tsx
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

```jsx
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

--------------------------------

### Create Responsive Next.js Image from Remote URL

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx

This example demonstrates how to display a responsive image from a remote URL using the Next.js `Image` component. For remote images, `width` and `height` props must be explicitly provided for Next.js to calculate the aspect ratio, while `sizes` and `style` are used to ensure the image scales correctly across different viewport sizes.

```jsx
import Image from 'next/image'

export default function Page({ photoUrl }) {
  return (
    <Image
      src={photoUrl}
      alt="Picture of the author"
      sizes="100vw"
      style={{
        width: '100%',
        height: 'auto',
      }}
      width={500}
      height={300}
    />
  )
}
```

--------------------------------

### Define regenerator-runtime Globally in JavaScript

Source: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md

Provides code examples for defining `regeneratorRuntime` in the global scope by importing its runtime side effects. This ensures its availability throughout the application without needing to import it in every file.

```javascript
// CommonJS
require("regenerator-runtime/runtime");
```

```javascript
// ECMAScript 2015
import "regenerator-runtime/runtime";
```

--------------------------------

### GET /api/preview

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx

Enables Next.js Preview Mode by setting preview cookies. This endpoint should be secured with a secret token and is typically called by a headless CMS to initiate a preview session for a specific page slug.

```APIDOC
## GET /api/preview

### Description
Enables Next.js Preview Mode for viewing draft content from a headless CMS. It validates a secret token, verifies the existence of a content slug, sets preview-specific cookies, and then redirects the user to the path of the content to be previewed.

### Method
GET

### Endpoint
/api/preview

### Parameters
#### Query Parameters
- **secret** (string) - Required - A secret token used to secure the endpoint. It must match the secret configured on the server.
- **slug** (string) - Required - The URL path of the page to be previewed (e.g., `/posts/my-draft-post`).

### Request Example
A GET request is made to the endpoint with the required query parameters. No request body is sent.
`https://<your-site>/api/preview?secret=MY_SECRET_TOKEN&slug=/posts/my-draft-post`

### Response
#### Success Response (307 Temporary Redirect)
On success, the API sets the `__prerender_bypass` and `__next_preview_data` cookies and issues a `307 Temporary Redirect` to the path provided in the `slug` parameter. There is no JSON response body for a successful request.

#### Error Response (401 Unauthorized)
If the secret is invalid, the slug is missing, or the slug does not correspond to existing content, an error is returned.
- **message** (string) - A description of the error.

#### Response Example
##### Error (401)
```json
{
  "message": "Invalid token"
}
```
or
```json
{
  "message": "Invalid slug"
}
```
```

--------------------------------

### Apply Global File Inclusions in Next.js Tracing

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/output.mdx

This example demonstrates how to use the global key `'/*'` with `outputFileTracingIncludes` to apply a file inclusion rule across all Next.js routes. This is useful for ensuring common assets, such as internationalization locale files, are always included in the build output regardless of the specific route being accessed.

```javascript
module.exports = {
  outputFileTracingIncludes: {
    '/*': ['src/i18n/locales/**/*.json'],
  },
}
```

--------------------------------

### Demonstrate Header Overriding in Next.js

Source: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx

If multiple header configurations match the same request path, the last one defined in the array will take precedence. In this example, a request to `/hello` will receive the `x-hello: world` header because its rule appears after the more generic `/:path*` rule.

```javascript
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'x-hello',
            value: 'there',
          },
        ],
      },
      {
        source: '/hello',
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
    ]
  },
}
```

--------------------------------

### Update All Snapshots with Cargo Nextest

Source: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/README.md

This command automatically updates all snapshot outputs that have changed. By setting the `UPDATE=1` environment variable, `cargo nextest` will accept the new outputs and update the corresponding snapshot files.

```bash
UPDATE=1 cargo nextest run -E 'test(snapshot)'
```

--------------------------------

### Navigate to a Dynamic Route with router.push

Source: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx

Demonstrates navigating to a dynamic route, like `/post/[pid]`, by passing the complete path string to `router.push`.

```jsx
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/post/abc')}>
      Click me
    </button>
  )
}
```